
Lab02_SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053ec  080053ec  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080053ec  080053ec  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053ec  080053ec  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08005400  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08005400  000070f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2a3  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e89  00000000  00000000  000132d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00015168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c1  00000000  00000000  00015c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017088  00000000  00000000  00016551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e991  00000000  00000000  0002d5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fb5  00000000  00000000  0003bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1f1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc4  00000000  00000000  000c1f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000c4d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005380 	.word	0x08005380

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005380 	.word	0x08005380

0800014c <print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(uint32_t num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t temp [] = {"00000000\r\n"};
 8000154:	4a23      	ldr	r2, [pc, #140]	@ (80001e4 <print+0x98>)
 8000156:	f107 030c 	add.w	r3, r7, #12
 800015a:	ca07      	ldmia	r2, {r0, r1, r2}
 800015c:	c303      	stmia	r3!, {r0, r1}
 800015e:	801a      	strh	r2, [r3, #0]
 8000160:	3302      	adds	r3, #2
 8000162:	0c12      	lsrs	r2, r2, #16
 8000164:	701a      	strb	r2, [r3, #0]
	uint8_t i = 7;
 8000166:	2307      	movs	r3, #7
 8000168:	75fb      	strb	r3, [r7, #23]
	while (num != 0) {
 800016a:	e01a      	b.n	80001a2 <print+0x56>
		temp[i] = (num % 10) + 48;
 800016c:	6879      	ldr	r1, [r7, #4]
 800016e:	4b1e      	ldr	r3, [pc, #120]	@ (80001e8 <print+0x9c>)
 8000170:	fba3 2301 	umull	r2, r3, r3, r1
 8000174:	08da      	lsrs	r2, r3, #3
 8000176:	4613      	mov	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	4413      	add	r3, r2
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1aca      	subs	r2, r1, r3
 8000180:	b2d2      	uxtb	r2, r2
 8000182:	7dfb      	ldrb	r3, [r7, #23]
 8000184:	3230      	adds	r2, #48	@ 0x30
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	3318      	adds	r3, #24
 800018a:	443b      	add	r3, r7
 800018c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		num = num / 10;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4a15      	ldr	r2, [pc, #84]	@ (80001e8 <print+0x9c>)
 8000194:	fba2 2303 	umull	r2, r3, r2, r3
 8000198:	08db      	lsrs	r3, r3, #3
 800019a:	607b      	str	r3, [r7, #4]
		i--;
 800019c:	7dfb      	ldrb	r3, [r7, #23]
 800019e:	3b01      	subs	r3, #1
 80001a0:	75fb      	strb	r3, [r7, #23]
	while (num != 0) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d1e1      	bne.n	800016c <print+0x20>
	}
	temp[i] = (num % 10) + 48;
 80001a8:	6879      	ldr	r1, [r7, #4]
 80001aa:	4b0f      	ldr	r3, [pc, #60]	@ (80001e8 <print+0x9c>)
 80001ac:	fba3 2301 	umull	r2, r3, r3, r1
 80001b0:	08da      	lsrs	r2, r3, #3
 80001b2:	4613      	mov	r3, r2
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	4413      	add	r3, r2
 80001b8:	005b      	lsls	r3, r3, #1
 80001ba:	1aca      	subs	r2, r1, r3
 80001bc:	b2d2      	uxtb	r2, r2
 80001be:	7dfb      	ldrb	r3, [r7, #23]
 80001c0:	3230      	adds	r2, #48	@ 0x30
 80001c2:	b2d2      	uxtb	r2, r2
 80001c4:	3318      	adds	r3, #24
 80001c6:	443b      	add	r3, r7
 80001c8:	f803 2c0c 	strb.w	r2, [r3, #-12]


	HAL_UART_Transmit(&huart1, &temp[0], 8, 100);
 80001cc:	f107 010c 	add.w	r1, r7, #12
 80001d0:	2364      	movs	r3, #100	@ 0x64
 80001d2:	2208      	movs	r2, #8
 80001d4:	4805      	ldr	r0, [pc, #20]	@ (80001ec <print+0xa0>)
 80001d6:	f004 fae1 	bl	800479c <HAL_UART_Transmit>
}
 80001da:	bf00      	nop
 80001dc:	3718      	adds	r7, #24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	08005398 	.word	0x08005398
 80001e8:	cccccccd 	.word	0xcccccccd
 80001ec:	200000ac 	.word	0x200000ac

080001f0 <readv>:
#define INA219_BUS_VOLTAGE_REG 0x02
#define INA219_I2C_ADDRESS 0x40
#define INA219_CURRENT_REG 0x04
#define INA219_CALIBRATION_REG 0x05

uint32_t readv(void) {
 80001f0:	b590      	push	{r4, r7, lr}
 80001f2:	b08d      	sub	sp, #52	@ 0x34
 80001f4:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    uint32_t rawBusVoltage;
    if (HAL_I2C_Mem_Read(&hi2c1, (INA219_I2C_ADDRESS << 1), INA219_BUS_VOLTAGE_REG, 1, buffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 80001f6:	f04f 33ff 	mov.w	r3, #4294967295
 80001fa:	9302      	str	r3, [sp, #8]
 80001fc:	2302      	movs	r3, #2
 80001fe:	9301      	str	r3, [sp, #4]
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2301      	movs	r3, #1
 8000208:	2202      	movs	r2, #2
 800020a:	2180      	movs	r1, #128	@ 0x80
 800020c:	4813      	ldr	r0, [pc, #76]	@ (800025c <readv+0x6c>)
 800020e:	f001 fb93 	bl	8001938 <HAL_I2C_Mem_Read>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d11a      	bne.n	800024e <readv+0x5e>
        rawBusVoltage = (buffer[0] << 8) | buffer[1];
 8000218:	7c3b      	ldrb	r3, [r7, #16]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	7c7a      	ldrb	r2, [r7, #17]
 800021e:	4313      	orrs	r3, r2
 8000220:	61bb      	str	r3, [r7, #24]
        rawBusVoltage = rawBusVoltage >> 3;
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	08db      	lsrs	r3, r3, #3
 8000226:	61bb      	str	r3, [r7, #24]

        uint32_t busVoltage_mV = rawBusVoltage * 4;
 8000228:	69bb      	ldr	r3, [r7, #24]
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	617b      	str	r3, [r7, #20]

        uint8_t ms[] = "\r\nBusVoltage: ";
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <readv+0x70>)
 8000230:	463c      	mov	r4, r7
 8000232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000234:	c407      	stmia	r4!, {r0, r1, r2}
 8000236:	8023      	strh	r3, [r4, #0]
 8000238:	3402      	adds	r4, #2
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, ms, sizeof(ms), 100);
 800023e:	4639      	mov	r1, r7
 8000240:	2364      	movs	r3, #100	@ 0x64
 8000242:	220f      	movs	r2, #15
 8000244:	4807      	ldr	r0, [pc, #28]	@ (8000264 <readv+0x74>)
 8000246:	f004 faa9 	bl	800479c <HAL_UART_Transmit>
        return busVoltage_mV;
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	e002      	b.n	8000254 <readv+0x64>
    }
    else {
        uint32_t a = 123456;
 800024e:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <readv+0x78>)
 8000250:	61fb      	str	r3, [r7, #28]
        return a;
 8000252:	69fb      	ldr	r3, [r7, #28]
    }
}
 8000254:	4618      	mov	r0, r3
 8000256:	3724      	adds	r7, #36	@ 0x24
 8000258:	46bd      	mov	sp, r7
 800025a:	bd90      	pop	{r4, r7, pc}
 800025c:	20000058 	.word	0x20000058
 8000260:	080053a4 	.word	0x080053a4
 8000264:	200000ac 	.word	0x200000ac
 8000268:	0001e240 	.word	0x0001e240

0800026c <readCurrent>:
    uint16_t calibration_value = 13421;
    uint8_t calib_data[2] = {calibration_value >> 8, calibration_value & 0xFF};
    HAL_I2C_Mem_Write(&hi2c1, (INA219_I2C_ADDRESS << 1), INA219_CALIBRATION_REG, 1, calib_data, 2, HAL_MAX_DELAY);
}

uint32_t readCurrent(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b08a      	sub	sp, #40	@ 0x28
 8000270:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    uint16_t rawCurrent;
    if (HAL_I2C_Mem_Read(&hi2c1, (INA219_I2C_ADDRESS << 1), INA219_CURRENT_REG, 1, buffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000272:	f04f 33ff 	mov.w	r3, #4294967295
 8000276:	9302      	str	r3, [sp, #8]
 8000278:	2302      	movs	r3, #2
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	f107 030c 	add.w	r3, r7, #12
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2301      	movs	r3, #1
 8000284:	2204      	movs	r2, #4
 8000286:	2180      	movs	r1, #128	@ 0x80
 8000288:	4811      	ldr	r0, [pc, #68]	@ (80002d0 <readCurrent+0x64>)
 800028a:	f001 fb55 	bl	8001938 <HAL_I2C_Mem_Read>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d116      	bne.n	80002c2 <readCurrent+0x56>
        rawCurrent = (buffer[0] << 8) | buffer[1];
 8000294:	7b3b      	ldrb	r3, [r7, #12]
 8000296:	021b      	lsls	r3, r3, #8
 8000298:	b21a      	sxth	r2, r3
 800029a:	7b7b      	ldrb	r3, [r7, #13]
 800029c:	b21b      	sxth	r3, r3
 800029e:	4313      	orrs	r3, r2
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	82fb      	strh	r3, [r7, #22]
        uint32_t current_mA = rawCurrent;
 80002a4:	8afb      	ldrh	r3, [r7, #22]
 80002a6:	613b      	str	r3, [r7, #16]
        uint8_t ms[] = "\r\nCurrent: ";
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <readCurrent+0x68>)
 80002aa:	463b      	mov	r3, r7
 80002ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HAL_UART_Transmit(&huart1, ms, sizeof(ms), 100);
 80002b2:	4639      	mov	r1, r7
 80002b4:	2364      	movs	r3, #100	@ 0x64
 80002b6:	220c      	movs	r2, #12
 80002b8:	4807      	ldr	r0, [pc, #28]	@ (80002d8 <readCurrent+0x6c>)
 80002ba:	f004 fa6f 	bl	800479c <HAL_UART_Transmit>
        return current_mA;
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	e001      	b.n	80002c6 <readCurrent+0x5a>
    } else {
        return 0xFFFFFFFF;
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000058 	.word	0x20000058
 80002d4:	080053b4 	.word	0x080053b4
 80002d8:	200000ac 	.word	0x200000ac

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 faf5 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f81a 	bl	800031e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f909 	bl	8000500 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ee:	f000 f871 	bl	80003d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80002f2:	f000 f8ad 	bl	8000450 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80002f6:	f000 f8d9 	bl	80004ac <MX_USART1_UART_Init>
//	    HAL_ADC_PollForConversion(&hadc1, 100);
//	    ADC_VAL = HAL_ADC_GetValue(&hadc1);
//	    HAL_ADC_Stop(&hadc1);
//	    ADC_VAL *= 0.12207;
//	    print(ADC_VAL);
	  uint32_t a = readv();
 80002fa:	f7ff ff79 	bl	80001f0 <readv>
 80002fe:	6078      	str	r0, [r7, #4]
	  print(a);
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f7ff ff23 	bl	800014c <print>
	  uint32_t current = readCurrent();
 8000306:	f7ff ffb1 	bl	800026c <readCurrent>
 800030a:	6038      	str	r0, [r7, #0]
	  print(current);
 800030c:	6838      	ldr	r0, [r7, #0]
 800030e:	f7ff ff1d 	bl	800014c <print>
	  HAL_Delay(400);
 8000312:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000316:	f000 fb3d 	bl	8000994 <HAL_Delay>
  {
 800031a:	bf00      	nop
 800031c:	e7ed      	b.n	80002fa <main+0x1e>

0800031e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b094      	sub	sp, #80	@ 0x50
 8000322:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000324:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000328:	2228      	movs	r2, #40	@ 0x28
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f004 fffb 	bl	8005328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000368:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800036e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000374:	4618      	mov	r0, r3
 8000376:	f003 fcfb 	bl	8003d70 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000380:	f000 f908 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000394:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	2102      	movs	r1, #2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 ff67 	bl	8004274 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ac:	f000 f8f2 	bl	8000594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b0:	2302      	movs	r3, #2
 80003b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003b8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f004 f8e7 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003c8:	f000 f8e4 	bl	8000594 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3750      	adds	r7, #80	@ 0x50
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e4:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <MX_ADC1_Init+0x74>)
 80003e6:	4a19      	ldr	r2, [pc, #100]	@ (800044c <MX_ADC1_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b17      	ldr	r3, [pc, #92]	@ (8000448 <MX_ADC1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003f0:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <MX_ADC1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f6:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <MX_ADC1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fc:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <MX_ADC1_Init+0x74>)
 80003fe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000402:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000404:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <MX_ADC1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <MX_ADC1_Init+0x74>)
 800040c:	2201      	movs	r2, #1
 800040e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000410:	480d      	ldr	r0, [pc, #52]	@ (8000448 <MX_ADC1_Init+0x74>)
 8000412:	f000 fae3 	bl	80009dc <HAL_ADC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 f8ba 	bl	8000594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000424:	2301      	movs	r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	@ (8000448 <MX_ADC1_Init+0x74>)
 8000432:	f000 fc7d 	bl	8000d30 <HAL_ADC_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800043c:	f000 f8aa 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000028 	.word	0x20000028
 800044c:	40012400 	.word	0x40012400

08000450 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000454:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <MX_I2C1_Init+0x50>)
 8000456:	4a13      	ldr	r2, [pc, #76]	@ (80004a4 <MX_I2C1_Init+0x54>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <MX_I2C1_Init+0x50>)
 800045c:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <MX_I2C1_Init+0x58>)
 800045e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <MX_I2C1_Init+0x50>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <MX_I2C1_Init+0x50>)
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <MX_I2C1_Init+0x50>)
 800046e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000472:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000474:	4b0a      	ldr	r3, [pc, #40]	@ (80004a0 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000480:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <MX_I2C1_Init+0x50>)
 800048e:	f001 f8fb 	bl	8001688 <HAL_I2C_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000498:	f000 f87c 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000058 	.word	0x20000058
 80004a4:	40005400 	.word	0x40005400
 80004a8:	000186a0 	.word	0x000186a0

080004ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	@ (80004fc <MX_USART1_UART_Init+0x50>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <MX_USART1_UART_Init+0x4c>)
 80004e4:	f004 f90a 	bl	80046fc <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ee:	f000 f851 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000ac 	.word	0x200000ac
 80004fc:	40013800 	.word	0x40013800

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_GPIO_Init+0x8c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <MX_GPIO_Init+0x8c>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_GPIO_Init+0x8c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b17      	ldr	r3, [pc, #92]	@ (800058c <MX_GPIO_Init+0x8c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a16      	ldr	r2, [pc, #88]	@ (800058c <MX_GPIO_Init+0x8c>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_GPIO_Init+0x8c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_GPIO_Init+0x8c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a10      	ldr	r2, [pc, #64]	@ (800058c <MX_GPIO_Init+0x8c>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_GPIO_Init+0x8c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDB_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2138      	movs	r1, #56	@ 0x38
 8000560:	480b      	ldr	r0, [pc, #44]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000562:	f001 f879 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDB_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDB_Pin;
 8000566:	2338      	movs	r3, #56	@ 0x38
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2302      	movs	r3, #2
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <MX_GPIO_Init+0x90>)
 800057e:	f000 fee7 	bl	8001350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	40010c00 	.word	0x40010c00

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <HAL_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <HAL_MspInit+0x5c>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_MspInit+0x60>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <HAL_MspInit+0x60>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d129      	bne.n	8000678 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000664:	f000 fe74 	bl	8001350 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2012      	movs	r0, #18
 800066e:	f000 fd78 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000672:	2012      	movs	r0, #18
 8000674:	f000 fd91 	bl	800119a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40012400 	.word	0x40012400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800

0800068c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <HAL_I2C_MspInit+0x90>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d133      	bne.n	8000714 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <HAL_I2C_MspInit+0x94>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <HAL_I2C_MspInit+0x94>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <HAL_I2C_MspInit+0x94>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c4:	23c0      	movs	r3, #192	@ 0xc0
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c8:	2312      	movs	r3, #18
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4813      	ldr	r0, [pc, #76]	@ (8000724 <HAL_I2C_MspInit+0x98>)
 80006d8:	f000 fe3a 	bl	8001350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <HAL_I2C_MspInit+0x94>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <HAL_I2C_MspInit+0x94>)
 80006e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e6:	61d3      	str	r3, [r2, #28]
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <HAL_I2C_MspInit+0x94>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	201f      	movs	r0, #31
 80006fa:	f000 fd32 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006fe:	201f      	movs	r0, #31
 8000700:	f000 fd4b 	bl	800119a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2020      	movs	r0, #32
 800070a:	f000 fd2a 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800070e:	2020      	movs	r0, #32
 8000710:	f000 fd43 	bl	800119a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40005400 	.word	0x40005400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010c00 	.word	0x40010c00

08000728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a20      	ldr	r2, [pc, #128]	@ (80007c4 <HAL_UART_MspInit+0x9c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d139      	bne.n	80007bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <HAL_UART_MspInit+0xa0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a1e      	ldr	r2, [pc, #120]	@ (80007c8 <HAL_UART_MspInit+0xa0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <HAL_UART_MspInit+0xa0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <HAL_UART_MspInit+0xa0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a18      	ldr	r2, [pc, #96]	@ (80007c8 <HAL_UART_MspInit+0xa0>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <HAL_UART_MspInit+0xa0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800077c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	@ (80007cc <HAL_UART_MspInit+0xa4>)
 800078e:	f000 fddf 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4809      	ldr	r0, [pc, #36]	@ (80007cc <HAL_UART_MspInit+0xa4>)
 80007a8:	f000 fdd2 	bl	8001350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2025      	movs	r0, #37	@ 0x25
 80007b2:	f000 fcd6 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007b6:	2025      	movs	r0, #37	@ 0x25
 80007b8:	f000 fcef 	bl	800119a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40013800 	.word	0x40013800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010800 	.word	0x40010800

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f89c 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800082c:	4802      	ldr	r0, [pc, #8]	@ (8000838 <ADC1_2_IRQHandler+0x10>)
 800082e:	f000 f9ad 	bl	8000b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000028 	.word	0x20000028

0800083c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000840:	4802      	ldr	r0, [pc, #8]	@ (800084c <I2C1_EV_IRQHandler+0x10>)
 8000842:	f001 faed 	bl	8001e20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000058 	.word	0x20000058

08000850 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000854:	4802      	ldr	r0, [pc, #8]	@ (8000860 <I2C1_ER_IRQHandler+0x10>)
 8000856:	f001 fc36 	bl	80020c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000058 	.word	0x20000058

08000864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <USART1_IRQHandler+0x10>)
 800086a:	f004 f823 	bl	80048b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000ac 	.word	0x200000ac

08000878 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000884:	f7ff fff8 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800088a:	490c      	ldr	r1, [pc, #48]	@ (80008bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008a0:	4c09      	ldr	r4, [pc, #36]	@ (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ae:	f004 fd43 	bl	8005338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd13 	bl	80002dc <main>
  bx lr
 80008b6:	4770      	bx	lr
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	080053f4 	.word	0x080053f4
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	200000f8 	.word	0x200000f8

080008cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <CAN1_RX1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 fc33 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fe58 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fc4b 	bl	80011b6 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 fc13 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	@ (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	200000f4 	.word	0x200000f4

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200000f4 	.word	0x200000f4

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff0 	bl	8000980 <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffe0 	bl	8000980 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0be      	b.n	8000b7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d109      	bne.n	8000a20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fdf2 	bl	8000604 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 fa7d 	bl	8000f20 <ADC_ConversionStop_Disable>
 8000a26:	4603      	mov	r3, r0
 8000a28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f040 8099 	bne.w	8000b6a <HAL_ADC_Init+0x18e>
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f040 8095 	bne.w	8000b6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a48:	f023 0302 	bic.w	r3, r3, #2
 8000a4c:	f043 0202 	orr.w	r2, r3, #2
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7b1b      	ldrb	r3, [r3, #12]
 8000a62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a74:	d003      	beq.n	8000a7e <HAL_ADC_Init+0xa2>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d102      	bne.n	8000a84 <HAL_ADC_Init+0xa8>
 8000a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a82:	e000      	b.n	8000a86 <HAL_ADC_Init+0xaa>
 8000a84:	2300      	movs	r3, #0
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7d1b      	ldrb	r3, [r3, #20]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d119      	bne.n	8000ac8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7b1b      	ldrb	r3, [r3, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	035a      	lsls	r2, r3, #13
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	e00b      	b.n	8000ac8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab4:	f043 0220 	orr.w	r2, r3, #32
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac0:	f043 0201 	orr.w	r2, r3, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <HAL_ADC_Init+0x1a8>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000af8:	d003      	beq.n	8000b02 <HAL_ADC_Init+0x126>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d104      	bne.n	8000b0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	051b      	lsls	r3, r3, #20
 8000b0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b12:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <HAL_ADC_Init+0x1ac>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d10b      	bne.n	8000b48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b3a:	f023 0303 	bic.w	r3, r3, #3
 8000b3e:	f043 0201 	orr.w	r2, r3, #1
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b46:	e018      	b.n	8000b7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4c:	f023 0312 	bic.w	r3, r3, #18
 8000b50:	f043 0210 	orr.w	r2, r3, #16
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5c:	f043 0201 	orr.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b68:	e007      	b.n	8000b7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b6e:	f043 0210 	orr.w	r2, r3, #16
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	ffe1f7fd 	.word	0xffe1f7fd
 8000b88:	ff1f0efe 	.word	0xff1f0efe

08000b8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d03e      	beq.n	8000c2c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d039      	beq.n	8000c2c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000bde:	d11d      	bne.n	8000c1c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d119      	bne.n	8000c1c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0220 	bic.w	r2, r2, #32
 8000bf6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 f874 	bl	8000d0a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f06f 0212 	mvn.w	r2, #18
 8000c2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d04d      	beq.n	8000cd2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d048      	beq.n	8000cd2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d105      	bne.n	8000c58 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c50:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000c62:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000c66:	d012      	beq.n	8000c8e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d125      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c80:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c84:	d11d      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d119      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c9c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d105      	bne.n	8000cc2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f96d 	bl	8000fa2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f06f 020c 	mvn.w	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d012      	beq.n	8000d02 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00d      	beq.n	8000d02 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f812 	bl	8000d1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f06f 0201 	mvn.w	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <HAL_ADC_ConfigChannel+0x20>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e0dc      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x1da>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b06      	cmp	r3, #6
 8000d5e:	d81c      	bhi.n	8000d9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	3b05      	subs	r3, #5
 8000d72:	221f      	movs	r2, #31
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4019      	ands	r1, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	3b05      	subs	r3, #5
 8000d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d98:	e03c      	b.n	8000e14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	d81c      	bhi.n	8000ddc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	3b23      	subs	r3, #35	@ 0x23
 8000db4:	221f      	movs	r2, #31
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b23      	subs	r3, #35	@ 0x23
 8000dce:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dda:	e01b      	b.n	8000e14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	3b41      	subs	r3, #65	@ 0x41
 8000dee:	221f      	movs	r2, #31
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	4019      	ands	r1, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	3b41      	subs	r3, #65	@ 0x41
 8000e08:	fa00 f203 	lsl.w	r2, r0, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	d91c      	bls.n	8000e56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68d9      	ldr	r1, [r3, #12]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b1e      	subs	r3, #30
 8000e2e:	2207      	movs	r2, #7
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4019      	ands	r1, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	6898      	ldr	r0, [r3, #8]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	3b1e      	subs	r3, #30
 8000e48:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	e019      	b.n	8000e8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6919      	ldr	r1, [r3, #16]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	2207      	movs	r2, #7
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4019      	ands	r1, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b10      	cmp	r3, #16
 8000e90:	d003      	beq.n	8000e9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e96:	2b11      	cmp	r3, #17
 8000e98:	d132      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d125      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d126      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ec0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d11a      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <HAL_ADC_ConfigChannel+0x1ec>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	0c9a      	lsrs	r2, r3, #18
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ee0:	e002      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f9      	bne.n	8000ee2 <HAL_ADC_ConfigChannel+0x1b2>
 8000eee:	e007      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef4:	f043 0220 	orr.w	r2, r3, #32
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40012400 	.word	0x40012400
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	431bde83 	.word	0x431bde83

08000f20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d12e      	bne.n	8000f98 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0201 	bic.w	r2, r2, #1
 8000f48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f4a:	f7ff fd19 	bl	8000980 <HAL_GetTick>
 8000f4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f50:	e01b      	b.n	8000f8a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f52:	f7ff fd15 	bl	8000980 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d914      	bls.n	8000f8a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10d      	bne.n	8000f8a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f72:	f043 0210 	orr.w	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e007      	b.n	8000f9a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d0dc      	beq.n	8000f52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4906      	ldr	r1, [pc, #24]	@ (800104c <__NVIC_EnableIRQ+0x34>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff90 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff2d 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff42 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff35 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d008      	beq.n	80011f8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2204      	movs	r2, #4
 80011ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e020      	b.n	800123a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 020e 	bic.w	r2, r2, #14
 8001206:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d005      	beq.n	8001268 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2204      	movs	r2, #4
 8001260:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e051      	b.n	800130c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020e 	bic.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <HAL_DMA_Abort_IT+0xd4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d029      	beq.n	80012e6 <HAL_DMA_Abort_IT+0xa2>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a21      	ldr	r2, [pc, #132]	@ (800131c <HAL_DMA_Abort_IT+0xd8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d022      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x9e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <HAL_DMA_Abort_IT+0xdc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01a      	beq.n	80012dc <HAL_DMA_Abort_IT+0x98>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <HAL_DMA_Abort_IT+0xe0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d012      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x92>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <HAL_DMA_Abort_IT+0xe4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00a      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x8c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_DMA_Abort_IT+0xe8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d102      	bne.n	80012ca <HAL_DMA_Abort_IT+0x86>
 80012c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012c8:	e00e      	b.n	80012e8 <HAL_DMA_Abort_IT+0xa4>
 80012ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012ce:	e00b      	b.n	80012e8 <HAL_DMA_Abort_IT+0xa4>
 80012d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d4:	e008      	b.n	80012e8 <HAL_DMA_Abort_IT+0xa4>
 80012d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012da:	e005      	b.n	80012e8 <HAL_DMA_Abort_IT+0xa4>
 80012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e0:	e002      	b.n	80012e8 <HAL_DMA_Abort_IT+0xa4>
 80012e2:	2310      	movs	r3, #16
 80012e4:	e000      	b.n	80012e8 <HAL_DMA_Abort_IT+0xa4>
 80012e6:	2301      	movs	r3, #1
 80012e8:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <HAL_DMA_Abort_IT+0xec>)
 80012ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
    } 
  }
  return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020008 	.word	0x40020008
 800131c:	4002001c 	.word	0x4002001c
 8001320:	40020030 	.word	0x40020030
 8001324:	40020044 	.word	0x40020044
 8001328:	40020058 	.word	0x40020058
 800132c:	4002006c 	.word	0x4002006c
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001342:	b2db      	uxtb	r3, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b08b      	sub	sp, #44	@ 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e169      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001364:	2201      	movs	r2, #1
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8158 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4a9a      	ldr	r2, [pc, #616]	@ (80015f0 <HAL_GPIO_Init+0x2a0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d05e      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 800138c:	4a98      	ldr	r2, [pc, #608]	@ (80015f0 <HAL_GPIO_Init+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d875      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 8001392:	4a98      	ldr	r2, [pc, #608]	@ (80015f4 <HAL_GPIO_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d058      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 8001398:	4a96      	ldr	r2, [pc, #600]	@ (80015f4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d86f      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 800139e:	4a96      	ldr	r2, [pc, #600]	@ (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d052      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013a4:	4a94      	ldr	r2, [pc, #592]	@ (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d869      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013aa:	4a94      	ldr	r2, [pc, #592]	@ (80015fc <HAL_GPIO_Init+0x2ac>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d04c      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013b0:	4a92      	ldr	r2, [pc, #584]	@ (80015fc <HAL_GPIO_Init+0x2ac>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d863      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013b6:	4a92      	ldr	r2, [pc, #584]	@ (8001600 <HAL_GPIO_Init+0x2b0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d046      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013bc:	4a90      	ldr	r2, [pc, #576]	@ (8001600 <HAL_GPIO_Init+0x2b0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d85d      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d82a      	bhi.n	800141c <HAL_GPIO_Init+0xcc>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d859      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013ca:	a201      	add	r2, pc, #4	@ (adr r2, 80013d0 <HAL_GPIO_Init+0x80>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	08001425 	.word	0x08001425
 80013d8:	08001437 	.word	0x08001437
 80013dc:	08001479 	.word	0x08001479
 80013e0:	0800147f 	.word	0x0800147f
 80013e4:	0800147f 	.word	0x0800147f
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	0800147f 	.word	0x0800147f
 80013f0:	0800147f 	.word	0x0800147f
 80013f4:	0800147f 	.word	0x0800147f
 80013f8:	0800147f 	.word	0x0800147f
 80013fc:	0800147f 	.word	0x0800147f
 8001400:	0800147f 	.word	0x0800147f
 8001404:	0800147f 	.word	0x0800147f
 8001408:	0800147f 	.word	0x0800147f
 800140c:	0800147f 	.word	0x0800147f
 8001410:	0800147f 	.word	0x0800147f
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001441 	.word	0x08001441
 800141c:	4a79      	ldr	r2, [pc, #484]	@ (8001604 <HAL_GPIO_Init+0x2b4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001422:	e02c      	b.n	800147e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e029      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	3304      	adds	r3, #4
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e024      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	3308      	adds	r3, #8
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e01f      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	330c      	adds	r3, #12
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e01a      	b.n	8001480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001452:	2304      	movs	r3, #4
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e013      	b.n	8001480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	611a      	str	r2, [r3, #16]
          break;
 800146a:	e009      	b.n	8001480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	615a      	str	r2, [r3, #20]
          break;
 8001476:	e003      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x130>
          break;
 800147e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	@ 0xff
 8001484:	d801      	bhi.n	800148a <HAL_GPIO_Init+0x13a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e001      	b.n	800148e <HAL_GPIO_Init+0x13e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	@ 0xff
 8001494:	d802      	bhi.n	800149c <HAL_GPIO_Init+0x14c>
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x152>
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	3b08      	subs	r3, #8
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	210f      	movs	r1, #15
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	6a39      	ldr	r1, [r7, #32]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80b1 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e8:	4a48      	ldr	r2, [pc, #288]	@ (800160c <HAL_GPIO_Init+0x2bc>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a40      	ldr	r2, [pc, #256]	@ (8001610 <HAL_GPIO_Init+0x2c0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1ec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3f      	ldr	r2, [pc, #252]	@ (8001614 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1e8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3e      	ldr	r2, [pc, #248]	@ (8001618 <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3d      	ldr	r2, [pc, #244]	@ (800161c <HAL_GPIO_Init+0x2cc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e0>
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001530:	2304      	movs	r3, #4
 8001532:	e004      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001534:	2302      	movs	r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 800153c:	2300      	movs	r3, #0
 800153e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154e:	492f      	ldr	r1, [pc, #188]	@ (800160c <HAL_GPIO_Init+0x2bc>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001568:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	492c      	ldr	r1, [pc, #176]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4928      	ldr	r1, [pc, #160]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4922      	ldr	r1, [pc, #136]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	491e      	ldr	r1, [pc, #120]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4918      	ldr	r1, [pc, #96]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4914      	ldr	r1, [pc, #80]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	490e      	ldr	r1, [pc, #56]	@ (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e021      	b.n	8001632 <HAL_GPIO_Init+0x2e2>
 80015ee:	bf00      	nop
 80015f0:	10320000 	.word	0x10320000
 80015f4:	10310000 	.word	0x10310000
 80015f8:	10220000 	.word	0x10220000
 80015fc:	10210000 	.word	0x10210000
 8001600:	10120000 	.word	0x10120000
 8001604:	10110000 	.word	0x10110000
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	40011400 	.word	0x40011400
 8001620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_GPIO_Init+0x304>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4909      	ldr	r1, [pc, #36]	@ (8001654 <HAL_GPIO_Init+0x304>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f ae8e 	bne.w	8001364 <HAL_GPIO_Init+0x14>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	372c      	adds	r7, #44	@ 0x2c
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	611a      	str	r2, [r3, #16]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e12b      	b.n	80018f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7fe ffec 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2224      	movs	r2, #36	@ 0x24
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ec:	f002 ff0a 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a81      	ldr	r2, [pc, #516]	@ (80018fc <HAL_I2C_Init+0x274>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d807      	bhi.n	800170c <HAL_I2C_Init+0x84>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a80      	ldr	r2, [pc, #512]	@ (8001900 <HAL_I2C_Init+0x278>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e006      	b.n	800171a <HAL_I2C_Init+0x92>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a7d      	ldr	r2, [pc, #500]	@ (8001904 <HAL_I2C_Init+0x27c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bf94      	ite	ls
 8001714:	2301      	movls	r3, #1
 8001716:	2300      	movhi	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0e7      	b.n	80018f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a78      	ldr	r2, [pc, #480]	@ (8001908 <HAL_I2C_Init+0x280>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a6a      	ldr	r2, [pc, #424]	@ (80018fc <HAL_I2C_Init+0x274>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d802      	bhi.n	800175c <HAL_I2C_Init+0xd4>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	e009      	b.n	8001770 <HAL_I2C_Init+0xe8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a69      	ldr	r2, [pc, #420]	@ (800190c <HAL_I2C_Init+0x284>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	3301      	adds	r3, #1
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001782:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	495c      	ldr	r1, [pc, #368]	@ (80018fc <HAL_I2C_Init+0x274>)
 800178c:	428b      	cmp	r3, r1
 800178e:	d819      	bhi.n	80017c4 <HAL_I2C_Init+0x13c>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e59      	subs	r1, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fbb1 f3f3 	udiv	r3, r1, r3
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017a4:	400b      	ands	r3, r1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_I2C_Init+0x138>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1e59      	subs	r1, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017be:	e051      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 80017c0:	2304      	movs	r3, #4
 80017c2:	e04f      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_I2C_Init+0x168>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	fbb0 f3f3 	udiv	r3, r0, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e012      	b.n	8001816 <HAL_I2C_Init+0x18e>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Init+0x196>
 800181a:	2301      	movs	r3, #1
 800181c:	e022      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <HAL_I2C_Init+0x1bc>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1e58      	subs	r0, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	440b      	add	r3, r1
 8001834:	fbb0 f3f3 	udiv	r3, r0, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001842:	e00f      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6809      	ldr	r1, [r1, #0]
 8001868:	4313      	orrs	r3, r2
 800186a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001892:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6911      	ldr	r1, [r2, #16]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68d2      	ldr	r2, [r2, #12]
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	000186a0 	.word	0x000186a0
 8001900:	001e847f 	.word	0x001e847f
 8001904:	003d08ff 	.word	0x003d08ff
 8001908:	431bde83 	.word	0x431bde83
 800190c:	10624dd3 	.word	0x10624dd3

08001910 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001922:	2b80      	cmp	r3, #128	@ 0x80
 8001924:	d103      	bne.n	800192e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	@ 0x30
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	460b      	mov	r3, r1
 800194c:	813b      	strh	r3, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001956:	f7ff f813 	bl	8000980 <HAL_GetTick>
 800195a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b20      	cmp	r3, #32
 8001966:	f040 8250 	bne.w	8001e0a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2319      	movs	r3, #25
 8001970:	2201      	movs	r2, #1
 8001972:	4982      	ldr	r1, [pc, #520]	@ (8001b7c <HAL_I2C_Mem_Read+0x244>)
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f001 ffc1 	bl	80038fc <I2C_WaitOnFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
 8001982:	e243      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_I2C_Mem_Read+0x5a>
 800198e:	2302      	movs	r3, #2
 8001990:	e23c      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d007      	beq.n	80019b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2222      	movs	r2, #34	@ 0x22
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a62      	ldr	r2, [pc, #392]	@ (8001b80 <HAL_I2C_Mem_Read+0x248>)
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019fa:	88f8      	ldrh	r0, [r7, #6]
 80019fc:	893a      	ldrh	r2, [r7, #8]
 80019fe:	8979      	ldrh	r1, [r7, #10]
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4603      	mov	r3, r0
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f001 fde6 	bl	80035dc <I2C_RequestMemoryRead>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1f8      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e1cc      	b.n	8001de4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11e      	bne.n	8001a90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a62:	b672      	cpsid	i
}
 8001a64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a8c:	b662      	cpsie	i
}
 8001a8e:	e035      	b.n	8001afc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d11e      	bne.n	8001ad6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001aa6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad2:	b662      	cpsie	i
}
 8001ad4:	e012      	b.n	8001afc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ae4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001afc:	e172      	b.n	8001de4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f200 811f 	bhi.w	8001d46 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d123      	bne.n	8001b58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f002 f885 	bl	8003c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e173      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b56:	e145      	b.n	8001de4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d152      	bne.n	8001c06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b66:	2200      	movs	r2, #0
 8001b68:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <HAL_I2C_Mem_Read+0x24c>)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 fec6 	bl	80038fc <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e148      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
 8001b7a:	bf00      	nop
 8001b7c:	00100002 	.word	0x00100002
 8001b80:	ffff0000 	.word	0xffff0000
 8001b84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bce:	b662      	cpsie	i
}
 8001bd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c04:	e0ee      	b.n	8001de4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4981      	ldr	r1, [pc, #516]	@ (8001e14 <HAL_I2C_Mem_Read+0x4dc>)
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f001 fe73 	bl	80038fc <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0f5      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c66:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_I2C_Mem_Read+0x4e0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8001e1c <HAL_I2C_Mem_Read+0x4e4>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0a1a      	lsrs	r2, r3, #8
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00da      	lsls	r2, r3, #3
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f043 0220 	orr.w	r2, r3, #32
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001cae:	b662      	cpsie	i
}
 8001cb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0a6      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d1d9      	bne.n	8001c80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d0e:	b662      	cpsie	i
}
 8001d10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d44:	e04e      	b.n	8001de4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f001 ff6a 	bl	8003c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e058      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d124      	bne.n	8001de4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d107      	bne.n	8001db2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f ae88 	bne.w	8001afe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3728      	adds	r7, #40	@ 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	00010004 	.word	0x00010004
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	14f8b589 	.word	0x14f8b589

08001e20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d003      	beq.n	8001e58 <HAL_I2C_EV_IRQHandler+0x38>
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b40      	cmp	r3, #64	@ 0x40
 8001e54:	f040 80b1 	bne.w	8001fba <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_I2C_EV_IRQHandler+0x6e>
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001e78:	d003      	beq.n	8001e82 <HAL_I2C_EV_IRQHandler+0x62>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_EV_IRQHandler+0x66>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_I2C_EV_IRQHandler+0x68>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f000 8114 	beq.w	80020b6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x90>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f001 ff49 	bl	8003d3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fd74 	bl	8002996 <I2C_Master_SB>
 8001eae:	e083      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0xac>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fdeb 	bl	8002aa0 <I2C_Master_ADD10>
 8001eca:	e075      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0xc8>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fe06 	bl	8002af2 <I2C_Master_ADDR>
 8001ee6:	e067      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f00:	f000 80db 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x10a>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0x10a>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f9d4 	bl	80022d0 <I2C_MasterTransmit_TXE>
 8001f28:	e046      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80c2 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80bc 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	2b21      	cmp	r3, #33	@ 0x21
 8001f46:	d103      	bne.n	8001f50 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa5d 	bl	8002408 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f4e:	e0b4      	b.n	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b40      	cmp	r3, #64	@ 0x40
 8001f54:	f040 80b1 	bne.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 facb 	bl	80024f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f5e:	e0ac      	b.n	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f6e:	f000 80a4 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <HAL_I2C_EV_IRQHandler+0x178>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_I2C_EV_IRQHandler+0x178>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fb47 	bl	8002624 <I2C_MasterReceive_RXNE>
 8001f96:	e00f      	b.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 808b 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8085 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fbff 	bl	80027b4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb6:	e080      	b.n	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
 8001fb8:	e07f      	b.n	80020ba <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e007      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00c      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002000:	69b9      	ldr	r1, [r7, #24]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 ffcc 	bl	8002fa0 <I2C_Slave_ADDR>
 8002008:	e05a      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_I2C_EV_IRQHandler+0x206>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f001 f806 	bl	8003030 <I2C_Slave_STOPF>
 8002024:	e04c      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	2b21      	cmp	r3, #33	@ 0x21
 800202a:	d002      	beq.n	8002032 <HAL_I2C_EV_IRQHandler+0x212>
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	2b29      	cmp	r3, #41	@ 0x29
 8002030:	d120      	bne.n	8002074 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x238>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x238>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fee9 	bl	8002e28 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002056:	e032      	b.n	80020be <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02d      	beq.n	80020be <HAL_I2C_EV_IRQHandler+0x29e>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002068:	2b00      	cmp	r3, #0
 800206a:	d028      	beq.n	80020be <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 ff18 	bl	8002ea2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002072:	e024      	b.n	80020be <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_I2C_EV_IRQHandler+0x27a>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_I2C_EV_IRQHandler+0x27a>
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ff25 	bl	8002ee2 <I2C_SlaveReceive_RXNE>
 8002098:	e012      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 ff55 	bl	8002f5e <I2C_SlaveReceive_BTF>
 80020b4:	e004      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80020b6:	bf00      	nop
 80020b8:	e002      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08a      	sub	sp, #40	@ 0x28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_I2C_ER_IRQHandler+0x5a>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800210e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <HAL_I2C_ER_IRQHandler+0x80>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002144:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03e      	beq.n	80021ce <HAL_I2C_ER_IRQHandler+0x108>
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d039      	beq.n	80021ce <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800215a:	7efb      	ldrb	r3, [r7, #27]
 800215c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002174:	7ebb      	ldrb	r3, [r7, #26]
 8002176:	2b20      	cmp	r3, #32
 8002178:	d112      	bne.n	80021a0 <HAL_I2C_ER_IRQHandler+0xda>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10f      	bne.n	80021a0 <HAL_I2C_ER_IRQHandler+0xda>
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	2b21      	cmp	r3, #33	@ 0x21
 8002184:	d008      	beq.n	8002198 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	2b29      	cmp	r3, #41	@ 0x29
 800218a:	d005      	beq.n	8002198 <HAL_I2C_ER_IRQHandler+0xd2>
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	2b28      	cmp	r3, #40	@ 0x28
 8002190:	d106      	bne.n	80021a0 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b21      	cmp	r3, #33	@ 0x21
 8002196:	d103      	bne.n	80021a0 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f001 f879 	bl	8003290 <I2C_Slave_AF>
 800219e:	e016      	b.n	80021ce <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021b2:	7efb      	ldrb	r3, [r7, #27]
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d002      	beq.n	80021be <HAL_I2C_ER_IRQHandler+0xf8>
 80021b8:	7efb      	ldrb	r3, [r7, #27]
 80021ba:	2b40      	cmp	r3, #64	@ 0x40
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_I2C_ER_IRQHandler+0x12e>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80021f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f8b6 	bl	8003378 <I2C_ITError>
  }
}
 800220c:	bf00      	nop
 800220e:	3728      	adds	r7, #40	@ 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
 8002268:	4613      	mov	r3, r2
 800226a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d150      	bne.n	8002398 <I2C_MasterTransmit_TXE+0xc8>
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b21      	cmp	r3, #33	@ 0x21
 80022fa:	d14d      	bne.n	8002398 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d01d      	beq.n	800233e <I2C_MasterTransmit_TXE+0x6e>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b20      	cmp	r3, #32
 8002306:	d01a      	beq.n	800233e <I2C_MasterTransmit_TXE+0x6e>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800230e:	d016      	beq.n	800233e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800231e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2211      	movs	r2, #17
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff6c 	bl	8002214 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800233c:	e060      	b.n	8002400 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800234c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b40      	cmp	r3, #64	@ 0x40
 8002376:	d107      	bne.n	8002388 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff81 	bl	8002288 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002386:	e03b      	b.n	8002400 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff3f 	bl	8002214 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002396:	e033      	b.n	8002400 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b21      	cmp	r3, #33	@ 0x21
 800239c:	d005      	beq.n	80023aa <I2C_MasterTransmit_TXE+0xda>
 800239e:	7bbb      	ldrb	r3, [r7, #14]
 80023a0:	2b40      	cmp	r3, #64	@ 0x40
 80023a2:	d12d      	bne.n	8002400 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b22      	cmp	r3, #34	@ 0x22
 80023a8:	d12a      	bne.n	8002400 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023c4:	e01c      	b.n	8002400 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b40      	cmp	r3, #64	@ 0x40
 80023d0:	d103      	bne.n	80023da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f88e 	bl	80024f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80023d8:	e012      	b.n	8002400 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023fe:	e7ff      	b.n	8002400 <I2C_MasterTransmit_TXE+0x130>
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b21      	cmp	r3, #33	@ 0x21
 8002420:	d164      	bne.n	80024ec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002450:	e04c      	b.n	80024ec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d01d      	beq.n	8002494 <I2C_MasterTransmit_BTF+0x8c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b20      	cmp	r3, #32
 800245c:	d01a      	beq.n	8002494 <I2C_MasterTransmit_BTF+0x8c>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002464:	d016      	beq.n	8002494 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002474:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2211      	movs	r2, #17
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fec1 	bl	8002214 <HAL_I2C_MasterTxCpltCallback>
}
 8002492:	e02b      	b.n	80024ec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b40      	cmp	r3, #64	@ 0x40
 80024cc:	d107      	bne.n	80024de <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fed6 	bl	8002288 <HAL_I2C_MemTxCpltCallback>
}
 80024dc:	e006      	b.n	80024ec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fe94 	bl	8002214 <HAL_I2C_MasterTxCpltCallback>
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002502:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002508:	2b00      	cmp	r3, #0
 800250a:	d11d      	bne.n	8002548 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10b      	bne.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800252a:	e077      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002530:	b29b      	uxth	r3, r3
 8002532:	121b      	asrs	r3, r3, #8
 8002534:	b2da      	uxtb	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002546:	e069      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254c:	2b01      	cmp	r3, #1
 800254e:	d10b      	bne.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002554:	b2da      	uxtb	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002566:	e059      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256c:	2b02      	cmp	r3, #2
 800256e:	d152      	bne.n	8002616 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b22      	cmp	r3, #34	@ 0x22
 8002574:	d10d      	bne.n	8002592 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002584:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002590:	e044      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b21      	cmp	r3, #33	@ 0x21
 80025a0:	d112      	bne.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025c6:	e029      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d124      	bne.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b21      	cmp	r3, #33	@ 0x21
 80025d6:	d121      	bne.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fe3a 	bl	8002288 <HAL_I2C_MemTxCpltCallback>
}
 8002614:	e002      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f97a 	bl	8001910 <I2C_Flush_DR>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b22      	cmp	r3, #34	@ 0x22
 8002636:	f040 80b9 	bne.w	80027ac <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d921      	bls.n	8002692 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b03      	cmp	r3, #3
 800267c:	f040 8096 	bne.w	80027ac <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002690:	e08c      	b.n	80027ac <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	2b02      	cmp	r3, #2
 8002698:	d07f      	beq.n	800279a <I2C_MasterReceive_RXNE+0x176>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d002      	beq.n	80026a6 <I2C_MasterReceive_RXNE+0x82>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d179      	bne.n	800279a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f001 fa8a 	bl	8003bc0 <I2C_WaitOnSTOPRequestThroughIT>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d14c      	bne.n	800274c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b40      	cmp	r3, #64	@ 0x40
 800270a:	d10a      	bne.n	8002722 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fdbd 	bl	800229a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002720:	e044      	b.n	80027ac <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d002      	beq.n	8002736 <I2C_MasterReceive_RXNE+0x112>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b20      	cmp	r3, #32
 8002734:	d103      	bne.n	800273e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
 800273c:	e002      	b.n	8002744 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2212      	movs	r2, #18
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fd6e 	bl	8002226 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800274a:	e02f      	b.n	80027ac <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800275a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fd8a 	bl	80022ac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002798:	e008      	b.n	80027ac <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a8:	605a      	str	r2, [r3, #4]
}
 80027aa:	e7ff      	b.n	80027ac <I2C_MasterReceive_RXNE+0x188>
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d11b      	bne.n	8002804 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027da:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002802:	e0c4      	b.n	800298e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b03      	cmp	r3, #3
 800280c:	d129      	bne.n	8002862 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800281c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00a      	beq.n	800283a <I2C_MasterReceive_BTF+0x86>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d007      	beq.n	800283a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002838:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002860:	e095      	b.n	800298e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d17d      	bne.n	8002968 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d002      	beq.n	8002878 <I2C_MasterReceive_BTF+0xc4>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d108      	bne.n	800288a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e016      	b.n	80028b8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d002      	beq.n	8002896 <I2C_MasterReceive_BTF+0xe2>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d108      	bne.n	80028a8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e007      	b.n	80028b8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002912:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d10a      	bne.n	800293e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fcaf 	bl	800229a <HAL_I2C_MemRxCpltCallback>
}
 800293c:	e027      	b.n	800298e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d002      	beq.n	8002952 <I2C_MasterReceive_BTF+0x19e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b20      	cmp	r3, #32
 8002950:	d103      	bne.n	800295a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
 8002958:	e002      	b.n	8002960 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2212      	movs	r2, #18
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fc60 	bl	8002226 <HAL_I2C_MasterRxCpltCallback>
}
 8002966:	e012      	b.n	800298e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b40      	cmp	r3, #64	@ 0x40
 80029a8:	d117      	bne.n	80029da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80029c4:	e067      	b.n	8002a96 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]
}
 80029d8:	e05d      	b.n	8002a96 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029e2:	d133      	bne.n	8002a4c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b21      	cmp	r3, #33	@ 0x21
 80029ee:	d109      	bne.n	8002a04 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	e008      	b.n	8002a16 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <I2C_Master_SB+0x92>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d032      	beq.n	8002a96 <I2C_Master_SB+0x100>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02d      	beq.n	8002a96 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a48:	605a      	str	r2, [r3, #4]
}
 8002a4a:	e024      	b.n	8002a96 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10e      	bne.n	8002a72 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	11db      	asrs	r3, r3, #7
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0306 	and.w	r3, r3, #6
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f063 030f 	orn	r3, r3, #15
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
}
 8002a70:	e011      	b.n	8002a96 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10d      	bne.n	8002a96 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	11db      	asrs	r3, r3, #7
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f003 0306 	and.w	r3, r3, #6
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f063 030e 	orn	r3, r3, #14
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	611a      	str	r2, [r3, #16]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <I2C_Master_ADD10+0x26>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d108      	bne.n	8002ad8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <I2C_Master_ADD10+0x48>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae6:	605a      	str	r2, [r3, #4]
  }
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b091      	sub	sp, #68	@ 0x44
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b22      	cmp	r3, #34	@ 0x22
 8002b1a:	f040 8174 	bne.w	8002e06 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <I2C_Master_ADDR+0x54>
 8002b26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d10b      	bne.n	8002b46 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	e16b      	b.n	8002e1e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <I2C_Master_ADDR+0x98>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b56:	d118      	bne.n	8002b8a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b7c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b88:	e149      	b.n	8002e1e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d113      	bne.n	8002bbc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b94:	2300      	movs	r3, #0
 8002b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e120      	b.n	8002dfe <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	f040 808a 	bne.w	8002cdc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bce:	d137      	bne.n	8002c40 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bde:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bee:	d113      	bne.n	8002c18 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	e0f2      	b.n	8002dfe <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e0de      	b.n	8002dfe <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d02e      	beq.n	8002ca4 <I2C_Master_ADDR+0x1b2>
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d02b      	beq.n	8002ca4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	2b12      	cmp	r3, #18
 8002c50:	d102      	bne.n	8002c58 <I2C_Master_ADDR+0x166>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d125      	bne.n	8002ca4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d00e      	beq.n	8002c7c <I2C_Master_ADDR+0x18a>
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d00b      	beq.n	8002c7c <I2C_Master_ADDR+0x18a>
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d008      	beq.n	8002c7c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e007      	b.n	8002c8c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c8a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	e0ac      	b.n	8002dfe <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e090      	b.n	8002dfe <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d158      	bne.n	8002d98 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d021      	beq.n	8002d30 <I2C_Master_ADDR+0x23e>
 8002cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d01e      	beq.n	8002d30 <I2C_Master_ADDR+0x23e>
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d01b      	beq.n	8002d30 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d06:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e012      	b.n	8002d56 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d3e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d64:	d14b      	bne.n	8002dfe <I2C_Master_ADDR+0x30c>
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d6c:	d00b      	beq.n	8002d86 <I2C_Master_ADDR+0x294>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d008      	beq.n	8002d86 <I2C_Master_ADDR+0x294>
 8002d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d005      	beq.n	8002d86 <I2C_Master_ADDR+0x294>
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d002      	beq.n	8002d86 <I2C_Master_ADDR+0x294>
 8002d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d13b      	bne.n	8002dfe <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	e032      	b.n	8002dfe <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002da6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002db6:	d117      	bne.n	8002de8 <I2C_Master_ADDR+0x2f6>
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dbe:	d00b      	beq.n	8002dd8 <I2C_Master_ADDR+0x2e6>
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d008      	beq.n	8002dd8 <I2C_Master_ADDR+0x2e6>
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d005      	beq.n	8002dd8 <I2C_Master_ADDR+0x2e6>
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d002      	beq.n	8002dd8 <I2C_Master_ADDR+0x2e6>
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d107      	bne.n	8002de8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002de6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002e04:	e00b      	b.n	8002e1e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
}
 8002e1c:	e7ff      	b.n	8002e1e <I2C_Master_ADDR+0x32c>
 8002e1e:	bf00      	nop
 8002e20:	3744      	adds	r7, #68	@ 0x44
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02b      	beq.n	8002e9a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d114      	bne.n	8002e9a <I2C_SlaveTransmit_TXE+0x72>
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b29      	cmp	r3, #41	@ 0x29
 8002e74:	d111      	bne.n	8002e9a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2221      	movs	r2, #33	@ 0x21
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2228      	movs	r2, #40	@ 0x28
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff f9cf 	bl	8002238 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d011      	beq.n	8002ed8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02c      	beq.n	8002f56 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d114      	bne.n	8002f56 <I2C_SlaveReceive_RXNE+0x74>
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f30:	d111      	bne.n	8002f56 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2222      	movs	r2, #34	@ 0x22
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2228      	movs	r2, #40	@ 0x28
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff f97a 	bl	800224a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fba:	2b28      	cmp	r3, #40	@ 0x28
 8002fbc:	d125      	bne.n	800300a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	81bb      	strh	r3, [r7, #12]
 8002fec:	e002      	b.n	8002ff4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ffc:	89ba      	ldrh	r2, [r7, #12]
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff f92a 	bl	800225c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003008:	e00e      	b.n	8003028 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800304e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800308c:	d172      	bne.n	8003174 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b22      	cmp	r3, #34	@ 0x22
 8003092:	d002      	beq.n	800309a <I2C_Slave_STOPF+0x6a>
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b2a      	cmp	r3, #42	@ 0x2a
 8003098:	d135      	bne.n	8003106 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f92e 	bl	8001334 <HAL_DMA_GetState>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d049      	beq.n	8003172 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <I2C_Slave_STOPF+0x258>)
 80030e4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f8aa 	bl	8001244 <HAL_DMA_Abort_IT>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03d      	beq.n	8003172 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003100:	4610      	mov	r0, r2
 8003102:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003104:	e035      	b.n	8003172 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b29a      	uxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003138:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe f8f8 	bl	8001334 <HAL_DMA_GetState>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d014      	beq.n	8003174 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	4a4e      	ldr	r2, [pc, #312]	@ (8003288 <I2C_Slave_STOPF+0x258>)
 8003150:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe f874 	bl	8001244 <HAL_DMA_Abort_IT>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800316c:	4610      	mov	r0, r2
 800316e:	4798      	blx	r3
 8003170:	e000      	b.n	8003174 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003172:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d03e      	beq.n	80031fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d112      	bne.n	80031b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d112      	bne.n	80031e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8b7 	bl	8003378 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800320a:	e039      	b.n	8003280 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003210:	d109      	bne.n	8003226 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2228      	movs	r2, #40	@ 0x28
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff f812 	bl	800224a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b28      	cmp	r3, #40	@ 0x28
 8003230:	d111      	bne.n	8003256 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a15      	ldr	r2, [pc, #84]	@ (800328c <I2C_Slave_STOPF+0x25c>)
 8003236:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff f811 	bl	8002276 <HAL_I2C_ListenCpltCallback>
}
 8003254:	e014      	b.n	8003280 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	2b22      	cmp	r3, #34	@ 0x22
 800325c:	d002      	beq.n	8003264 <I2C_Slave_STOPF+0x234>
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b22      	cmp	r3, #34	@ 0x22
 8003262:	d10d      	bne.n	8003280 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe ffe5 	bl	800224a <HAL_I2C_SlaveRxCpltCallback>
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	080037ad 	.word	0x080037ad
 800328c:	ffff0000 	.word	0xffff0000

08003290 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d002      	beq.n	80032b2 <I2C_Slave_AF+0x22>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d129      	bne.n	8003306 <I2C_Slave_AF+0x76>
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b28      	cmp	r3, #40	@ 0x28
 80032b6:	d126      	bne.n	8003306 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003374 <I2C_Slave_AF+0xe4>)
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe ffb9 	bl	8002276 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003304:	e031      	b.n	800336a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b21      	cmp	r3, #33	@ 0x21
 800330a:	d129      	bne.n	8003360 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <I2C_Slave_AF+0xe4>)
 8003310:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2221      	movs	r2, #33	@ 0x21
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003336:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003340:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003350:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fadc 	bl	8001910 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe ff6d 	bl	8002238 <HAL_I2C_SlaveTxCpltCallback>
}
 800335e:	e004      	b.n	800336a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	ffff0000 	.word	0xffff0000

08003378 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003386:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800338e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d002      	beq.n	800339c <I2C_ITError+0x24>
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	d10a      	bne.n	80033b2 <I2C_ITError+0x3a>
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b22      	cmp	r3, #34	@ 0x22
 80033a0:	d107      	bne.n	80033b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033b8:	2b28      	cmp	r3, #40	@ 0x28
 80033ba:	d107      	bne.n	80033cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2228      	movs	r2, #40	@ 0x28
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033ca:	e015      	b.n	80033f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033da:	d00a      	beq.n	80033f2 <I2C_ITError+0x7a>
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b60      	cmp	r3, #96	@ 0x60
 80033e0:	d007      	beq.n	80033f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003406:	d162      	bne.n	80034ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003416:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d020      	beq.n	8003468 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	4a6a      	ldr	r2, [pc, #424]	@ (80035d4 <I2C_ITError+0x25c>)
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd ff06 	bl	8001244 <HAL_DMA_Abort_IT>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8089 	beq.w	8003552 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003462:	4610      	mov	r0, r2
 8003464:	4798      	blx	r3
 8003466:	e074      	b.n	8003552 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	4a59      	ldr	r2, [pc, #356]	@ (80035d4 <I2C_ITError+0x25c>)
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fee5 	bl	8001244 <HAL_DMA_Abort_IT>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d068      	beq.n	8003552 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d10b      	bne.n	80034a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034c8:	4610      	mov	r0, r2
 80034ca:	4798      	blx	r3
 80034cc:	e041      	b.n	8003552 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b60      	cmp	r3, #96	@ 0x60
 80034d8:	d125      	bne.n	8003526 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f2:	2b40      	cmp	r3, #64	@ 0x40
 80034f4:	d10b      	bne.n	800350e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe fecd 	bl	80022be <HAL_I2C_AbortCpltCallback>
 8003524:	e015      	b.n	8003552 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003530:	2b40      	cmp	r3, #64	@ 0x40
 8003532:	d10b      	bne.n	800354c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fe fead 	bl	80022ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800358e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003596:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d113      	bne.n	80035cc <I2C_ITError+0x254>
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b28      	cmp	r3, #40	@ 0x28
 80035a8:	d110      	bne.n	80035cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <I2C_ITError+0x260>)
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fe55 	bl	8002276 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	080037ad 	.word	0x080037ad
 80035d8:	ffff0000 	.word	0xffff0000

080035dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	817b      	strh	r3, [r7, #10]
 80035ee:	460b      	mov	r3, r1
 80035f0:	813b      	strh	r3, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003604:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	2200      	movs	r2, #0
 800361e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f96a 	bl	80038fc <I2C_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800363c:	d103      	bne.n	8003646 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0aa      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003658:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	4952      	ldr	r1, [pc, #328]	@ (80037a8 <I2C_RequestMemoryRead+0x1cc>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f9c5 	bl	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e097      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa50 	bl	8003b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e076      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b8:	893b      	ldrh	r3, [r7, #8]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	611a      	str	r2, [r3, #16]
 80036c2:	e021      	b.n	8003708 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa2a 	bl	8003b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d107      	bne.n	80036fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e050      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036fe:	893b      	ldrh	r3, [r7, #8]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	6a39      	ldr	r1, [r7, #32]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fa0f 	bl	8003b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	2b04      	cmp	r3, #4
 800371e:	d107      	bne.n	8003730 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e035      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003742:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2200      	movs	r2, #0
 800374c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8d3 	bl	80038fc <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800376a:	d103      	bne.n	8003774 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e013      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	4906      	ldr	r1, [pc, #24]	@ (80037a8 <I2C_RequestMemoryRead+0x1cc>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f92e 	bl	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	00010002 	.word	0x00010002

080037ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037c6:	4b4b      	ldr	r3, [pc, #300]	@ (80038f4 <I2C_DMAAbort+0x148>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	4a4a      	ldr	r2, [pc, #296]	@ (80038f8 <I2C_DMAAbort+0x14c>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a1a      	lsrs	r2, r3, #8
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00da      	lsls	r2, r3, #3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80037f2:	e00a      	b.n	800380a <I2C_DMAAbort+0x5e>
    }
    count--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003808:	d0ea      	beq.n	80037e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	2200      	movs	r2, #0
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384c:	2200      	movs	r2, #0
 800384e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	2200      	movs	r2, #0
 800385e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b60      	cmp	r3, #96	@ 0x60
 800387a:	d10e      	bne.n	800389a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f7fe fd13 	bl	80022be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003898:	e027      	b.n	80038ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800389a:	7cfb      	ldrb	r3, [r7, #19]
 800389c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038a0:	2b28      	cmp	r3, #40	@ 0x28
 80038a2:	d117      	bne.n	80038d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2228      	movs	r2, #40	@ 0x28
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80038d2:	e007      	b.n	80038e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80038e4:	6978      	ldr	r0, [r7, #20]
 80038e6:	f7fe fce1 	bl	80022ac <HAL_I2C_ErrorCallback>
}
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000
 80038f8:	14f8b589 	.word	0x14f8b589

080038fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800390c:	e048      	b.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d044      	beq.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd f833 	bl	8000980 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d139      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10d      	bne.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	e00c      	b.n	800396c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	429a      	cmp	r2, r3
 8003970:	d116      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e023      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10d      	bne.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	e00c      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d093      	beq.n	800390e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fe:	e071      	b.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0e:	d123      	bne.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f043 0204 	orr.w	r2, r3, #4
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e067      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d041      	beq.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a60:	f7fc ff8e 	bl	8000980 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d302      	bcc.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d136      	bne.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10c      	bne.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	e00b      	b.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e021      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10c      	bne.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	43da      	mvns	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4013      	ands	r3, r2
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e00b      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f af6d 	bne.w	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3c:	e034      	b.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f8cd 	bl	8003cde <I2C_IsAcknowledgeFailed>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e034      	b.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d028      	beq.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fc ff13 	bl	8000980 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11d      	bne.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b76:	2b80      	cmp	r3, #128	@ 0x80
 8003b78:	d016      	beq.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e007      	b.n	8003bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb2:	2b80      	cmp	r3, #128	@ 0x80
 8003bb4:	d1c3      	bne.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	4a13      	ldr	r2, [pc, #76]	@ (8003c20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	0a1a      	lsrs	r2, r3, #8
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e008      	b.n	8003c10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0c:	d0e9      	beq.n	8003be2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	14f8b589 	.word	0x14f8b589

08003c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c30:	e049      	b.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d119      	bne.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0210 	mvn.w	r2, #16
 8003c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e030      	b.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7fc fe84 	bl	8000980 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11d      	bne.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	d016      	beq.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e007      	b.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d1ae      	bne.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf4:	d11b      	bne.n	8003d2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cfe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f043 0204 	orr.w	r2, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003d4a:	d103      	bne.n	8003d54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d52:	e007      	b.n	8003d64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d5c:	d102      	bne.n	8003d64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2208      	movs	r2, #8
 8003d62:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e272      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d90:	4b92      	ldr	r3, [pc, #584]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d00c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d112      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
 8003da8:	4b8c      	ldr	r3, [pc, #560]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db4:	d10b      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	4b89      	ldr	r3, [pc, #548]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x12c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d168      	bne.n	8003e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e24c      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x76>
 8003dd8:	4b80      	ldr	r3, [pc, #512]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7f      	ldr	r2, [pc, #508]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e02e      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x98>
 8003dee:	4b7b      	ldr	r3, [pc, #492]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7a      	ldr	r2, [pc, #488]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b78      	ldr	r3, [pc, #480]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a77      	ldr	r2, [pc, #476]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xbc>
 8003e12:	4b72      	ldr	r3, [pc, #456]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a71      	ldr	r2, [pc, #452]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6a      	ldr	r2, [pc, #424]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a67      	ldr	r2, [pc, #412]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fc fd98 	bl	8000980 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fc fd94 	bl	8000980 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	@ 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e200      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b5d      	ldr	r3, [pc, #372]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe4>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fc fd84 	bl	8000980 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fc fd80 	bl	8000980 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1ec      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b53      	ldr	r3, [pc, #332]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x10c>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d063      	beq.n	8003f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eb6:	4b49      	ldr	r3, [pc, #292]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x18c>
 8003ec2:	4b46      	ldr	r3, [pc, #280]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x176>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1c0      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4939      	ldr	r1, [pc, #228]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e03a      	b.n	8003f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <HAL_RCC_OscConfig+0x270>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fc fd39 	bl	8000980 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f12:	f7fc fd35 	bl	8000980 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1a1      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	4b2d      	ldr	r3, [pc, #180]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b2a      	ldr	r3, [pc, #168]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4927      	ldr	r1, [pc, #156]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	e015      	b.n	8003f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <HAL_RCC_OscConfig+0x270>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fc fd18 	bl	8000980 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fc fd14 	bl	8000980 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e180      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f66:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d03a      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f86:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8c:	f7fc fcf8 	bl	8000980 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fc fcf4 	bl	8000980 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e160      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f000 face 	bl	8004554 <RCC_Delay>
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc0:	f7fc fcde 	bl	8000980 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fc fcda 	bl	8000980 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e146      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	42420000 	.word	0x42420000
 8003fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b92      	ldr	r3, [pc, #584]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e9      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a6 	beq.w	800414e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b8b      	ldr	r3, [pc, #556]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	4b88      	ldr	r3, [pc, #544]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a87      	ldr	r2, [pc, #540]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401c:	61d3      	str	r3, [r2, #28]
 800401e:	4b85      	ldr	r3, [pc, #532]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b82      	ldr	r3, [pc, #520]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d118      	bne.n	800406c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b7f      	ldr	r3, [pc, #508]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a7e      	ldr	r2, [pc, #504]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7fc fc9b 	bl	8000980 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404e:	f7fc fc97 	bl	8000980 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	@ 0x64
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e103      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b75      	ldr	r3, [pc, #468]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x312>
 8004074:	4b6f      	ldr	r3, [pc, #444]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a6e      	ldr	r2, [pc, #440]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	e02d      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x334>
 800408a:	4b6a      	ldr	r3, [pc, #424]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a69      	ldr	r2, [pc, #420]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	4b67      	ldr	r3, [pc, #412]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4a66      	ldr	r2, [pc, #408]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	e01c      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x356>
 80040ac:	4b61      	ldr	r3, [pc, #388]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a60      	ldr	r2, [pc, #384]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6213      	str	r3, [r2, #32]
 80040c4:	e00b      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 80040c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a5a      	ldr	r2, [pc, #360]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6213      	str	r3, [r2, #32]
 80040d2:	4b58      	ldr	r3, [pc, #352]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a57      	ldr	r2, [pc, #348]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d015      	beq.n	8004112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fc fc4b 	bl	8000980 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fc fc47 	bl	8000980 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0b1      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	4b4b      	ldr	r3, [pc, #300]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ee      	beq.n	80040ee <HAL_RCC_OscConfig+0x37e>
 8004110:	e014      	b.n	800413c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004112:	f7fc fc35 	bl	8000980 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fc fc31 	bl	8000980 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e09b      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	4b40      	ldr	r3, [pc, #256]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ee      	bne.n	800411a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a3b      	ldr	r2, [pc, #236]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8087 	beq.w	8004266 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004158:	4b36      	ldr	r3, [pc, #216]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d061      	beq.n	8004228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d146      	bne.n	80041fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b33      	ldr	r3, [pc, #204]	@ (800423c <HAL_RCC_OscConfig+0x4cc>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fc fc05 	bl	8000980 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7fc fc01 	bl	8000980 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e06d      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d108      	bne.n	80041b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	4921      	ldr	r1, [pc, #132]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a19      	ldr	r1, [r3, #32]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	430b      	orrs	r3, r1
 80041c6:	491b      	ldr	r1, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041cc:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fc fbd5 	bl	8000980 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041da:	f7fc fbd1 	bl	8000980 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e03d      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ec:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x46a>
 80041f8:	e035      	b.n	8004266 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fc fbbe 	bl	8000980 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fc fbba 	bl	8000980 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e026      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x498>
 8004226:	e01e      	b.n	8004266 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e019      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
 800423c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_OscConfig+0x500>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	429a      	cmp	r2, r3
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000

08004274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0d0      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d910      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b67      	ldr	r3, [pc, #412]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	4965      	ldr	r1, [pc, #404]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b63      	ldr	r3, [pc, #396]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b8      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d0:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a58      	ldr	r2, [pc, #352]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e8:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b50      	ldr	r3, [pc, #320]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	494d      	ldr	r1, [pc, #308]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d040      	beq.n	8004394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b47      	ldr	r3, [pc, #284]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d115      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07f      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004332:	4b41      	ldr	r3, [pc, #260]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e073      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06b      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004352:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4936      	ldr	r1, [pc, #216]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004364:	f7fc fb0c 	bl	8000980 <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	e00a      	b.n	8004382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fc fb08 	bl	8000980 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e053      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 020c 	and.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	429a      	cmp	r2, r3
 8004392:	d1eb      	bne.n	800436c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d210      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 0207 	bic.w	r2, r3, #7
 80043aa:	4922      	ldr	r1, [pc, #136]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4916      	ldr	r1, [pc, #88]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ee:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	490e      	ldr	r1, [pc, #56]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004402:	f000 f821 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004406:	4602      	mov	r2, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	490a      	ldr	r1, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004414:	5ccb      	ldrb	r3, [r1, r3]
 8004416:	fa22 f303 	lsr.w	r3, r2, r3
 800441a:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <HAL_RCC_ClockConfig+0x1cc>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_ClockConfig+0x1d0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fa6a 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40022000 	.word	0x40022000
 8004438:	40021000 	.word	0x40021000
 800443c:	080053c0 	.word	0x080053c0
 8004440:	20000000 	.word	0x20000000
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b04      	cmp	r3, #4
 8004470:	d002      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x30>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x36>
 8004476:	e027      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004478:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800447a:	613b      	str	r3, [r7, #16]
      break;
 800447c:	e027      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	0c9b      	lsrs	r3, r3, #18
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004496:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	0c5b      	lsrs	r3, r3, #17
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	4a11      	ldr	r2, [pc, #68]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a0d      	ldr	r2, [pc, #52]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80044aa:	fb03 f202 	mul.w	r2, r3, r2
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e004      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80044bc:	fb02 f303 	mul.w	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	613b      	str	r3, [r7, #16]
      break;
 80044c6:	e002      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80044ca:	613b      	str	r3, [r7, #16]
      break;
 80044cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ce:	693b      	ldr	r3, [r7, #16]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	007a1200 	.word	0x007a1200
 80044e4:	080053d8 	.word	0x080053d8
 80044e8:	080053e8 	.word	0x080053e8
 80044ec:	003d0900 	.word	0x003d0900

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b02      	ldr	r3, [pc, #8]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x10>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	20000000 	.word	0x20000000

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004508:	f7ff fff2 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	080053d0 	.word	0x080053d0

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004530:	f7ff ffde 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	@ (800454c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	0adb      	lsrs	r3, r3, #11
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	@ (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	080053d0 	.word	0x080053d0

08004554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <RCC_Delay+0x34>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	@ (800458c <RCC_Delay+0x38>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0a5b      	lsrs	r3, r3, #9
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004570:	bf00      	nop
  }
  while (Delay --);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	60fa      	str	r2, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f9      	bne.n	8004570 <RCC_Delay+0x1c>
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	20000000 	.word	0x20000000
 800458c:	10624dd3 	.word	0x10624dd3

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d07d      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045ac:	2300      	movs	r3, #0
 80045ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b0:	4b4f      	ldr	r3, [pc, #316]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b4c      	ldr	r3, [pc, #304]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4a4b      	ldr	r2, [pc, #300]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	61d3      	str	r3, [r2, #28]
 80045c8:	4b49      	ldr	r3, [pc, #292]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	4b46      	ldr	r3, [pc, #280]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d118      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e4:	4b43      	ldr	r3, [pc, #268]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a42      	ldr	r2, [pc, #264]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f0:	f7fc f9c6 	bl	8000980 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fc f9c2 	bl	8000980 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	@ 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e06d      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b3a      	ldr	r3, [pc, #232]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004616:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d027      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004634:	4b2e      	ldr	r3, [pc, #184]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800463c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800463e:	4b2e      	ldr	r3, [pc, #184]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004644:	4b2c      	ldr	r3, [pc, #176]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800464a:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fc f991 	bl	8000980 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fc f98d 	bl	8000980 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e036      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004684:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4917      	ldr	r1, [pc, #92]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	4313      	orrs	r3, r2
 8004694:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	490b      	ldr	r1, [pc, #44]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d2:	4b07      	ldr	r3, [pc, #28]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4904      	ldr	r1, [pc, #16]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42420440 	.word	0x42420440

080046fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e042      	b.n	8004794 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc f800 	bl	8000728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	@ 0x24
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800473e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fd63 	bl	800520c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695a      	ldr	r2, [r3, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	@ 0x28
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d175      	bne.n	80048a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Transmit+0x2c>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e06e      	b.n	80048aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2221      	movs	r2, #33	@ 0x21
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047da:	f7fc f8d1 	bl	8000980 <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f4:	d108      	bne.n	8004808 <HAL_UART_Transmit+0x6c>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e003      	b.n	8004810 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004810:	e02e      	b.n	8004870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2180      	movs	r1, #128	@ 0x80
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fb01 	bl	8004e24 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e03a      	b.n	80048aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	3302      	adds	r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e007      	b.n	8004862 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3301      	adds	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1cb      	bne.n	8004812 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	2140      	movs	r1, #64	@ 0x40
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 facd 	bl	8004e24 <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b0ba      	sub	sp, #232	@ 0xe8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80048f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_UART_IRQHandler+0x66>
 8004906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fbbc 	bl	8005090 <UART_Receive_IT>
      return;
 8004918:	e25b      	b.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800491a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80de 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x22c>
 8004924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004934:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80d1 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_UART_IRQHandler+0xae>
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_UART_IRQHandler+0xd2>
 800496e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f043 0202 	orr.w	r2, r3, #2
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_UART_IRQHandler+0xf6>
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d011      	beq.n	80049da <HAL_UART_IRQHandler+0x126>
 80049b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f043 0208 	orr.w	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 81f2 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_UART_IRQHandler+0x14e>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb47 	bl	8005090 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <HAL_UART_IRQHandler+0x17a>
 8004a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04f      	beq.n	8004ace <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa51 	bl	8004ed6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d041      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1d9      	bne.n	8004a42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c94 <HAL_UART_IRQHandler+0x3e0>)
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc fbce 	bl	8001244 <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e00e      	b.n	8004adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f99c 	bl	8004dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e00a      	b.n	8004adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f998 	bl	8004dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e006      	b.n	8004adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f994 	bl	8004dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ada:	e175      	b.n	8004dc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	bf00      	nop
    return;
 8004ade:	e173      	b.n	8004dc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 814f 	bne.w	8004d88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8148 	beq.w	8004d88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8141 	beq.w	8004d88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80b6 	beq.w	8004c98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8145 	beq.w	8004dcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	f080 813e 	bcs.w	8004dcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	f000 8088 	beq.w	8004c74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1d9      	bne.n	8004b64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3314      	adds	r3, #20
 8004bd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bd4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e1      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3314      	adds	r3, #20
 8004c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e3      	bne.n	8004c32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc faad 	bl	80011ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8bf 	bl	8004e0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c90:	e09c      	b.n	8004dcc <HAL_UART_IRQHandler+0x518>
 8004c92:	bf00      	nop
 8004c94:	08004f9b 	.word	0x08004f9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 808e 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8089 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ce2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ce4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e3      	bne.n	8004cbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	623b      	str	r3, [r7, #32]
   return(result);
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e3      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d60:	61fa      	str	r2, [r7, #28]
 8004d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e3      	bne.n	8004d3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f844 	bl	8004e0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d86:	e023      	b.n	8004dd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <HAL_UART_IRQHandler+0x4f4>
 8004d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f90e 	bl	8004fc2 <UART_Transmit_IT>
    return;
 8004da6:	e014      	b.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00e      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f94d 	bl	8005060 <UART_EndTransmit_IT>
    return;
 8004dc6:	e004      	b.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004dc8:	bf00      	nop
 8004dca:	e002      	b.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004dcc:	bf00      	nop
 8004dce:	e000      	b.n	8004dd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004dd0:	bf00      	nop
  }
}
 8004dd2:	37e8      	adds	r7, #232	@ 0xe8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e34:	e03b      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d037      	beq.n	8004eae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3e:	f7fb fd9f 	bl	8000980 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	6a3a      	ldr	r2, [r7, #32]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d302      	bcc.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e03a      	b.n	8004ece <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d023      	beq.n	8004eae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b80      	cmp	r3, #128	@ 0x80
 8004e6a:	d020      	beq.n	8004eae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b40      	cmp	r3, #64	@ 0x40
 8004e70:	d01d      	beq.n	8004eae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d116      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f81d 	bl	8004ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00f      	b.n	8004ece <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d0b4      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b095      	sub	sp, #84	@ 0x54
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004efe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3314      	adds	r3, #20
 8004f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d119      	bne.n	8004f82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0310 	bic.w	r3, r3, #16
 8004f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f6e:	61ba      	str	r2, [r7, #24]
 8004f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6979      	ldr	r1, [r7, #20]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e5      	bne.n	8004f4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f90:	bf00      	nop
 8004f92:	3754      	adds	r7, #84	@ 0x54
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff ff21 	bl	8004dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b21      	cmp	r3, #33	@ 0x21
 8004fd4:	d13e      	bne.n	8005054 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fde:	d114      	bne.n	800500a <UART_Transmit_IT+0x48>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d110      	bne.n	800500a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ffc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]
 8005008:	e008      	b.n	800501c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	1c59      	adds	r1, r3, #1
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6211      	str	r1, [r2, #32]
 8005014:	781a      	ldrb	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29b      	uxth	r3, r3
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4619      	mov	r1, r3
 800502a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10f      	bne.n	8005050 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800503e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800504e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e000      	b.n	8005056 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005054:	2302      	movs	r3, #2
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005076:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fea9 	bl	8004dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	@ 0x30
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b22      	cmp	r3, #34	@ 0x22
 80050a2:	f040 80ae 	bne.w	8005202 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ae:	d117      	bne.n	80050e0 <UART_Receive_IT+0x50>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d113      	bne.n	80050e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	1c9a      	adds	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80050de:	e026      	b.n	800512e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	d007      	beq.n	8005104 <UART_Receive_IT+0x74>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <UART_Receive_IT+0x82>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e008      	b.n	8005124 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800513e:	2b00      	cmp	r3, #0
 8005140:	d15d      	bne.n	80051fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0220 	bic.w	r2, r2, #32
 8005150:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	2b01      	cmp	r3, #1
 8005186:	d135      	bne.n	80051f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f023 0310 	bic.w	r3, r3, #16
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ae:	623a      	str	r2, [r7, #32]
 80051b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	69f9      	ldr	r1, [r7, #28]
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e5      	bne.n	800518e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d10a      	bne.n	80051e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fe0e 	bl	8004e0e <HAL_UARTEx_RxEventCallback>
 80051f2:	e002      	b.n	80051fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fdf8 	bl	8004dea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e002      	b.n	8005204 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3730      	adds	r7, #48	@ 0x30
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005246:	f023 030c 	bic.w	r3, r3, #12
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	430b      	orrs	r3, r1
 8005252:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <UART_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7ff f95a 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	e002      	b.n	8005282 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7ff f942 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8005280:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <UART_SetConfig+0x118>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	0119      	lsls	r1, r3, #4
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005324 <UART_SetConfig+0x118>)
 80052ba:	fba3 0302 	umull	r0, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2064      	movs	r0, #100	@ 0x64
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	3332      	adds	r3, #50	@ 0x32
 80052cc:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <UART_SetConfig+0x118>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d8:	4419      	add	r1, r3
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <UART_SetConfig+0x118>)
 80052f2:	fba3 0302 	umull	r0, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2064      	movs	r0, #100	@ 0x64
 80052fa:	fb00 f303 	mul.w	r3, r0, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	3332      	adds	r3, #50	@ 0x32
 8005304:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <UART_SetConfig+0x118>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	440a      	add	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40013800 	.word	0x40013800
 8005324:	51eb851f 	.word	0x51eb851f

08005328 <memset>:
 8005328:	4603      	mov	r3, r0
 800532a:	4402      	add	r2, r0
 800532c:	4293      	cmp	r3, r2
 800532e:	d100      	bne.n	8005332 <memset+0xa>
 8005330:	4770      	bx	lr
 8005332:	f803 1b01 	strb.w	r1, [r3], #1
 8005336:	e7f9      	b.n	800532c <memset+0x4>

08005338 <__libc_init_array>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	2600      	movs	r6, #0
 800533c:	4d0c      	ldr	r5, [pc, #48]	@ (8005370 <__libc_init_array+0x38>)
 800533e:	4c0d      	ldr	r4, [pc, #52]	@ (8005374 <__libc_init_array+0x3c>)
 8005340:	1b64      	subs	r4, r4, r5
 8005342:	10a4      	asrs	r4, r4, #2
 8005344:	42a6      	cmp	r6, r4
 8005346:	d109      	bne.n	800535c <__libc_init_array+0x24>
 8005348:	f000 f81a 	bl	8005380 <_init>
 800534c:	2600      	movs	r6, #0
 800534e:	4d0a      	ldr	r5, [pc, #40]	@ (8005378 <__libc_init_array+0x40>)
 8005350:	4c0a      	ldr	r4, [pc, #40]	@ (800537c <__libc_init_array+0x44>)
 8005352:	1b64      	subs	r4, r4, r5
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	42a6      	cmp	r6, r4
 8005358:	d105      	bne.n	8005366 <__libc_init_array+0x2e>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005360:	4798      	blx	r3
 8005362:	3601      	adds	r6, #1
 8005364:	e7ee      	b.n	8005344 <__libc_init_array+0xc>
 8005366:	f855 3b04 	ldr.w	r3, [r5], #4
 800536a:	4798      	blx	r3
 800536c:	3601      	adds	r6, #1
 800536e:	e7f2      	b.n	8005356 <__libc_init_array+0x1e>
 8005370:	080053ec 	.word	0x080053ec
 8005374:	080053ec 	.word	0x080053ec
 8005378:	080053ec 	.word	0x080053ec
 800537c:	080053f0 	.word	0x080053f0

08005380 <_init>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr

0800538c <_fini>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr
