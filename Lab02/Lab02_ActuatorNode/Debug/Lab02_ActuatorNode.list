
Lab02_ActuatorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003458  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003564  08003564  00004564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080035d8  080035d8  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035d8  080035d8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d8  080035d8  000045d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035dc  080035dc  000045dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080035e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000068  08003648  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003648  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac79  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6c  00000000  00000000  0000fd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00011878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000851  00000000  00000000  00012328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186e0  00000000  00000000  00012b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc17  00000000  00000000  0002b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b19c  00000000  00000000  00038e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c400c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  000c4050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000c75ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800354c 	.word	0x0800354c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800354c 	.word	0x0800354c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08e      	sub	sp, #56	@ 0x38
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fb53 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f81f 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f90f 	bl	80006f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d6:	f000 f877 	bl	80005c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004da:	f000 f8b3 	bl	8000644 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f8df 	bl	80006a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer_temperature [50];
  float temperature = 0;
 80004e2:	f04f 0300 	mov.w	r3, #0
 80004e6:	637b      	str	r3, [r7, #52]	@ 0x34


  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(buffer_temperature, "Temperature: %d", temperature);
 80004e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80004ea:	f7ff ff93 	bl	8000414 <__aeabi_f2d>
 80004ee:	4602      	mov	r2, r0
 80004f0:	460b      	mov	r3, r1
 80004f2:	4638      	mov	r0, r7
 80004f4:	4904      	ldr	r1, [pc, #16]	@ (8000508 <main+0x44>)
 80004f6:	f001 ffed 	bl	80024d4 <siprintf>
	  printf("%s", buffer_temperature);
 80004fa:	463b      	mov	r3, r7
 80004fc:	4619      	mov	r1, r3
 80004fe:	4803      	ldr	r0, [pc, #12]	@ (800050c <main+0x48>)
 8000500:	f001 ffd6 	bl	80024b0 <iprintf>
	  sprintf(buffer_temperature, "Temperature: %d", temperature);
 8000504:	bf00      	nop
 8000506:	e7ef      	b.n	80004e8 <main+0x24>
 8000508:	08003564 	.word	0x08003564
 800050c:	08003574 	.word	0x08003574

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800051a:	2228      	movs	r2, #40	@ 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f83b 	bl	800259a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2301      	movs	r3, #1
 8000542:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054e:	2301      	movs	r3, #1
 8000550:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f93c 	bl	80017e4 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000572:	f000 f909 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000586:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fba8 	bl	8001ce8 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800059e:	f000 f8f3 	bl	8000788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005a2:	2302      	movs	r3, #2
 80005a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fd28 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ba:	f000 f8e5 	bl	8000788 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_ADC1_Init+0x74>)
 80005da:	4a19      	ldr	r2, [pc, #100]	@ (8000640 <MX_ADC1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_ADC1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_ADC1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_ADC1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_ADC1_Init+0x74>)
 80005f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_ADC1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_ADC1_Init+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <MX_ADC1_Init+0x74>)
 8000606:	f000 fb17 	bl	8000c38 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f8ba 	bl	8000788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000614:	2310      	movs	r3, #16
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_ADC1_Init+0x74>)
 8000626:	f000 fbdf 	bl	8000de8 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000630:	f000 f8aa 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000084 	.word	0x20000084
 8000640:	40012400 	.word	0x40012400

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f000 ff6b 	bl	800155c <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f87c 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000b4 	.word	0x200000b4
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f001 fd4a 	bl	8002170 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f851 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000108 	.word	0x20000108
 80006f0:	40013800 	.word	0x40013800

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000708:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800070e:	f043 0320 	orr.w	r3, r3, #32
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <MX_GPIO_Init+0x8c>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_GPIO_Init+0x8c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	480b      	ldr	r0, [pc, #44]	@ (8000784 <MX_GPIO_Init+0x90>)
 8000756:	f000 fee9 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_GPIO_Init+0x90>)
 8000772:	f000 fd57 	bl	8001224 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_MspInit+0x5c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <HAL_MspInit+0x5c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_MspInit+0x5c>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x5c>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_MspInit+0x5c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_MspInit+0x5c>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_MspInit+0x60>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <HAL_MspInit+0x60>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010000 	.word	0x40010000

080007f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <HAL_ADC_MspInit+0x6c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d121      	bne.n	800085c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <HAL_ADC_MspInit+0x70>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <HAL_ADC_MspInit+0x70>)
 800081e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <HAL_ADC_MspInit+0x70>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <HAL_ADC_MspInit+0x70>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a0c      	ldr	r2, [pc, #48]	@ (8000868 <HAL_ADC_MspInit+0x70>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_ADC_MspInit+0x70>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000848:	2301      	movs	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084c:	2303      	movs	r3, #3
 800084e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <HAL_ADC_MspInit+0x74>)
 8000858:	f000 fce4 	bl	8001224 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40012400 	.word	0x40012400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <HAL_I2C_MspInit+0x70>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d123      	bne.n	80008d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <HAL_I2C_MspInit+0x74>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <HAL_I2C_MspInit+0x74>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_I2C_MspInit+0x74>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a8:	23c0      	movs	r3, #192	@ 0xc0
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ac:	2312      	movs	r3, #18
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <HAL_I2C_MspInit+0x78>)
 80008bc:	f000 fcb2 	bl	8001224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_I2C_MspInit+0x74>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <HAL_I2C_MspInit+0x74>)
 80008c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ca:	61d3      	str	r3, [r2, #28]
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_I2C_MspInit+0x74>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010c00 	.word	0x40010c00

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a1c      	ldr	r2, [pc, #112]	@ (8000978 <HAL_UART_MspInit+0x8c>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d131      	bne.n	8000970 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_UART_MspInit+0x90>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_UART_MspInit+0x90>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a14      	ldr	r2, [pc, #80]	@ (800097c <HAL_UART_MspInit+0x90>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_UART_MspInit+0x90>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800093c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <HAL_UART_MspInit+0x94>)
 8000952:	f000 fc67 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_UART_MspInit+0x94>)
 800096c:	f000 fc5a 	bl	8001224 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013800 	.word	0x40013800
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f914 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4601      	mov	r1, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf0      	blt.n	80009ee <_read+0x12>
  }

  return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e009      	b.n	8000a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf1      	blt.n	8000a28 <_write+0x12>
  }
  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_close>:

int _close(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a74:	605a      	str	r2, [r3, #4]
  return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
	...

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f001 fdaa 	bl	8002638 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20005000 	.word	0x20005000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	20000150 	.word	0x20000150
 8000b18:	200002a8 	.word	0x200002a8

08000b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b28:	f7ff fff8 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b2e:	490c      	ldr	r1, [pc, #48]	@ (8000b60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b30:	4a0c      	ldr	r2, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b44:	4c09      	ldr	r4, [pc, #36]	@ (8000b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b52:	f001 fd77 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b56:	f7ff fcb5 	bl	80004c4 <main>
  bx lr
 8000b5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b64:	080035e0 	.word	0x080035e0
  ldr r2, =_sbss
 8000b68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b6c:	200002a4 	.word	0x200002a4

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_Init+0x28>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <HAL_Init+0x28>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 fb19 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fe00 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fb23 	bl	800120a <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 faf9 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a03      	ldr	r2, [pc, #12]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000154 	.word	0x20000154

08000c24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b02      	ldr	r3, [pc, #8]	@ (8000c34 <HAL_GetTick+0x10>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000154 	.word	0x20000154

08000c38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e0be      	b.n	8000dd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d109      	bne.n	8000c7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fdbe 	bl	80007f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f9ab 	bl	8000fd8 <ADC_ConversionStop_Disable>
 8000c82:	4603      	mov	r3, r0
 8000c84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8099 	bne.w	8000dc6 <HAL_ADC_Init+0x18e>
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8095 	bne.w	8000dc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ca4:	f023 0302 	bic.w	r3, r3, #2
 8000ca8:	f043 0202 	orr.w	r2, r3, #2
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7b1b      	ldrb	r3, [r3, #12]
 8000cbe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cd0:	d003      	beq.n	8000cda <HAL_ADC_Init+0xa2>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <HAL_ADC_Init+0xa8>
 8000cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cde:	e000      	b.n	8000ce2 <HAL_ADC_Init+0xaa>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7d1b      	ldrb	r3, [r3, #20]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d119      	bne.n	8000d24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7b1b      	ldrb	r3, [r3, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	035a      	lsls	r2, r3, #13
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	e00b      	b.n	8000d24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	f043 0220 	orr.w	r2, r3, #32
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1c:	f043 0201 	orr.w	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <HAL_ADC_Init+0x1a8>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6812      	ldr	r2, [r2, #0]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d54:	d003      	beq.n	8000d5e <HAL_ADC_Init+0x126>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d104      	bne.n	8000d68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	051b      	lsls	r3, r3, #20
 8000d66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_ADC_Init+0x1ac>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d10b      	bne.n	8000da4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d96:	f023 0303 	bic.w	r3, r3, #3
 8000d9a:	f043 0201 	orr.w	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da2:	e018      	b.n	8000dd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da8:	f023 0312 	bic.w	r3, r3, #18
 8000dac:	f043 0210 	orr.w	r2, r3, #16
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db8:	f043 0201 	orr.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc4:	e007      	b.n	8000dd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dca:	f043 0210 	orr.w	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	ffe1f7fd 	.word	0xffe1f7fd
 8000de4:	ff1f0efe 	.word	0xff1f0efe

08000de8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x20>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e0dc      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x1da>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d81c      	bhi.n	8000e52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b05      	subs	r3, #5
 8000e2a:	221f      	movs	r2, #31
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4019      	ands	r1, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	3b05      	subs	r3, #5
 8000e44:	fa00 f203 	lsl.w	r2, r0, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e50:	e03c      	b.n	8000ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b0c      	cmp	r3, #12
 8000e58:	d81c      	bhi.n	8000e94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b23      	subs	r3, #35	@ 0x23
 8000e6c:	221f      	movs	r2, #31
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4019      	ands	r1, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	3b23      	subs	r3, #35	@ 0x23
 8000e86:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e92:	e01b      	b.n	8000ecc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3b41      	subs	r3, #65	@ 0x41
 8000ea6:	221f      	movs	r2, #31
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4019      	ands	r1, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3b41      	subs	r3, #65	@ 0x41
 8000ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b09      	cmp	r3, #9
 8000ed2:	d91c      	bls.n	8000f0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68d9      	ldr	r1, [r3, #12]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3b1e      	subs	r3, #30
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6898      	ldr	r0, [r3, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	3b1e      	subs	r3, #30
 8000f00:	fa00 f203 	lsl.w	r2, r0, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	e019      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2207      	movs	r2, #7
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4019      	ands	r1, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6898      	ldr	r0, [r3, #8]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d003      	beq.n	8000f52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d132      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d125      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d126      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d11a      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0c9a      	lsrs	r2, r3, #18
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f98:	e002      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <HAL_ADC_ConfigChannel+0x1b2>
 8000fa6:	e007      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	f043 0220 	orr.w	r2, r3, #32
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40012400 	.word	0x40012400
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	431bde83 	.word	0x431bde83

08000fd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d12e      	bne.n	8001050 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001002:	f7ff fe0f 	bl	8000c24 <HAL_GetTick>
 8001006:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001008:	e01b      	b.n	8001042 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800100a:	f7ff fe0b 	bl	8000c24 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d914      	bls.n	8001042 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10d      	bne.n	8001042 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102a:	f043 0210 	orr.w	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e007      	b.n	8001052 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b01      	cmp	r3, #1
 800104e:	d0dc      	beq.n	800100a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	@ (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	@ (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	@ 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff90 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff49 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff5e 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff90 	bl	8001114 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5f 	bl	80010c0 <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb0 	bl	8001178 <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b08b      	sub	sp, #44	@ 0x2c
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e169      	b.n	800150c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001238:	2201      	movs	r2, #1
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	429a      	cmp	r2, r3
 8001252:	f040 8158 	bne.w	8001506 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a9a      	ldr	r2, [pc, #616]	@ (80014c4 <HAL_GPIO_Init+0x2a0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d05e      	beq.n	800131e <HAL_GPIO_Init+0xfa>
 8001260:	4a98      	ldr	r2, [pc, #608]	@ (80014c4 <HAL_GPIO_Init+0x2a0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d875      	bhi.n	8001352 <HAL_GPIO_Init+0x12e>
 8001266:	4a98      	ldr	r2, [pc, #608]	@ (80014c8 <HAL_GPIO_Init+0x2a4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d058      	beq.n	800131e <HAL_GPIO_Init+0xfa>
 800126c:	4a96      	ldr	r2, [pc, #600]	@ (80014c8 <HAL_GPIO_Init+0x2a4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d86f      	bhi.n	8001352 <HAL_GPIO_Init+0x12e>
 8001272:	4a96      	ldr	r2, [pc, #600]	@ (80014cc <HAL_GPIO_Init+0x2a8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d052      	beq.n	800131e <HAL_GPIO_Init+0xfa>
 8001278:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <HAL_GPIO_Init+0x2a8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d869      	bhi.n	8001352 <HAL_GPIO_Init+0x12e>
 800127e:	4a94      	ldr	r2, [pc, #592]	@ (80014d0 <HAL_GPIO_Init+0x2ac>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d04c      	beq.n	800131e <HAL_GPIO_Init+0xfa>
 8001284:	4a92      	ldr	r2, [pc, #584]	@ (80014d0 <HAL_GPIO_Init+0x2ac>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d863      	bhi.n	8001352 <HAL_GPIO_Init+0x12e>
 800128a:	4a92      	ldr	r2, [pc, #584]	@ (80014d4 <HAL_GPIO_Init+0x2b0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d046      	beq.n	800131e <HAL_GPIO_Init+0xfa>
 8001290:	4a90      	ldr	r2, [pc, #576]	@ (80014d4 <HAL_GPIO_Init+0x2b0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d85d      	bhi.n	8001352 <HAL_GPIO_Init+0x12e>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d82a      	bhi.n	80012f0 <HAL_GPIO_Init+0xcc>
 800129a:	2b12      	cmp	r3, #18
 800129c:	d859      	bhi.n	8001352 <HAL_GPIO_Init+0x12e>
 800129e:	a201      	add	r2, pc, #4	@ (adr r2, 80012a4 <HAL_GPIO_Init+0x80>)
 80012a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a4:	0800131f 	.word	0x0800131f
 80012a8:	080012f9 	.word	0x080012f9
 80012ac:	0800130b 	.word	0x0800130b
 80012b0:	0800134d 	.word	0x0800134d
 80012b4:	08001353 	.word	0x08001353
 80012b8:	08001353 	.word	0x08001353
 80012bc:	08001353 	.word	0x08001353
 80012c0:	08001353 	.word	0x08001353
 80012c4:	08001353 	.word	0x08001353
 80012c8:	08001353 	.word	0x08001353
 80012cc:	08001353 	.word	0x08001353
 80012d0:	08001353 	.word	0x08001353
 80012d4:	08001353 	.word	0x08001353
 80012d8:	08001353 	.word	0x08001353
 80012dc:	08001353 	.word	0x08001353
 80012e0:	08001353 	.word	0x08001353
 80012e4:	08001353 	.word	0x08001353
 80012e8:	08001301 	.word	0x08001301
 80012ec:	08001315 	.word	0x08001315
 80012f0:	4a79      	ldr	r2, [pc, #484]	@ (80014d8 <HAL_GPIO_Init+0x2b4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f6:	e02c      	b.n	8001352 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e029      	b.n	8001354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	3304      	adds	r3, #4
 8001306:	623b      	str	r3, [r7, #32]
          break;
 8001308:	e024      	b.n	8001354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	3308      	adds	r3, #8
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e01f      	b.n	8001354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	330c      	adds	r3, #12
 800131a:	623b      	str	r3, [r7, #32]
          break;
 800131c:	e01a      	b.n	8001354 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001326:	2304      	movs	r3, #4
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e013      	b.n	8001354 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	611a      	str	r2, [r3, #16]
          break;
 800133e:	e009      	b.n	8001354 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001340:	2308      	movs	r3, #8
 8001342:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	615a      	str	r2, [r3, #20]
          break;
 800134a:	e003      	b.n	8001354 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x130>
          break;
 8001352:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2bff      	cmp	r3, #255	@ 0xff
 8001358:	d801      	bhi.n	800135e <HAL_GPIO_Init+0x13a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	e001      	b.n	8001362 <HAL_GPIO_Init+0x13e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3304      	adds	r3, #4
 8001362:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2bff      	cmp	r3, #255	@ 0xff
 8001368:	d802      	bhi.n	8001370 <HAL_GPIO_Init+0x14c>
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x152>
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	3b08      	subs	r3, #8
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	210f      	movs	r1, #15
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	401a      	ands	r2, r3
 8001388:	6a39      	ldr	r1, [r7, #32]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	431a      	orrs	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80b1 	beq.w	8001506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a4:	4b4d      	ldr	r3, [pc, #308]	@ (80014dc <HAL_GPIO_Init+0x2b8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a4c      	ldr	r2, [pc, #304]	@ (80014dc <HAL_GPIO_Init+0x2b8>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <HAL_GPIO_Init+0x2b8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013bc:	4a48      	ldr	r2, [pc, #288]	@ (80014e0 <HAL_GPIO_Init+0x2bc>)
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a40      	ldr	r2, [pc, #256]	@ (80014e4 <HAL_GPIO_Init+0x2c0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d013      	beq.n	8001410 <HAL_GPIO_Init+0x1ec>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3f      	ldr	r2, [pc, #252]	@ (80014e8 <HAL_GPIO_Init+0x2c4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d00d      	beq.n	800140c <HAL_GPIO_Init+0x1e8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ec <HAL_GPIO_Init+0x2c8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x1e4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_GPIO_Init+0x2cc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d101      	bne.n	8001404 <HAL_GPIO_Init+0x1e0>
 8001400:	2303      	movs	r3, #3
 8001402:	e006      	b.n	8001412 <HAL_GPIO_Init+0x1ee>
 8001404:	2304      	movs	r3, #4
 8001406:	e004      	b.n	8001412 <HAL_GPIO_Init+0x1ee>
 8001408:	2302      	movs	r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x1ee>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_GPIO_Init+0x1ee>
 8001410:	2300      	movs	r3, #0
 8001412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4093      	lsls	r3, r2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001422:	492f      	ldr	r1, [pc, #188]	@ (80014e0 <HAL_GPIO_Init+0x2bc>)
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800143c:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	492c      	ldr	r1, [pc, #176]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	608b      	str	r3, [r1, #8]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144a:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4928      	ldr	r1, [pc, #160]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	4922      	ldr	r1, [pc, #136]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	60cb      	str	r3, [r1, #12]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	491e      	ldr	r1, [pc, #120]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 800147c:	4013      	ands	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4918      	ldr	r1, [pc, #96]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4914      	ldr	r1, [pc, #80]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d021      	beq.n	80014f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	490e      	ldr	r1, [pc, #56]	@ (80014f4 <HAL_GPIO_Init+0x2d0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e021      	b.n	8001506 <HAL_GPIO_Init+0x2e2>
 80014c2:	bf00      	nop
 80014c4:	10320000 	.word	0x10320000
 80014c8:	10310000 	.word	0x10310000
 80014cc:	10220000 	.word	0x10220000
 80014d0:	10210000 	.word	0x10210000
 80014d4:	10120000 	.word	0x10120000
 80014d8:	10110000 	.word	0x10110000
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	40010800 	.word	0x40010800
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40011400 	.word	0x40011400
 80014f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_GPIO_Init+0x304>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	43db      	mvns	r3, r3
 8001500:	4909      	ldr	r1, [pc, #36]	@ (8001528 <HAL_GPIO_Init+0x304>)
 8001502:	4013      	ands	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	f47f ae8e 	bne.w	8001238 <HAL_GPIO_Init+0x14>
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	372c      	adds	r7, #44	@ 0x2c
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e12b      	b.n	80017c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff f974 	bl	8000870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2224      	movs	r2, #36	@ 0x24
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c0:	f000 fcda 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a81      	ldr	r2, [pc, #516]	@ (80017d0 <HAL_I2C_Init+0x274>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d807      	bhi.n	80015e0 <HAL_I2C_Init+0x84>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a80      	ldr	r2, [pc, #512]	@ (80017d4 <HAL_I2C_Init+0x278>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e006      	b.n	80015ee <HAL_I2C_Init+0x92>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a7d      	ldr	r2, [pc, #500]	@ (80017d8 <HAL_I2C_Init+0x27c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf94      	ite	ls
 80015e8:	2301      	movls	r3, #1
 80015ea:	2300      	movhi	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0e7      	b.n	80017c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a78      	ldr	r2, [pc, #480]	@ (80017dc <HAL_I2C_Init+0x280>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0c9b      	lsrs	r3, r3, #18
 8001600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a6a      	ldr	r2, [pc, #424]	@ (80017d0 <HAL_I2C_Init+0x274>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d802      	bhi.n	8001630 <HAL_I2C_Init+0xd4>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	e009      	b.n	8001644 <HAL_I2C_Init+0xe8>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4a69      	ldr	r2, [pc, #420]	@ (80017e0 <HAL_I2C_Init+0x284>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	3301      	adds	r3, #1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001656:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	495c      	ldr	r1, [pc, #368]	@ (80017d0 <HAL_I2C_Init+0x274>)
 8001660:	428b      	cmp	r3, r1
 8001662:	d819      	bhi.n	8001698 <HAL_I2C_Init+0x13c>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e59      	subs	r1, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001678:	400b      	ands	r3, r1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <HAL_I2C_Init+0x138>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e59      	subs	r1, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fbb1 f3f3 	udiv	r3, r1, r3
 800168c:	3301      	adds	r3, #1
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	e051      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 8001694:	2304      	movs	r3, #4
 8001696:	e04f      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d111      	bne.n	80016c4 <HAL_I2C_Init+0x168>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e012      	b.n	80016ea <HAL_I2C_Init+0x18e>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	0099      	lsls	r1, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Init+0x196>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e022      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10e      	bne.n	8001718 <HAL_I2C_Init+0x1bc>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e58      	subs	r0, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	440b      	add	r3, r1
 8001708:	fbb0 f3f3 	udiv	r3, r0, r3
 800170c:	3301      	adds	r3, #1
 800170e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001716:	e00f      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e58      	subs	r0, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	0099      	lsls	r1, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	6809      	ldr	r1, [r1, #0]
 800173c:	4313      	orrs	r3, r2
 800173e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001766:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6911      	ldr	r1, [r2, #16]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68d2      	ldr	r2, [r2, #12]
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	000186a0 	.word	0x000186a0
 80017d4:	001e847f 	.word	0x001e847f
 80017d8:	003d08ff 	.word	0x003d08ff
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	10624dd3 	.word	0x10624dd3

080017e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e272      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8087 	beq.w	8001912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001804:	4b92      	ldr	r3, [pc, #584]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b04      	cmp	r3, #4
 800180e:	d00c      	beq.n	800182a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001810:	4b8f      	ldr	r3, [pc, #572]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d112      	bne.n	8001842 <HAL_RCC_OscConfig+0x5e>
 800181c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001828:	d10b      	bne.n	8001842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	4b89      	ldr	r3, [pc, #548]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d06c      	beq.n	8001910 <HAL_RCC_OscConfig+0x12c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d168      	bne.n	8001910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e24c      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x76>
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a7f      	ldr	r2, [pc, #508]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e02e      	b.n	80018b8 <HAL_RCC_OscConfig+0xd4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x98>
 8001862:	4b7b      	ldr	r3, [pc, #492]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7a      	ldr	r2, [pc, #488]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b78      	ldr	r3, [pc, #480]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a77      	ldr	r2, [pc, #476]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001874:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e01d      	b.n	80018b8 <HAL_RCC_OscConfig+0xd4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0xbc>
 8001886:	4b72      	ldr	r3, [pc, #456]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a71      	ldr	r2, [pc, #452]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b6f      	ldr	r3, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6e      	ldr	r2, [pc, #440]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0xd4>
 80018a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b68      	ldr	r3, [pc, #416]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a67      	ldr	r2, [pc, #412]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff f9b0 	bl	8000c24 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9ac 	bl	8000c24 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e200      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b5d      	ldr	r3, [pc, #372]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0xe4>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff f99c 	bl	8000c24 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff f998 	bl	8000c24 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1ec      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x10c>
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d063      	beq.n	80019e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800191e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800192a:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	d11c      	bne.n	8001970 <HAL_RCC_OscConfig+0x18c>
 8001936:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d116      	bne.n	8001970 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001942:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_RCC_OscConfig+0x176>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e1c0      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4939      	ldr	r1, [pc, #228]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	e03a      	b.n	80019e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001978:	4b36      	ldr	r3, [pc, #216]	@ (8001a54 <HAL_RCC_OscConfig+0x270>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f951 	bl	8000c24 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff f94d 	bl	8000c24 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1a1      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4927      	ldr	r1, [pc, #156]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_RCC_OscConfig+0x270>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f930 	bl	8000c24 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff f92c 	bl	8000c24 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e180      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03a      	beq.n	8001a68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d019      	beq.n	8001a2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <HAL_RCC_OscConfig+0x274>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff f910 	bl	8000c24 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff f90c 	bl	8000c24 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e160      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f000 face 	bl	8001fc8 <RCC_Delay>
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff f8f6 	bl	8000c24 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3a:	e00f      	b.n	8001a5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f8f2 	bl	8000c24 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d908      	bls.n	8001a5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e146      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	42420000 	.word	0x42420000
 8001a58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b92      	ldr	r3, [pc, #584]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e9      	bne.n	8001a3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a6 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10d      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b88      	ldr	r3, [pc, #544]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a87      	ldr	r2, [pc, #540]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b85      	ldr	r3, [pc, #532]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b82      	ldr	r3, [pc, #520]	@ (8001cac <HAL_RCC_OscConfig+0x4c8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x4c8>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f8b3 	bl	8000c24 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff f8af 	bl	8000c24 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	@ 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e103      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	4b75      	ldr	r3, [pc, #468]	@ (8001cac <HAL_RCC_OscConfig+0x4c8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x312>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e02d      	b.n	8001b52 <HAL_RCC_OscConfig+0x36e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x334>
 8001afe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a69      	ldr	r2, [pc, #420]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a66      	ldr	r2, [pc, #408]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	e01c      	b.n	8001b52 <HAL_RCC_OscConfig+0x36e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d10c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x356>
 8001b20:	4b61      	ldr	r3, [pc, #388]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a60      	ldr	r2, [pc, #384]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0x36e>
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b58      	ldr	r3, [pc, #352]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a57      	ldr	r2, [pc, #348]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d015      	beq.n	8001b86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f863 	bl	8000c24 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff f85f 	bl	8000c24 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0b1      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ee      	beq.n	8001b62 <HAL_RCC_OscConfig+0x37e>
 8001b84:	e014      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f84d 	bl	8000c24 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff f849 	bl	8000c24 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e09b      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ee      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d105      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8087 	beq.w	8001cda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d061      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d146      	bne.n	8001c6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <HAL_RCC_OscConfig+0x4cc>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff f81d 	bl	8000c24 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff f819 	bl	8000c24 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e06d      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4921      	ldr	r1, [pc, #132]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a19      	ldr	r1, [r3, #32]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	491b      	ldr	r1, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_RCC_OscConfig+0x4cc>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe ffed 	bl	8000c24 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe ffe9 	bl	8000c24 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e03d      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46a>
 8001c6c:	e035      	b.n	8001cda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_RCC_OscConfig+0x4cc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe ffd6 	bl	8000c24 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7fe ffd2 	bl	8000c24 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e026      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x498>
 8001c9a:	e01e      	b.n	8001cda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e019      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_OscConfig+0x500>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d0      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4965      	ldr	r1, [pc, #404]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d44:	4b59      	ldr	r3, [pc, #356]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a58      	ldr	r2, [pc, #352]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5c:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a52      	ldr	r2, [pc, #328]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b50      	ldr	r3, [pc, #320]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	494d      	ldr	r1, [pc, #308]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d040      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d115      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e073      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06b      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4936      	ldr	r1, [pc, #216]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7fe ff24 	bl	8000c24 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7fe ff20 	bl	8000c24 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e053      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d210      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4922      	ldr	r1, [pc, #136]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e032      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4916      	ldr	r1, [pc, #88]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	490e      	ldr	r1, [pc, #56]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e76:	f000 f821 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	490a      	ldr	r1, [pc, #40]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	5ccb      	ldrb	r3, [r1, r3]
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fe82 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08003578 	.word	0x08003578
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x30>
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eea:	e027      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eee:	613b      	str	r3, [r7, #16]
      break;
 8001ef0:	e027      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0c5b      	lsrs	r3, r3, #17
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1e:	fb03 f202 	mul.w	r2, r3, r2
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e004      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	613b      	str	r3, [r7, #16]
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	613b      	str	r3, [r7, #16]
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	693b      	ldr	r3, [r7, #16]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	007a1200 	.word	0x007a1200
 8001f58:	08003590 	.word	0x08003590
 8001f5c:	080035a0 	.word	0x080035a0
 8001f60:	003d0900 	.word	0x003d0900

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b02      	ldr	r3, [pc, #8]	@ (8001f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff2 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08003588 	.word	0x08003588

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0adb      	lsrs	r3, r3, #11
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08003588 	.word	0x08003588

08001fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <RCC_Delay+0x34>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <RCC_Delay+0x38>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0a5b      	lsrs	r3, r3, #9
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fe4:	bf00      	nop
  }
  while (Delay --);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e5a      	subs	r2, r3, #1
 8001fea:	60fa      	str	r2, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f9      	bne.n	8001fe4 <RCC_Delay+0x1c>
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000000 	.word	0x20000000
 8002000:	10624dd3 	.word	0x10624dd3

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d07d      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4b4f      	ldr	r3, [pc, #316]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b4c      	ldr	r3, [pc, #304]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	4a4b      	ldr	r2, [pc, #300]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203a:	61d3      	str	r3, [r2, #28]
 800203c:	4b49      	ldr	r3, [pc, #292]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d118      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002058:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a42      	ldr	r2, [pc, #264]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002064:	f7fe fdde 	bl	8000c24 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7fe fdda 	bl	8000c24 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e06d      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800208a:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002092:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d02e      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d027      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020b2:	4b2e      	ldr	r3, [pc, #184]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020be:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d014      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fda9 	bl	8000c24 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fda5 	bl	8000c24 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e036      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ee      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4917      	ldr	r1, [pc, #92]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002106:	4313      	orrs	r3, r2
 8002108:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	4a13      	ldr	r2, [pc, #76]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	490b      	ldr	r1, [pc, #44]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4904      	ldr	r1, [pc, #16]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	42420440 	.word	0x42420440

08002170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e042      	b.n	8002208 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fba8 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	@ 0x24
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f82b 	bl	8002210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800224a:	f023 030c 	bic.w	r3, r3, #12
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	430b      	orrs	r3, r1
 8002256:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2c      	ldr	r2, [pc, #176]	@ (8002324 <UART_SetConfig+0x114>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002278:	f7ff fe92 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	e002      	b.n	8002286 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002280:	f7ff fe7a 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002284:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <UART_SetConfig+0x118>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	0119      	lsls	r1, r3, #4
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <UART_SetConfig+0x118>)
 80022be:	fba3 0302 	umull	r0, r3, r3, r2
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2064      	movs	r0, #100	@ 0x64
 80022c6:	fb00 f303 	mul.w	r3, r0, r3
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	3332      	adds	r3, #50	@ 0x32
 80022d0:	4a15      	ldr	r2, [pc, #84]	@ (8002328 <UART_SetConfig+0x118>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022dc:	4419      	add	r1, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	009a      	lsls	r2, r3, #2
 80022e8:	441a      	add	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <UART_SetConfig+0x118>)
 80022f6:	fba3 0302 	umull	r0, r3, r3, r2
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2064      	movs	r0, #100	@ 0x64
 80022fe:	fb00 f303 	mul.w	r3, r0, r3
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	3332      	adds	r3, #50	@ 0x32
 8002308:	4a07      	ldr	r2, [pc, #28]	@ (8002328 <UART_SetConfig+0x118>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	f003 020f 	and.w	r2, r3, #15
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	440a      	add	r2, r1
 800231a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40013800 	.word	0x40013800
 8002328:	51eb851f 	.word	0x51eb851f

0800232c <std>:
 800232c:	2300      	movs	r3, #0
 800232e:	b510      	push	{r4, lr}
 8002330:	4604      	mov	r4, r0
 8002332:	e9c0 3300 	strd	r3, r3, [r0]
 8002336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800233a:	6083      	str	r3, [r0, #8]
 800233c:	8181      	strh	r1, [r0, #12]
 800233e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002340:	81c2      	strh	r2, [r0, #14]
 8002342:	6183      	str	r3, [r0, #24]
 8002344:	4619      	mov	r1, r3
 8002346:	2208      	movs	r2, #8
 8002348:	305c      	adds	r0, #92	@ 0x5c
 800234a:	f000 f926 	bl	800259a <memset>
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <std+0x58>)
 8002350:	6224      	str	r4, [r4, #32]
 8002352:	6263      	str	r3, [r4, #36]	@ 0x24
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <std+0x5c>)
 8002356:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <std+0x60>)
 800235a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <std+0x64>)
 800235e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <std+0x68>)
 8002362:	429c      	cmp	r4, r3
 8002364:	d006      	beq.n	8002374 <std+0x48>
 8002366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800236a:	4294      	cmp	r4, r2
 800236c:	d002      	beq.n	8002374 <std+0x48>
 800236e:	33d0      	adds	r3, #208	@ 0xd0
 8002370:	429c      	cmp	r4, r3
 8002372:	d105      	bne.n	8002380 <std+0x54>
 8002374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800237c:	f000 b986 	b.w	800268c <__retarget_lock_init_recursive>
 8002380:	bd10      	pop	{r4, pc}
 8002382:	bf00      	nop
 8002384:	08002515 	.word	0x08002515
 8002388:	08002537 	.word	0x08002537
 800238c:	0800256f 	.word	0x0800256f
 8002390:	08002593 	.word	0x08002593
 8002394:	20000158 	.word	0x20000158

08002398 <stdio_exit_handler>:
 8002398:	4a02      	ldr	r2, [pc, #8]	@ (80023a4 <stdio_exit_handler+0xc>)
 800239a:	4903      	ldr	r1, [pc, #12]	@ (80023a8 <stdio_exit_handler+0x10>)
 800239c:	4803      	ldr	r0, [pc, #12]	@ (80023ac <stdio_exit_handler+0x14>)
 800239e:	f000 b869 	b.w	8002474 <_fwalk_sglue>
 80023a2:	bf00      	nop
 80023a4:	2000000c 	.word	0x2000000c
 80023a8:	080031d5 	.word	0x080031d5
 80023ac:	2000001c 	.word	0x2000001c

080023b0 <cleanup_stdio>:
 80023b0:	6841      	ldr	r1, [r0, #4]
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <cleanup_stdio+0x34>)
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4299      	cmp	r1, r3
 80023b8:	4604      	mov	r4, r0
 80023ba:	d001      	beq.n	80023c0 <cleanup_stdio+0x10>
 80023bc:	f000 ff0a 	bl	80031d4 <_fflush_r>
 80023c0:	68a1      	ldr	r1, [r4, #8]
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <cleanup_stdio+0x38>)
 80023c4:	4299      	cmp	r1, r3
 80023c6:	d002      	beq.n	80023ce <cleanup_stdio+0x1e>
 80023c8:	4620      	mov	r0, r4
 80023ca:	f000 ff03 	bl	80031d4 <_fflush_r>
 80023ce:	68e1      	ldr	r1, [r4, #12]
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <cleanup_stdio+0x3c>)
 80023d2:	4299      	cmp	r1, r3
 80023d4:	d004      	beq.n	80023e0 <cleanup_stdio+0x30>
 80023d6:	4620      	mov	r0, r4
 80023d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023dc:	f000 befa 	b.w	80031d4 <_fflush_r>
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	bf00      	nop
 80023e4:	20000158 	.word	0x20000158
 80023e8:	200001c0 	.word	0x200001c0
 80023ec:	20000228 	.word	0x20000228

080023f0 <global_stdio_init.part.0>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <global_stdio_init.part.0+0x30>)
 80023f4:	4c0b      	ldr	r4, [pc, #44]	@ (8002424 <global_stdio_init.part.0+0x34>)
 80023f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002428 <global_stdio_init.part.0+0x38>)
 80023f8:	4620      	mov	r0, r4
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	2104      	movs	r1, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	f7ff ff94 	bl	800232c <std>
 8002404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002408:	2201      	movs	r2, #1
 800240a:	2109      	movs	r1, #9
 800240c:	f7ff ff8e 	bl	800232c <std>
 8002410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002414:	2202      	movs	r2, #2
 8002416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800241a:	2112      	movs	r1, #18
 800241c:	f7ff bf86 	b.w	800232c <std>
 8002420:	20000290 	.word	0x20000290
 8002424:	20000158 	.word	0x20000158
 8002428:	08002399 	.word	0x08002399

0800242c <__sfp_lock_acquire>:
 800242c:	4801      	ldr	r0, [pc, #4]	@ (8002434 <__sfp_lock_acquire+0x8>)
 800242e:	f000 b92e 	b.w	800268e <__retarget_lock_acquire_recursive>
 8002432:	bf00      	nop
 8002434:	20000299 	.word	0x20000299

08002438 <__sfp_lock_release>:
 8002438:	4801      	ldr	r0, [pc, #4]	@ (8002440 <__sfp_lock_release+0x8>)
 800243a:	f000 b929 	b.w	8002690 <__retarget_lock_release_recursive>
 800243e:	bf00      	nop
 8002440:	20000299 	.word	0x20000299

08002444 <__sinit>:
 8002444:	b510      	push	{r4, lr}
 8002446:	4604      	mov	r4, r0
 8002448:	f7ff fff0 	bl	800242c <__sfp_lock_acquire>
 800244c:	6a23      	ldr	r3, [r4, #32]
 800244e:	b11b      	cbz	r3, 8002458 <__sinit+0x14>
 8002450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002454:	f7ff bff0 	b.w	8002438 <__sfp_lock_release>
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__sinit+0x28>)
 800245a:	6223      	str	r3, [r4, #32]
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__sinit+0x2c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f5      	bne.n	8002450 <__sinit+0xc>
 8002464:	f7ff ffc4 	bl	80023f0 <global_stdio_init.part.0>
 8002468:	e7f2      	b.n	8002450 <__sinit+0xc>
 800246a:	bf00      	nop
 800246c:	080023b1 	.word	0x080023b1
 8002470:	20000290 	.word	0x20000290

08002474 <_fwalk_sglue>:
 8002474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002478:	4607      	mov	r7, r0
 800247a:	4688      	mov	r8, r1
 800247c:	4614      	mov	r4, r2
 800247e:	2600      	movs	r6, #0
 8002480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002484:	f1b9 0901 	subs.w	r9, r9, #1
 8002488:	d505      	bpl.n	8002496 <_fwalk_sglue+0x22>
 800248a:	6824      	ldr	r4, [r4, #0]
 800248c:	2c00      	cmp	r4, #0
 800248e:	d1f7      	bne.n	8002480 <_fwalk_sglue+0xc>
 8002490:	4630      	mov	r0, r6
 8002492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002496:	89ab      	ldrh	r3, [r5, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d907      	bls.n	80024ac <_fwalk_sglue+0x38>
 800249c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024a0:	3301      	adds	r3, #1
 80024a2:	d003      	beq.n	80024ac <_fwalk_sglue+0x38>
 80024a4:	4629      	mov	r1, r5
 80024a6:	4638      	mov	r0, r7
 80024a8:	47c0      	blx	r8
 80024aa:	4306      	orrs	r6, r0
 80024ac:	3568      	adds	r5, #104	@ 0x68
 80024ae:	e7e9      	b.n	8002484 <_fwalk_sglue+0x10>

080024b0 <iprintf>:
 80024b0:	b40f      	push	{r0, r1, r2, r3}
 80024b2:	b507      	push	{r0, r1, r2, lr}
 80024b4:	4906      	ldr	r1, [pc, #24]	@ (80024d0 <iprintf+0x20>)
 80024b6:	ab04      	add	r3, sp, #16
 80024b8:	6808      	ldr	r0, [r1, #0]
 80024ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80024be:	6881      	ldr	r1, [r0, #8]
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f000 fb5d 	bl	8002b80 <_vfiprintf_r>
 80024c6:	b003      	add	sp, #12
 80024c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024cc:	b004      	add	sp, #16
 80024ce:	4770      	bx	lr
 80024d0:	20000018 	.word	0x20000018

080024d4 <siprintf>:
 80024d4:	b40e      	push	{r1, r2, r3}
 80024d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024da:	b500      	push	{lr}
 80024dc:	b09c      	sub	sp, #112	@ 0x70
 80024de:	ab1d      	add	r3, sp, #116	@ 0x74
 80024e0:	9002      	str	r0, [sp, #8]
 80024e2:	9006      	str	r0, [sp, #24]
 80024e4:	9107      	str	r1, [sp, #28]
 80024e6:	9104      	str	r1, [sp, #16]
 80024e8:	4808      	ldr	r0, [pc, #32]	@ (800250c <siprintf+0x38>)
 80024ea:	4909      	ldr	r1, [pc, #36]	@ (8002510 <siprintf+0x3c>)
 80024ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80024f0:	9105      	str	r1, [sp, #20]
 80024f2:	6800      	ldr	r0, [r0, #0]
 80024f4:	a902      	add	r1, sp, #8
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f000 fa1e 	bl	8002938 <_svfiprintf_r>
 80024fc:	2200      	movs	r2, #0
 80024fe:	9b02      	ldr	r3, [sp, #8]
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	b01c      	add	sp, #112	@ 0x70
 8002504:	f85d eb04 	ldr.w	lr, [sp], #4
 8002508:	b003      	add	sp, #12
 800250a:	4770      	bx	lr
 800250c:	20000018 	.word	0x20000018
 8002510:	ffff0208 	.word	0xffff0208

08002514 <__sread>:
 8002514:	b510      	push	{r4, lr}
 8002516:	460c      	mov	r4, r1
 8002518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251c:	f000 f868 	bl	80025f0 <_read_r>
 8002520:	2800      	cmp	r0, #0
 8002522:	bfab      	itete	ge
 8002524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002526:	89a3      	ldrhlt	r3, [r4, #12]
 8002528:	181b      	addge	r3, r3, r0
 800252a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800252e:	bfac      	ite	ge
 8002530:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002532:	81a3      	strhlt	r3, [r4, #12]
 8002534:	bd10      	pop	{r4, pc}

08002536 <__swrite>:
 8002536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800253a:	461f      	mov	r7, r3
 800253c:	898b      	ldrh	r3, [r1, #12]
 800253e:	4605      	mov	r5, r0
 8002540:	05db      	lsls	r3, r3, #23
 8002542:	460c      	mov	r4, r1
 8002544:	4616      	mov	r6, r2
 8002546:	d505      	bpl.n	8002554 <__swrite+0x1e>
 8002548:	2302      	movs	r3, #2
 800254a:	2200      	movs	r2, #0
 800254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002550:	f000 f83c 	bl	80025cc <_lseek_r>
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	4632      	mov	r2, r6
 8002558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800255c:	81a3      	strh	r3, [r4, #12]
 800255e:	4628      	mov	r0, r5
 8002560:	463b      	mov	r3, r7
 8002562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800256a:	f000 b853 	b.w	8002614 <_write_r>

0800256e <__sseek>:
 800256e:	b510      	push	{r4, lr}
 8002570:	460c      	mov	r4, r1
 8002572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002576:	f000 f829 	bl	80025cc <_lseek_r>
 800257a:	1c43      	adds	r3, r0, #1
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	bf15      	itete	ne
 8002580:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800258a:	81a3      	strheq	r3, [r4, #12]
 800258c:	bf18      	it	ne
 800258e:	81a3      	strhne	r3, [r4, #12]
 8002590:	bd10      	pop	{r4, pc}

08002592 <__sclose>:
 8002592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002596:	f000 b809 	b.w	80025ac <_close_r>

0800259a <memset>:
 800259a:	4603      	mov	r3, r0
 800259c:	4402      	add	r2, r0
 800259e:	4293      	cmp	r3, r2
 80025a0:	d100      	bne.n	80025a4 <memset+0xa>
 80025a2:	4770      	bx	lr
 80025a4:	f803 1b01 	strb.w	r1, [r3], #1
 80025a8:	e7f9      	b.n	800259e <memset+0x4>
	...

080025ac <_close_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	2300      	movs	r3, #0
 80025b0:	4d05      	ldr	r5, [pc, #20]	@ (80025c8 <_close_r+0x1c>)
 80025b2:	4604      	mov	r4, r0
 80025b4:	4608      	mov	r0, r1
 80025b6:	602b      	str	r3, [r5, #0]
 80025b8:	f7fe fa49 	bl	8000a4e <_close>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <_close_r+0x1a>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	b103      	cbz	r3, 80025c6 <_close_r+0x1a>
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	20000294 	.word	0x20000294

080025cc <_lseek_r>:
 80025cc:	b538      	push	{r3, r4, r5, lr}
 80025ce:	4604      	mov	r4, r0
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	2200      	movs	r2, #0
 80025d6:	4d05      	ldr	r5, [pc, #20]	@ (80025ec <_lseek_r+0x20>)
 80025d8:	602a      	str	r2, [r5, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	f7fe fa5b 	bl	8000a96 <_lseek>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d102      	bne.n	80025ea <_lseek_r+0x1e>
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	b103      	cbz	r3, 80025ea <_lseek_r+0x1e>
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	20000294 	.word	0x20000294

080025f0 <_read_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4604      	mov	r4, r0
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	2200      	movs	r2, #0
 80025fa:	4d05      	ldr	r5, [pc, #20]	@ (8002610 <_read_r+0x20>)
 80025fc:	602a      	str	r2, [r5, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	f7fe f9ec 	bl	80009dc <_read>
 8002604:	1c43      	adds	r3, r0, #1
 8002606:	d102      	bne.n	800260e <_read_r+0x1e>
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	b103      	cbz	r3, 800260e <_read_r+0x1e>
 800260c:	6023      	str	r3, [r4, #0]
 800260e:	bd38      	pop	{r3, r4, r5, pc}
 8002610:	20000294 	.word	0x20000294

08002614 <_write_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	2200      	movs	r2, #0
 800261e:	4d05      	ldr	r5, [pc, #20]	@ (8002634 <_write_r+0x20>)
 8002620:	602a      	str	r2, [r5, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	f7fe f9f7 	bl	8000a16 <_write>
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d102      	bne.n	8002632 <_write_r+0x1e>
 800262c:	682b      	ldr	r3, [r5, #0]
 800262e:	b103      	cbz	r3, 8002632 <_write_r+0x1e>
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	bd38      	pop	{r3, r4, r5, pc}
 8002634:	20000294 	.word	0x20000294

08002638 <__errno>:
 8002638:	4b01      	ldr	r3, [pc, #4]	@ (8002640 <__errno+0x8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000018 	.word	0x20000018

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2600      	movs	r6, #0
 8002648:	4d0c      	ldr	r5, [pc, #48]	@ (800267c <__libc_init_array+0x38>)
 800264a:	4c0d      	ldr	r4, [pc, #52]	@ (8002680 <__libc_init_array+0x3c>)
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	42a6      	cmp	r6, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	f000 ff7a 	bl	800354c <_init>
 8002658:	2600      	movs	r6, #0
 800265a:	4d0a      	ldr	r5, [pc, #40]	@ (8002684 <__libc_init_array+0x40>)
 800265c:	4c0a      	ldr	r4, [pc, #40]	@ (8002688 <__libc_init_array+0x44>)
 800265e:	1b64      	subs	r4, r4, r5
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	42a6      	cmp	r6, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	f855 3b04 	ldr.w	r3, [r5], #4
 800266c:	4798      	blx	r3
 800266e:	3601      	adds	r6, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	f855 3b04 	ldr.w	r3, [r5], #4
 8002676:	4798      	blx	r3
 8002678:	3601      	adds	r6, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	080035d8 	.word	0x080035d8
 8002680:	080035d8 	.word	0x080035d8
 8002684:	080035d8 	.word	0x080035d8
 8002688:	080035dc 	.word	0x080035dc

0800268c <__retarget_lock_init_recursive>:
 800268c:	4770      	bx	lr

0800268e <__retarget_lock_acquire_recursive>:
 800268e:	4770      	bx	lr

08002690 <__retarget_lock_release_recursive>:
 8002690:	4770      	bx	lr
	...

08002694 <_free_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4605      	mov	r5, r0
 8002698:	2900      	cmp	r1, #0
 800269a:	d040      	beq.n	800271e <_free_r+0x8a>
 800269c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026a0:	1f0c      	subs	r4, r1, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bfb8      	it	lt
 80026a6:	18e4      	addlt	r4, r4, r3
 80026a8:	f000 f8de 	bl	8002868 <__malloc_lock>
 80026ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <_free_r+0x8c>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	b933      	cbnz	r3, 80026c0 <_free_r+0x2c>
 80026b2:	6063      	str	r3, [r4, #4]
 80026b4:	6014      	str	r4, [r2, #0]
 80026b6:	4628      	mov	r0, r5
 80026b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026bc:	f000 b8da 	b.w	8002874 <__malloc_unlock>
 80026c0:	42a3      	cmp	r3, r4
 80026c2:	d908      	bls.n	80026d6 <_free_r+0x42>
 80026c4:	6820      	ldr	r0, [r4, #0]
 80026c6:	1821      	adds	r1, r4, r0
 80026c8:	428b      	cmp	r3, r1
 80026ca:	bf01      	itttt	eq
 80026cc:	6819      	ldreq	r1, [r3, #0]
 80026ce:	685b      	ldreq	r3, [r3, #4]
 80026d0:	1809      	addeq	r1, r1, r0
 80026d2:	6021      	streq	r1, [r4, #0]
 80026d4:	e7ed      	b.n	80026b2 <_free_r+0x1e>
 80026d6:	461a      	mov	r2, r3
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	b10b      	cbz	r3, 80026e0 <_free_r+0x4c>
 80026dc:	42a3      	cmp	r3, r4
 80026de:	d9fa      	bls.n	80026d6 <_free_r+0x42>
 80026e0:	6811      	ldr	r1, [r2, #0]
 80026e2:	1850      	adds	r0, r2, r1
 80026e4:	42a0      	cmp	r0, r4
 80026e6:	d10b      	bne.n	8002700 <_free_r+0x6c>
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	4401      	add	r1, r0
 80026ec:	1850      	adds	r0, r2, r1
 80026ee:	4283      	cmp	r3, r0
 80026f0:	6011      	str	r1, [r2, #0]
 80026f2:	d1e0      	bne.n	80026b6 <_free_r+0x22>
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4408      	add	r0, r1
 80026fa:	6010      	str	r0, [r2, #0]
 80026fc:	6053      	str	r3, [r2, #4]
 80026fe:	e7da      	b.n	80026b6 <_free_r+0x22>
 8002700:	d902      	bls.n	8002708 <_free_r+0x74>
 8002702:	230c      	movs	r3, #12
 8002704:	602b      	str	r3, [r5, #0]
 8002706:	e7d6      	b.n	80026b6 <_free_r+0x22>
 8002708:	6820      	ldr	r0, [r4, #0]
 800270a:	1821      	adds	r1, r4, r0
 800270c:	428b      	cmp	r3, r1
 800270e:	bf01      	itttt	eq
 8002710:	6819      	ldreq	r1, [r3, #0]
 8002712:	685b      	ldreq	r3, [r3, #4]
 8002714:	1809      	addeq	r1, r1, r0
 8002716:	6021      	streq	r1, [r4, #0]
 8002718:	6063      	str	r3, [r4, #4]
 800271a:	6054      	str	r4, [r2, #4]
 800271c:	e7cb      	b.n	80026b6 <_free_r+0x22>
 800271e:	bd38      	pop	{r3, r4, r5, pc}
 8002720:	200002a0 	.word	0x200002a0

08002724 <sbrk_aligned>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4e0f      	ldr	r6, [pc, #60]	@ (8002764 <sbrk_aligned+0x40>)
 8002728:	460c      	mov	r4, r1
 800272a:	6831      	ldr	r1, [r6, #0]
 800272c:	4605      	mov	r5, r0
 800272e:	b911      	cbnz	r1, 8002736 <sbrk_aligned+0x12>
 8002730:	f000 fe26 	bl	8003380 <_sbrk_r>
 8002734:	6030      	str	r0, [r6, #0]
 8002736:	4621      	mov	r1, r4
 8002738:	4628      	mov	r0, r5
 800273a:	f000 fe21 	bl	8003380 <_sbrk_r>
 800273e:	1c43      	adds	r3, r0, #1
 8002740:	d103      	bne.n	800274a <sbrk_aligned+0x26>
 8002742:	f04f 34ff 	mov.w	r4, #4294967295
 8002746:	4620      	mov	r0, r4
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	1cc4      	adds	r4, r0, #3
 800274c:	f024 0403 	bic.w	r4, r4, #3
 8002750:	42a0      	cmp	r0, r4
 8002752:	d0f8      	beq.n	8002746 <sbrk_aligned+0x22>
 8002754:	1a21      	subs	r1, r4, r0
 8002756:	4628      	mov	r0, r5
 8002758:	f000 fe12 	bl	8003380 <_sbrk_r>
 800275c:	3001      	adds	r0, #1
 800275e:	d1f2      	bne.n	8002746 <sbrk_aligned+0x22>
 8002760:	e7ef      	b.n	8002742 <sbrk_aligned+0x1e>
 8002762:	bf00      	nop
 8002764:	2000029c 	.word	0x2000029c

08002768 <_malloc_r>:
 8002768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800276c:	1ccd      	adds	r5, r1, #3
 800276e:	f025 0503 	bic.w	r5, r5, #3
 8002772:	3508      	adds	r5, #8
 8002774:	2d0c      	cmp	r5, #12
 8002776:	bf38      	it	cc
 8002778:	250c      	movcc	r5, #12
 800277a:	2d00      	cmp	r5, #0
 800277c:	4606      	mov	r6, r0
 800277e:	db01      	blt.n	8002784 <_malloc_r+0x1c>
 8002780:	42a9      	cmp	r1, r5
 8002782:	d904      	bls.n	800278e <_malloc_r+0x26>
 8002784:	230c      	movs	r3, #12
 8002786:	6033      	str	r3, [r6, #0]
 8002788:	2000      	movs	r0, #0
 800278a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800278e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002864 <_malloc_r+0xfc>
 8002792:	f000 f869 	bl	8002868 <__malloc_lock>
 8002796:	f8d8 3000 	ldr.w	r3, [r8]
 800279a:	461c      	mov	r4, r3
 800279c:	bb44      	cbnz	r4, 80027f0 <_malloc_r+0x88>
 800279e:	4629      	mov	r1, r5
 80027a0:	4630      	mov	r0, r6
 80027a2:	f7ff ffbf 	bl	8002724 <sbrk_aligned>
 80027a6:	1c43      	adds	r3, r0, #1
 80027a8:	4604      	mov	r4, r0
 80027aa:	d158      	bne.n	800285e <_malloc_r+0xf6>
 80027ac:	f8d8 4000 	ldr.w	r4, [r8]
 80027b0:	4627      	mov	r7, r4
 80027b2:	2f00      	cmp	r7, #0
 80027b4:	d143      	bne.n	800283e <_malloc_r+0xd6>
 80027b6:	2c00      	cmp	r4, #0
 80027b8:	d04b      	beq.n	8002852 <_malloc_r+0xea>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	4639      	mov	r1, r7
 80027be:	4630      	mov	r0, r6
 80027c0:	eb04 0903 	add.w	r9, r4, r3
 80027c4:	f000 fddc 	bl	8003380 <_sbrk_r>
 80027c8:	4581      	cmp	r9, r0
 80027ca:	d142      	bne.n	8002852 <_malloc_r+0xea>
 80027cc:	6821      	ldr	r1, [r4, #0]
 80027ce:	4630      	mov	r0, r6
 80027d0:	1a6d      	subs	r5, r5, r1
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7ff ffa6 	bl	8002724 <sbrk_aligned>
 80027d8:	3001      	adds	r0, #1
 80027da:	d03a      	beq.n	8002852 <_malloc_r+0xea>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	442b      	add	r3, r5
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	f8d8 3000 	ldr.w	r3, [r8]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	bb62      	cbnz	r2, 8002844 <_malloc_r+0xdc>
 80027ea:	f8c8 7000 	str.w	r7, [r8]
 80027ee:	e00f      	b.n	8002810 <_malloc_r+0xa8>
 80027f0:	6822      	ldr	r2, [r4, #0]
 80027f2:	1b52      	subs	r2, r2, r5
 80027f4:	d420      	bmi.n	8002838 <_malloc_r+0xd0>
 80027f6:	2a0b      	cmp	r2, #11
 80027f8:	d917      	bls.n	800282a <_malloc_r+0xc2>
 80027fa:	1961      	adds	r1, r4, r5
 80027fc:	42a3      	cmp	r3, r4
 80027fe:	6025      	str	r5, [r4, #0]
 8002800:	bf18      	it	ne
 8002802:	6059      	strne	r1, [r3, #4]
 8002804:	6863      	ldr	r3, [r4, #4]
 8002806:	bf08      	it	eq
 8002808:	f8c8 1000 	streq.w	r1, [r8]
 800280c:	5162      	str	r2, [r4, r5]
 800280e:	604b      	str	r3, [r1, #4]
 8002810:	4630      	mov	r0, r6
 8002812:	f000 f82f 	bl	8002874 <__malloc_unlock>
 8002816:	f104 000b 	add.w	r0, r4, #11
 800281a:	1d23      	adds	r3, r4, #4
 800281c:	f020 0007 	bic.w	r0, r0, #7
 8002820:	1ac2      	subs	r2, r0, r3
 8002822:	bf1c      	itt	ne
 8002824:	1a1b      	subne	r3, r3, r0
 8002826:	50a3      	strne	r3, [r4, r2]
 8002828:	e7af      	b.n	800278a <_malloc_r+0x22>
 800282a:	6862      	ldr	r2, [r4, #4]
 800282c:	42a3      	cmp	r3, r4
 800282e:	bf0c      	ite	eq
 8002830:	f8c8 2000 	streq.w	r2, [r8]
 8002834:	605a      	strne	r2, [r3, #4]
 8002836:	e7eb      	b.n	8002810 <_malloc_r+0xa8>
 8002838:	4623      	mov	r3, r4
 800283a:	6864      	ldr	r4, [r4, #4]
 800283c:	e7ae      	b.n	800279c <_malloc_r+0x34>
 800283e:	463c      	mov	r4, r7
 8002840:	687f      	ldr	r7, [r7, #4]
 8002842:	e7b6      	b.n	80027b2 <_malloc_r+0x4a>
 8002844:	461a      	mov	r2, r3
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	42a3      	cmp	r3, r4
 800284a:	d1fb      	bne.n	8002844 <_malloc_r+0xdc>
 800284c:	2300      	movs	r3, #0
 800284e:	6053      	str	r3, [r2, #4]
 8002850:	e7de      	b.n	8002810 <_malloc_r+0xa8>
 8002852:	230c      	movs	r3, #12
 8002854:	4630      	mov	r0, r6
 8002856:	6033      	str	r3, [r6, #0]
 8002858:	f000 f80c 	bl	8002874 <__malloc_unlock>
 800285c:	e794      	b.n	8002788 <_malloc_r+0x20>
 800285e:	6005      	str	r5, [r0, #0]
 8002860:	e7d6      	b.n	8002810 <_malloc_r+0xa8>
 8002862:	bf00      	nop
 8002864:	200002a0 	.word	0x200002a0

08002868 <__malloc_lock>:
 8002868:	4801      	ldr	r0, [pc, #4]	@ (8002870 <__malloc_lock+0x8>)
 800286a:	f7ff bf10 	b.w	800268e <__retarget_lock_acquire_recursive>
 800286e:	bf00      	nop
 8002870:	20000298 	.word	0x20000298

08002874 <__malloc_unlock>:
 8002874:	4801      	ldr	r0, [pc, #4]	@ (800287c <__malloc_unlock+0x8>)
 8002876:	f7ff bf0b 	b.w	8002690 <__retarget_lock_release_recursive>
 800287a:	bf00      	nop
 800287c:	20000298 	.word	0x20000298

08002880 <__ssputs_r>:
 8002880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002884:	461f      	mov	r7, r3
 8002886:	688e      	ldr	r6, [r1, #8]
 8002888:	4682      	mov	sl, r0
 800288a:	42be      	cmp	r6, r7
 800288c:	460c      	mov	r4, r1
 800288e:	4690      	mov	r8, r2
 8002890:	680b      	ldr	r3, [r1, #0]
 8002892:	d82d      	bhi.n	80028f0 <__ssputs_r+0x70>
 8002894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800289c:	d026      	beq.n	80028ec <__ssputs_r+0x6c>
 800289e:	6965      	ldr	r5, [r4, #20]
 80028a0:	6909      	ldr	r1, [r1, #16]
 80028a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028a6:	eba3 0901 	sub.w	r9, r3, r1
 80028aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028ae:	1c7b      	adds	r3, r7, #1
 80028b0:	444b      	add	r3, r9
 80028b2:	106d      	asrs	r5, r5, #1
 80028b4:	429d      	cmp	r5, r3
 80028b6:	bf38      	it	cc
 80028b8:	461d      	movcc	r5, r3
 80028ba:	0553      	lsls	r3, r2, #21
 80028bc:	d527      	bpl.n	800290e <__ssputs_r+0x8e>
 80028be:	4629      	mov	r1, r5
 80028c0:	f7ff ff52 	bl	8002768 <_malloc_r>
 80028c4:	4606      	mov	r6, r0
 80028c6:	b360      	cbz	r0, 8002922 <__ssputs_r+0xa2>
 80028c8:	464a      	mov	r2, r9
 80028ca:	6921      	ldr	r1, [r4, #16]
 80028cc:	f000 fd76 	bl	80033bc <memcpy>
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80028d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028da:	81a3      	strh	r3, [r4, #12]
 80028dc:	6126      	str	r6, [r4, #16]
 80028de:	444e      	add	r6, r9
 80028e0:	6026      	str	r6, [r4, #0]
 80028e2:	463e      	mov	r6, r7
 80028e4:	6165      	str	r5, [r4, #20]
 80028e6:	eba5 0509 	sub.w	r5, r5, r9
 80028ea:	60a5      	str	r5, [r4, #8]
 80028ec:	42be      	cmp	r6, r7
 80028ee:	d900      	bls.n	80028f2 <__ssputs_r+0x72>
 80028f0:	463e      	mov	r6, r7
 80028f2:	4632      	mov	r2, r6
 80028f4:	4641      	mov	r1, r8
 80028f6:	6820      	ldr	r0, [r4, #0]
 80028f8:	f000 fd28 	bl	800334c <memmove>
 80028fc:	2000      	movs	r0, #0
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	1b9b      	subs	r3, r3, r6
 8002902:	60a3      	str	r3, [r4, #8]
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	4433      	add	r3, r6
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800290e:	462a      	mov	r2, r5
 8002910:	f000 fd62 	bl	80033d8 <_realloc_r>
 8002914:	4606      	mov	r6, r0
 8002916:	2800      	cmp	r0, #0
 8002918:	d1e0      	bne.n	80028dc <__ssputs_r+0x5c>
 800291a:	4650      	mov	r0, sl
 800291c:	6921      	ldr	r1, [r4, #16]
 800291e:	f7ff feb9 	bl	8002694 <_free_r>
 8002922:	230c      	movs	r3, #12
 8002924:	f8ca 3000 	str.w	r3, [sl]
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	f04f 30ff 	mov.w	r0, #4294967295
 800292e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002932:	81a3      	strh	r3, [r4, #12]
 8002934:	e7e9      	b.n	800290a <__ssputs_r+0x8a>
	...

08002938 <_svfiprintf_r>:
 8002938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	4698      	mov	r8, r3
 800293e:	898b      	ldrh	r3, [r1, #12]
 8002940:	4607      	mov	r7, r0
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	460d      	mov	r5, r1
 8002946:	4614      	mov	r4, r2
 8002948:	b09d      	sub	sp, #116	@ 0x74
 800294a:	d510      	bpl.n	800296e <_svfiprintf_r+0x36>
 800294c:	690b      	ldr	r3, [r1, #16]
 800294e:	b973      	cbnz	r3, 800296e <_svfiprintf_r+0x36>
 8002950:	2140      	movs	r1, #64	@ 0x40
 8002952:	f7ff ff09 	bl	8002768 <_malloc_r>
 8002956:	6028      	str	r0, [r5, #0]
 8002958:	6128      	str	r0, [r5, #16]
 800295a:	b930      	cbnz	r0, 800296a <_svfiprintf_r+0x32>
 800295c:	230c      	movs	r3, #12
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	b01d      	add	sp, #116	@ 0x74
 8002966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296a:	2340      	movs	r3, #64	@ 0x40
 800296c:	616b      	str	r3, [r5, #20]
 800296e:	2300      	movs	r3, #0
 8002970:	9309      	str	r3, [sp, #36]	@ 0x24
 8002972:	2320      	movs	r3, #32
 8002974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002978:	2330      	movs	r3, #48	@ 0x30
 800297a:	f04f 0901 	mov.w	r9, #1
 800297e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002982:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002b1c <_svfiprintf_r+0x1e4>
 8002986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800298a:	4623      	mov	r3, r4
 800298c:	469a      	mov	sl, r3
 800298e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002992:	b10a      	cbz	r2, 8002998 <_svfiprintf_r+0x60>
 8002994:	2a25      	cmp	r2, #37	@ 0x25
 8002996:	d1f9      	bne.n	800298c <_svfiprintf_r+0x54>
 8002998:	ebba 0b04 	subs.w	fp, sl, r4
 800299c:	d00b      	beq.n	80029b6 <_svfiprintf_r+0x7e>
 800299e:	465b      	mov	r3, fp
 80029a0:	4622      	mov	r2, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	4638      	mov	r0, r7
 80029a6:	f7ff ff6b 	bl	8002880 <__ssputs_r>
 80029aa:	3001      	adds	r0, #1
 80029ac:	f000 80a7 	beq.w	8002afe <_svfiprintf_r+0x1c6>
 80029b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029b2:	445a      	add	r2, fp
 80029b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80029b6:	f89a 3000 	ldrb.w	r3, [sl]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 809f 	beq.w	8002afe <_svfiprintf_r+0x1c6>
 80029c0:	2300      	movs	r3, #0
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029ca:	f10a 0a01 	add.w	sl, sl, #1
 80029ce:	9304      	str	r3, [sp, #16]
 80029d0:	9307      	str	r3, [sp, #28]
 80029d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80029d8:	4654      	mov	r4, sl
 80029da:	2205      	movs	r2, #5
 80029dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e0:	484e      	ldr	r0, [pc, #312]	@ (8002b1c <_svfiprintf_r+0x1e4>)
 80029e2:	f000 fcdd 	bl	80033a0 <memchr>
 80029e6:	9a04      	ldr	r2, [sp, #16]
 80029e8:	b9d8      	cbnz	r0, 8002a22 <_svfiprintf_r+0xea>
 80029ea:	06d0      	lsls	r0, r2, #27
 80029ec:	bf44      	itt	mi
 80029ee:	2320      	movmi	r3, #32
 80029f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029f4:	0711      	lsls	r1, r2, #28
 80029f6:	bf44      	itt	mi
 80029f8:	232b      	movmi	r3, #43	@ 0x2b
 80029fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a04:	d015      	beq.n	8002a32 <_svfiprintf_r+0xfa>
 8002a06:	4654      	mov	r4, sl
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f04f 0c0a 	mov.w	ip, #10
 8002a0e:	9a07      	ldr	r2, [sp, #28]
 8002a10:	4621      	mov	r1, r4
 8002a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a16:	3b30      	subs	r3, #48	@ 0x30
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d94b      	bls.n	8002ab4 <_svfiprintf_r+0x17c>
 8002a1c:	b1b0      	cbz	r0, 8002a4c <_svfiprintf_r+0x114>
 8002a1e:	9207      	str	r2, [sp, #28]
 8002a20:	e014      	b.n	8002a4c <_svfiprintf_r+0x114>
 8002a22:	eba0 0308 	sub.w	r3, r0, r8
 8002a26:	fa09 f303 	lsl.w	r3, r9, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	46a2      	mov	sl, r4
 8002a2e:	9304      	str	r3, [sp, #16]
 8002a30:	e7d2      	b.n	80029d8 <_svfiprintf_r+0xa0>
 8002a32:	9b03      	ldr	r3, [sp, #12]
 8002a34:	1d19      	adds	r1, r3, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	9103      	str	r1, [sp, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bfbb      	ittet	lt
 8002a3e:	425b      	neglt	r3, r3
 8002a40:	f042 0202 	orrlt.w	r2, r2, #2
 8002a44:	9307      	strge	r3, [sp, #28]
 8002a46:	9307      	strlt	r3, [sp, #28]
 8002a48:	bfb8      	it	lt
 8002a4a:	9204      	strlt	r2, [sp, #16]
 8002a4c:	7823      	ldrb	r3, [r4, #0]
 8002a4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a50:	d10a      	bne.n	8002a68 <_svfiprintf_r+0x130>
 8002a52:	7863      	ldrb	r3, [r4, #1]
 8002a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a56:	d132      	bne.n	8002abe <_svfiprintf_r+0x186>
 8002a58:	9b03      	ldr	r3, [sp, #12]
 8002a5a:	3402      	adds	r4, #2
 8002a5c:	1d1a      	adds	r2, r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	9203      	str	r2, [sp, #12]
 8002a62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a66:	9305      	str	r3, [sp, #20]
 8002a68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002b20 <_svfiprintf_r+0x1e8>
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4650      	mov	r0, sl
 8002a70:	7821      	ldrb	r1, [r4, #0]
 8002a72:	f000 fc95 	bl	80033a0 <memchr>
 8002a76:	b138      	cbz	r0, 8002a88 <_svfiprintf_r+0x150>
 8002a78:	2240      	movs	r2, #64	@ 0x40
 8002a7a:	9b04      	ldr	r3, [sp, #16]
 8002a7c:	eba0 000a 	sub.w	r0, r0, sl
 8002a80:	4082      	lsls	r2, r0
 8002a82:	4313      	orrs	r3, r2
 8002a84:	3401      	adds	r4, #1
 8002a86:	9304      	str	r3, [sp, #16]
 8002a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	4825      	ldr	r0, [pc, #148]	@ (8002b24 <_svfiprintf_r+0x1ec>)
 8002a90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a94:	f000 fc84 	bl	80033a0 <memchr>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d036      	beq.n	8002b0a <_svfiprintf_r+0x1d2>
 8002a9c:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <_svfiprintf_r+0x1f0>)
 8002a9e:	bb1b      	cbnz	r3, 8002ae8 <_svfiprintf_r+0x1b0>
 8002aa0:	9b03      	ldr	r3, [sp, #12]
 8002aa2:	3307      	adds	r3, #7
 8002aa4:	f023 0307 	bic.w	r3, r3, #7
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	9303      	str	r3, [sp, #12]
 8002aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002aae:	4433      	add	r3, r6
 8002ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ab2:	e76a      	b.n	800298a <_svfiprintf_r+0x52>
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002abc:	e7a8      	b.n	8002a10 <_svfiprintf_r+0xd8>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f04f 0c0a 	mov.w	ip, #10
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	3401      	adds	r4, #1
 8002ac8:	9305      	str	r3, [sp, #20]
 8002aca:	4620      	mov	r0, r4
 8002acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ad0:	3a30      	subs	r2, #48	@ 0x30
 8002ad2:	2a09      	cmp	r2, #9
 8002ad4:	d903      	bls.n	8002ade <_svfiprintf_r+0x1a6>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0c6      	beq.n	8002a68 <_svfiprintf_r+0x130>
 8002ada:	9105      	str	r1, [sp, #20]
 8002adc:	e7c4      	b.n	8002a68 <_svfiprintf_r+0x130>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ae6:	e7f0      	b.n	8002aca <_svfiprintf_r+0x192>
 8002ae8:	ab03      	add	r3, sp, #12
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	462a      	mov	r2, r5
 8002aee:	4638      	mov	r0, r7
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <_svfiprintf_r+0x1f4>)
 8002af2:	a904      	add	r1, sp, #16
 8002af4:	f3af 8000 	nop.w
 8002af8:	1c42      	adds	r2, r0, #1
 8002afa:	4606      	mov	r6, r0
 8002afc:	d1d6      	bne.n	8002aac <_svfiprintf_r+0x174>
 8002afe:	89ab      	ldrh	r3, [r5, #12]
 8002b00:	065b      	lsls	r3, r3, #25
 8002b02:	f53f af2d 	bmi.w	8002960 <_svfiprintf_r+0x28>
 8002b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b08:	e72c      	b.n	8002964 <_svfiprintf_r+0x2c>
 8002b0a:	ab03      	add	r3, sp, #12
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	462a      	mov	r2, r5
 8002b10:	4638      	mov	r0, r7
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <_svfiprintf_r+0x1f4>)
 8002b14:	a904      	add	r1, sp, #16
 8002b16:	f000 f9bd 	bl	8002e94 <_printf_i>
 8002b1a:	e7ed      	b.n	8002af8 <_svfiprintf_r+0x1c0>
 8002b1c:	080035a2 	.word	0x080035a2
 8002b20:	080035a8 	.word	0x080035a8
 8002b24:	080035ac 	.word	0x080035ac
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	08002881 	.word	0x08002881

08002b30 <__sfputc_r>:
 8002b30:	6893      	ldr	r3, [r2, #8]
 8002b32:	b410      	push	{r4}
 8002b34:	3b01      	subs	r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	6093      	str	r3, [r2, #8]
 8002b3a:	da07      	bge.n	8002b4c <__sfputc_r+0x1c>
 8002b3c:	6994      	ldr	r4, [r2, #24]
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	db01      	blt.n	8002b46 <__sfputc_r+0x16>
 8002b42:	290a      	cmp	r1, #10
 8002b44:	d102      	bne.n	8002b4c <__sfputc_r+0x1c>
 8002b46:	bc10      	pop	{r4}
 8002b48:	f000 bb6c 	b.w	8003224 <__swbuf_r>
 8002b4c:	6813      	ldr	r3, [r2, #0]
 8002b4e:	1c58      	adds	r0, r3, #1
 8002b50:	6010      	str	r0, [r2, #0]
 8002b52:	7019      	strb	r1, [r3, #0]
 8002b54:	4608      	mov	r0, r1
 8002b56:	bc10      	pop	{r4}
 8002b58:	4770      	bx	lr

08002b5a <__sfputs_r>:
 8002b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	460f      	mov	r7, r1
 8002b60:	4614      	mov	r4, r2
 8002b62:	18d5      	adds	r5, r2, r3
 8002b64:	42ac      	cmp	r4, r5
 8002b66:	d101      	bne.n	8002b6c <__sfputs_r+0x12>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	e007      	b.n	8002b7c <__sfputs_r+0x22>
 8002b6c:	463a      	mov	r2, r7
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b74:	f7ff ffdc 	bl	8002b30 <__sfputc_r>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d1f3      	bne.n	8002b64 <__sfputs_r+0xa>
 8002b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b80 <_vfiprintf_r>:
 8002b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b84:	460d      	mov	r5, r1
 8002b86:	4614      	mov	r4, r2
 8002b88:	4698      	mov	r8, r3
 8002b8a:	4606      	mov	r6, r0
 8002b8c:	b09d      	sub	sp, #116	@ 0x74
 8002b8e:	b118      	cbz	r0, 8002b98 <_vfiprintf_r+0x18>
 8002b90:	6a03      	ldr	r3, [r0, #32]
 8002b92:	b90b      	cbnz	r3, 8002b98 <_vfiprintf_r+0x18>
 8002b94:	f7ff fc56 	bl	8002444 <__sinit>
 8002b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b9a:	07d9      	lsls	r1, r3, #31
 8002b9c:	d405      	bmi.n	8002baa <_vfiprintf_r+0x2a>
 8002b9e:	89ab      	ldrh	r3, [r5, #12]
 8002ba0:	059a      	lsls	r2, r3, #22
 8002ba2:	d402      	bmi.n	8002baa <_vfiprintf_r+0x2a>
 8002ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ba6:	f7ff fd72 	bl	800268e <__retarget_lock_acquire_recursive>
 8002baa:	89ab      	ldrh	r3, [r5, #12]
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	d501      	bpl.n	8002bb4 <_vfiprintf_r+0x34>
 8002bb0:	692b      	ldr	r3, [r5, #16]
 8002bb2:	b99b      	cbnz	r3, 8002bdc <_vfiprintf_r+0x5c>
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	f000 fb72 	bl	80032a0 <__swsetup_r>
 8002bbc:	b170      	cbz	r0, 8002bdc <_vfiprintf_r+0x5c>
 8002bbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002bc0:	07dc      	lsls	r4, r3, #31
 8002bc2:	d504      	bpl.n	8002bce <_vfiprintf_r+0x4e>
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	b01d      	add	sp, #116	@ 0x74
 8002bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bce:	89ab      	ldrh	r3, [r5, #12]
 8002bd0:	0598      	lsls	r0, r3, #22
 8002bd2:	d4f7      	bmi.n	8002bc4 <_vfiprintf_r+0x44>
 8002bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002bd6:	f7ff fd5b 	bl	8002690 <__retarget_lock_release_recursive>
 8002bda:	e7f3      	b.n	8002bc4 <_vfiprintf_r+0x44>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8002be0:	2320      	movs	r3, #32
 8002be2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002be6:	2330      	movs	r3, #48	@ 0x30
 8002be8:	f04f 0901 	mov.w	r9, #1
 8002bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bf0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002d9c <_vfiprintf_r+0x21c>
 8002bf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	469a      	mov	sl, r3
 8002bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c00:	b10a      	cbz	r2, 8002c06 <_vfiprintf_r+0x86>
 8002c02:	2a25      	cmp	r2, #37	@ 0x25
 8002c04:	d1f9      	bne.n	8002bfa <_vfiprintf_r+0x7a>
 8002c06:	ebba 0b04 	subs.w	fp, sl, r4
 8002c0a:	d00b      	beq.n	8002c24 <_vfiprintf_r+0xa4>
 8002c0c:	465b      	mov	r3, fp
 8002c0e:	4622      	mov	r2, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	4630      	mov	r0, r6
 8002c14:	f7ff ffa1 	bl	8002b5a <__sfputs_r>
 8002c18:	3001      	adds	r0, #1
 8002c1a:	f000 80a7 	beq.w	8002d6c <_vfiprintf_r+0x1ec>
 8002c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c20:	445a      	add	r2, fp
 8002c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c24:	f89a 3000 	ldrb.w	r3, [sl]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 809f 	beq.w	8002d6c <_vfiprintf_r+0x1ec>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c38:	f10a 0a01 	add.w	sl, sl, #1
 8002c3c:	9304      	str	r3, [sp, #16]
 8002c3e:	9307      	str	r3, [sp, #28]
 8002c40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c44:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c46:	4654      	mov	r4, sl
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c4e:	4853      	ldr	r0, [pc, #332]	@ (8002d9c <_vfiprintf_r+0x21c>)
 8002c50:	f000 fba6 	bl	80033a0 <memchr>
 8002c54:	9a04      	ldr	r2, [sp, #16]
 8002c56:	b9d8      	cbnz	r0, 8002c90 <_vfiprintf_r+0x110>
 8002c58:	06d1      	lsls	r1, r2, #27
 8002c5a:	bf44      	itt	mi
 8002c5c:	2320      	movmi	r3, #32
 8002c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c62:	0713      	lsls	r3, r2, #28
 8002c64:	bf44      	itt	mi
 8002c66:	232b      	movmi	r3, #43	@ 0x2b
 8002c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8002c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c72:	d015      	beq.n	8002ca0 <_vfiprintf_r+0x120>
 8002c74:	4654      	mov	r4, sl
 8002c76:	2000      	movs	r0, #0
 8002c78:	f04f 0c0a 	mov.w	ip, #10
 8002c7c:	9a07      	ldr	r2, [sp, #28]
 8002c7e:	4621      	mov	r1, r4
 8002c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c84:	3b30      	subs	r3, #48	@ 0x30
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	d94b      	bls.n	8002d22 <_vfiprintf_r+0x1a2>
 8002c8a:	b1b0      	cbz	r0, 8002cba <_vfiprintf_r+0x13a>
 8002c8c:	9207      	str	r2, [sp, #28]
 8002c8e:	e014      	b.n	8002cba <_vfiprintf_r+0x13a>
 8002c90:	eba0 0308 	sub.w	r3, r0, r8
 8002c94:	fa09 f303 	lsl.w	r3, r9, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	46a2      	mov	sl, r4
 8002c9c:	9304      	str	r3, [sp, #16]
 8002c9e:	e7d2      	b.n	8002c46 <_vfiprintf_r+0xc6>
 8002ca0:	9b03      	ldr	r3, [sp, #12]
 8002ca2:	1d19      	adds	r1, r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	9103      	str	r1, [sp, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bfbb      	ittet	lt
 8002cac:	425b      	neglt	r3, r3
 8002cae:	f042 0202 	orrlt.w	r2, r2, #2
 8002cb2:	9307      	strge	r3, [sp, #28]
 8002cb4:	9307      	strlt	r3, [sp, #28]
 8002cb6:	bfb8      	it	lt
 8002cb8:	9204      	strlt	r2, [sp, #16]
 8002cba:	7823      	ldrb	r3, [r4, #0]
 8002cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cbe:	d10a      	bne.n	8002cd6 <_vfiprintf_r+0x156>
 8002cc0:	7863      	ldrb	r3, [r4, #1]
 8002cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cc4:	d132      	bne.n	8002d2c <_vfiprintf_r+0x1ac>
 8002cc6:	9b03      	ldr	r3, [sp, #12]
 8002cc8:	3402      	adds	r4, #2
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	9203      	str	r2, [sp, #12]
 8002cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002cd4:	9305      	str	r3, [sp, #20]
 8002cd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002da0 <_vfiprintf_r+0x220>
 8002cda:	2203      	movs	r2, #3
 8002cdc:	4650      	mov	r0, sl
 8002cde:	7821      	ldrb	r1, [r4, #0]
 8002ce0:	f000 fb5e 	bl	80033a0 <memchr>
 8002ce4:	b138      	cbz	r0, 8002cf6 <_vfiprintf_r+0x176>
 8002ce6:	2240      	movs	r2, #64	@ 0x40
 8002ce8:	9b04      	ldr	r3, [sp, #16]
 8002cea:	eba0 000a 	sub.w	r0, r0, sl
 8002cee:	4082      	lsls	r2, r0
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	3401      	adds	r4, #1
 8002cf4:	9304      	str	r3, [sp, #16]
 8002cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cfa:	2206      	movs	r2, #6
 8002cfc:	4829      	ldr	r0, [pc, #164]	@ (8002da4 <_vfiprintf_r+0x224>)
 8002cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d02:	f000 fb4d 	bl	80033a0 <memchr>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d03f      	beq.n	8002d8a <_vfiprintf_r+0x20a>
 8002d0a:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <_vfiprintf_r+0x228>)
 8002d0c:	bb1b      	cbnz	r3, 8002d56 <_vfiprintf_r+0x1d6>
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	3307      	adds	r3, #7
 8002d12:	f023 0307 	bic.w	r3, r3, #7
 8002d16:	3308      	adds	r3, #8
 8002d18:	9303      	str	r3, [sp, #12]
 8002d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d1c:	443b      	add	r3, r7
 8002d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d20:	e76a      	b.n	8002bf8 <_vfiprintf_r+0x78>
 8002d22:	460c      	mov	r4, r1
 8002d24:	2001      	movs	r0, #1
 8002d26:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d2a:	e7a8      	b.n	8002c7e <_vfiprintf_r+0xfe>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f04f 0c0a 	mov.w	ip, #10
 8002d32:	4619      	mov	r1, r3
 8002d34:	3401      	adds	r4, #1
 8002d36:	9305      	str	r3, [sp, #20]
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d3e:	3a30      	subs	r2, #48	@ 0x30
 8002d40:	2a09      	cmp	r2, #9
 8002d42:	d903      	bls.n	8002d4c <_vfiprintf_r+0x1cc>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0c6      	beq.n	8002cd6 <_vfiprintf_r+0x156>
 8002d48:	9105      	str	r1, [sp, #20]
 8002d4a:	e7c4      	b.n	8002cd6 <_vfiprintf_r+0x156>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	2301      	movs	r3, #1
 8002d50:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d54:	e7f0      	b.n	8002d38 <_vfiprintf_r+0x1b8>
 8002d56:	ab03      	add	r3, sp, #12
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <_vfiprintf_r+0x22c>)
 8002d60:	a904      	add	r1, sp, #16
 8002d62:	f3af 8000 	nop.w
 8002d66:	4607      	mov	r7, r0
 8002d68:	1c78      	adds	r0, r7, #1
 8002d6a:	d1d6      	bne.n	8002d1a <_vfiprintf_r+0x19a>
 8002d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d6e:	07d9      	lsls	r1, r3, #31
 8002d70:	d405      	bmi.n	8002d7e <_vfiprintf_r+0x1fe>
 8002d72:	89ab      	ldrh	r3, [r5, #12]
 8002d74:	059a      	lsls	r2, r3, #22
 8002d76:	d402      	bmi.n	8002d7e <_vfiprintf_r+0x1fe>
 8002d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d7a:	f7ff fc89 	bl	8002690 <__retarget_lock_release_recursive>
 8002d7e:	89ab      	ldrh	r3, [r5, #12]
 8002d80:	065b      	lsls	r3, r3, #25
 8002d82:	f53f af1f 	bmi.w	8002bc4 <_vfiprintf_r+0x44>
 8002d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d88:	e71e      	b.n	8002bc8 <_vfiprintf_r+0x48>
 8002d8a:	ab03      	add	r3, sp, #12
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	462a      	mov	r2, r5
 8002d90:	4630      	mov	r0, r6
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <_vfiprintf_r+0x22c>)
 8002d94:	a904      	add	r1, sp, #16
 8002d96:	f000 f87d 	bl	8002e94 <_printf_i>
 8002d9a:	e7e4      	b.n	8002d66 <_vfiprintf_r+0x1e6>
 8002d9c:	080035a2 	.word	0x080035a2
 8002da0:	080035a8 	.word	0x080035a8
 8002da4:	080035ac 	.word	0x080035ac
 8002da8:	00000000 	.word	0x00000000
 8002dac:	08002b5b 	.word	0x08002b5b

08002db0 <_printf_common>:
 8002db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db4:	4616      	mov	r6, r2
 8002db6:	4698      	mov	r8, r3
 8002db8:	688a      	ldr	r2, [r1, #8]
 8002dba:	690b      	ldr	r3, [r1, #16]
 8002dbc:	4607      	mov	r7, r0
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	bfb8      	it	lt
 8002dc2:	4613      	movlt	r3, r2
 8002dc4:	6033      	str	r3, [r6, #0]
 8002dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002dca:	460c      	mov	r4, r1
 8002dcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002dd0:	b10a      	cbz	r2, 8002dd6 <_printf_common+0x26>
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	6033      	str	r3, [r6, #0]
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	0699      	lsls	r1, r3, #26
 8002dda:	bf42      	ittt	mi
 8002ddc:	6833      	ldrmi	r3, [r6, #0]
 8002dde:	3302      	addmi	r3, #2
 8002de0:	6033      	strmi	r3, [r6, #0]
 8002de2:	6825      	ldr	r5, [r4, #0]
 8002de4:	f015 0506 	ands.w	r5, r5, #6
 8002de8:	d106      	bne.n	8002df8 <_printf_common+0x48>
 8002dea:	f104 0a19 	add.w	sl, r4, #25
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	6832      	ldr	r2, [r6, #0]
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	42ab      	cmp	r3, r5
 8002df6:	dc2b      	bgt.n	8002e50 <_printf_common+0xa0>
 8002df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	3b00      	subs	r3, #0
 8002e00:	bf18      	it	ne
 8002e02:	2301      	movne	r3, #1
 8002e04:	0692      	lsls	r2, r2, #26
 8002e06:	d430      	bmi.n	8002e6a <_printf_common+0xba>
 8002e08:	4641      	mov	r1, r8
 8002e0a:	4638      	mov	r0, r7
 8002e0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e10:	47c8      	blx	r9
 8002e12:	3001      	adds	r0, #1
 8002e14:	d023      	beq.n	8002e5e <_printf_common+0xae>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	6922      	ldr	r2, [r4, #16]
 8002e1a:	f003 0306 	and.w	r3, r3, #6
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf14      	ite	ne
 8002e22:	2500      	movne	r5, #0
 8002e24:	6833      	ldreq	r3, [r6, #0]
 8002e26:	f04f 0600 	mov.w	r6, #0
 8002e2a:	bf08      	it	eq
 8002e2c:	68e5      	ldreq	r5, [r4, #12]
 8002e2e:	f104 041a 	add.w	r4, r4, #26
 8002e32:	bf08      	it	eq
 8002e34:	1aed      	subeq	r5, r5, r3
 8002e36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002e3a:	bf08      	it	eq
 8002e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bfc4      	itt	gt
 8002e44:	1a9b      	subgt	r3, r3, r2
 8002e46:	18ed      	addgt	r5, r5, r3
 8002e48:	42b5      	cmp	r5, r6
 8002e4a:	d11a      	bne.n	8002e82 <_printf_common+0xd2>
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	e008      	b.n	8002e62 <_printf_common+0xb2>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4652      	mov	r2, sl
 8002e54:	4641      	mov	r1, r8
 8002e56:	4638      	mov	r0, r7
 8002e58:	47c8      	blx	r9
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d103      	bne.n	8002e66 <_printf_common+0xb6>
 8002e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e66:	3501      	adds	r5, #1
 8002e68:	e7c1      	b.n	8002dee <_printf_common+0x3e>
 8002e6a:	2030      	movs	r0, #48	@ 0x30
 8002e6c:	18e1      	adds	r1, r4, r3
 8002e6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e78:	4422      	add	r2, r4
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e80:	e7c2      	b.n	8002e08 <_printf_common+0x58>
 8002e82:	2301      	movs	r3, #1
 8002e84:	4622      	mov	r2, r4
 8002e86:	4641      	mov	r1, r8
 8002e88:	4638      	mov	r0, r7
 8002e8a:	47c8      	blx	r9
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d0e6      	beq.n	8002e5e <_printf_common+0xae>
 8002e90:	3601      	adds	r6, #1
 8002e92:	e7d9      	b.n	8002e48 <_printf_common+0x98>

08002e94 <_printf_i>:
 8002e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	7e0f      	ldrb	r7, [r1, #24]
 8002e9a:	4691      	mov	r9, r2
 8002e9c:	2f78      	cmp	r7, #120	@ 0x78
 8002e9e:	4680      	mov	r8, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	469a      	mov	sl, r3
 8002ea4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002eaa:	d807      	bhi.n	8002ebc <_printf_i+0x28>
 8002eac:	2f62      	cmp	r7, #98	@ 0x62
 8002eae:	d80a      	bhi.n	8002ec6 <_printf_i+0x32>
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	f000 80d3 	beq.w	800305c <_printf_i+0x1c8>
 8002eb6:	2f58      	cmp	r7, #88	@ 0x58
 8002eb8:	f000 80ba 	beq.w	8003030 <_printf_i+0x19c>
 8002ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ec4:	e03a      	b.n	8002f3c <_printf_i+0xa8>
 8002ec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002eca:	2b15      	cmp	r3, #21
 8002ecc:	d8f6      	bhi.n	8002ebc <_printf_i+0x28>
 8002ece:	a101      	add	r1, pc, #4	@ (adr r1, 8002ed4 <_printf_i+0x40>)
 8002ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002ebd 	.word	0x08002ebd
 8002ee0:	08002ebd 	.word	0x08002ebd
 8002ee4:	08002ebd 	.word	0x08002ebd
 8002ee8:	08002ebd 	.word	0x08002ebd
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002ebd 	.word	0x08002ebd
 8002ef4:	08002ebd 	.word	0x08002ebd
 8002ef8:	08002ebd 	.word	0x08002ebd
 8002efc:	08002ebd 	.word	0x08002ebd
 8002f00:	08003043 	.word	0x08003043
 8002f04:	08002f6b 	.word	0x08002f6b
 8002f08:	08002ffd 	.word	0x08002ffd
 8002f0c:	08002ebd 	.word	0x08002ebd
 8002f10:	08002ebd 	.word	0x08002ebd
 8002f14:	08003065 	.word	0x08003065
 8002f18:	08002ebd 	.word	0x08002ebd
 8002f1c:	08002f6b 	.word	0x08002f6b
 8002f20:	08002ebd 	.word	0x08002ebd
 8002f24:	08002ebd 	.word	0x08002ebd
 8002f28:	08003005 	.word	0x08003005
 8002f2c:	6833      	ldr	r3, [r6, #0]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6032      	str	r2, [r6, #0]
 8002f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e09e      	b.n	800307e <_printf_i+0x1ea>
 8002f40:	6833      	ldr	r3, [r6, #0]
 8002f42:	6820      	ldr	r0, [r4, #0]
 8002f44:	1d19      	adds	r1, r3, #4
 8002f46:	6031      	str	r1, [r6, #0]
 8002f48:	0606      	lsls	r6, r0, #24
 8002f4a:	d501      	bpl.n	8002f50 <_printf_i+0xbc>
 8002f4c:	681d      	ldr	r5, [r3, #0]
 8002f4e:	e003      	b.n	8002f58 <_printf_i+0xc4>
 8002f50:	0645      	lsls	r5, r0, #25
 8002f52:	d5fb      	bpl.n	8002f4c <_printf_i+0xb8>
 8002f54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	da03      	bge.n	8002f64 <_printf_i+0xd0>
 8002f5c:	232d      	movs	r3, #45	@ 0x2d
 8002f5e:	426d      	negs	r5, r5
 8002f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f64:	230a      	movs	r3, #10
 8002f66:	4859      	ldr	r0, [pc, #356]	@ (80030cc <_printf_i+0x238>)
 8002f68:	e011      	b.n	8002f8e <_printf_i+0xfa>
 8002f6a:	6821      	ldr	r1, [r4, #0]
 8002f6c:	6833      	ldr	r3, [r6, #0]
 8002f6e:	0608      	lsls	r0, r1, #24
 8002f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f74:	d402      	bmi.n	8002f7c <_printf_i+0xe8>
 8002f76:	0649      	lsls	r1, r1, #25
 8002f78:	bf48      	it	mi
 8002f7a:	b2ad      	uxthmi	r5, r5
 8002f7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f7e:	6033      	str	r3, [r6, #0]
 8002f80:	bf14      	ite	ne
 8002f82:	230a      	movne	r3, #10
 8002f84:	2308      	moveq	r3, #8
 8002f86:	4851      	ldr	r0, [pc, #324]	@ (80030cc <_printf_i+0x238>)
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f8e:	6866      	ldr	r6, [r4, #4]
 8002f90:	2e00      	cmp	r6, #0
 8002f92:	bfa8      	it	ge
 8002f94:	6821      	ldrge	r1, [r4, #0]
 8002f96:	60a6      	str	r6, [r4, #8]
 8002f98:	bfa4      	itt	ge
 8002f9a:	f021 0104 	bicge.w	r1, r1, #4
 8002f9e:	6021      	strge	r1, [r4, #0]
 8002fa0:	b90d      	cbnz	r5, 8002fa6 <_printf_i+0x112>
 8002fa2:	2e00      	cmp	r6, #0
 8002fa4:	d04b      	beq.n	800303e <_printf_i+0x1aa>
 8002fa6:	4616      	mov	r6, r2
 8002fa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fac:	fb03 5711 	mls	r7, r3, r1, r5
 8002fb0:	5dc7      	ldrb	r7, [r0, r7]
 8002fb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fb6:	462f      	mov	r7, r5
 8002fb8:	42bb      	cmp	r3, r7
 8002fba:	460d      	mov	r5, r1
 8002fbc:	d9f4      	bls.n	8002fa8 <_printf_i+0x114>
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d10b      	bne.n	8002fda <_printf_i+0x146>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	07df      	lsls	r7, r3, #31
 8002fc6:	d508      	bpl.n	8002fda <_printf_i+0x146>
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	6861      	ldr	r1, [r4, #4]
 8002fcc:	4299      	cmp	r1, r3
 8002fce:	bfde      	ittt	le
 8002fd0:	2330      	movle	r3, #48	@ 0x30
 8002fd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fda:	1b92      	subs	r2, r2, r6
 8002fdc:	6122      	str	r2, [r4, #16]
 8002fde:	464b      	mov	r3, r9
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	f8cd a000 	str.w	sl, [sp]
 8002fe8:	aa03      	add	r2, sp, #12
 8002fea:	f7ff fee1 	bl	8002db0 <_printf_common>
 8002fee:	3001      	adds	r0, #1
 8002ff0:	d14a      	bne.n	8003088 <_printf_i+0x1f4>
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff6:	b004      	add	sp, #16
 8002ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	f043 0320 	orr.w	r3, r3, #32
 8003002:	6023      	str	r3, [r4, #0]
 8003004:	2778      	movs	r7, #120	@ 0x78
 8003006:	4832      	ldr	r0, [pc, #200]	@ (80030d0 <_printf_i+0x23c>)
 8003008:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	6831      	ldr	r1, [r6, #0]
 8003010:	061f      	lsls	r7, r3, #24
 8003012:	f851 5b04 	ldr.w	r5, [r1], #4
 8003016:	d402      	bmi.n	800301e <_printf_i+0x18a>
 8003018:	065f      	lsls	r7, r3, #25
 800301a:	bf48      	it	mi
 800301c:	b2ad      	uxthmi	r5, r5
 800301e:	6031      	str	r1, [r6, #0]
 8003020:	07d9      	lsls	r1, r3, #31
 8003022:	bf44      	itt	mi
 8003024:	f043 0320 	orrmi.w	r3, r3, #32
 8003028:	6023      	strmi	r3, [r4, #0]
 800302a:	b11d      	cbz	r5, 8003034 <_printf_i+0x1a0>
 800302c:	2310      	movs	r3, #16
 800302e:	e7ab      	b.n	8002f88 <_printf_i+0xf4>
 8003030:	4826      	ldr	r0, [pc, #152]	@ (80030cc <_printf_i+0x238>)
 8003032:	e7e9      	b.n	8003008 <_printf_i+0x174>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	f023 0320 	bic.w	r3, r3, #32
 800303a:	6023      	str	r3, [r4, #0]
 800303c:	e7f6      	b.n	800302c <_printf_i+0x198>
 800303e:	4616      	mov	r6, r2
 8003040:	e7bd      	b.n	8002fbe <_printf_i+0x12a>
 8003042:	6833      	ldr	r3, [r6, #0]
 8003044:	6825      	ldr	r5, [r4, #0]
 8003046:	1d18      	adds	r0, r3, #4
 8003048:	6961      	ldr	r1, [r4, #20]
 800304a:	6030      	str	r0, [r6, #0]
 800304c:	062e      	lsls	r6, r5, #24
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	d501      	bpl.n	8003056 <_printf_i+0x1c2>
 8003052:	6019      	str	r1, [r3, #0]
 8003054:	e002      	b.n	800305c <_printf_i+0x1c8>
 8003056:	0668      	lsls	r0, r5, #25
 8003058:	d5fb      	bpl.n	8003052 <_printf_i+0x1be>
 800305a:	8019      	strh	r1, [r3, #0]
 800305c:	2300      	movs	r3, #0
 800305e:	4616      	mov	r6, r2
 8003060:	6123      	str	r3, [r4, #16]
 8003062:	e7bc      	b.n	8002fde <_printf_i+0x14a>
 8003064:	6833      	ldr	r3, [r6, #0]
 8003066:	2100      	movs	r1, #0
 8003068:	1d1a      	adds	r2, r3, #4
 800306a:	6032      	str	r2, [r6, #0]
 800306c:	681e      	ldr	r6, [r3, #0]
 800306e:	6862      	ldr	r2, [r4, #4]
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f995 	bl	80033a0 <memchr>
 8003076:	b108      	cbz	r0, 800307c <_printf_i+0x1e8>
 8003078:	1b80      	subs	r0, r0, r6
 800307a:	6060      	str	r0, [r4, #4]
 800307c:	6863      	ldr	r3, [r4, #4]
 800307e:	6123      	str	r3, [r4, #16]
 8003080:	2300      	movs	r3, #0
 8003082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003086:	e7aa      	b.n	8002fde <_printf_i+0x14a>
 8003088:	4632      	mov	r2, r6
 800308a:	4649      	mov	r1, r9
 800308c:	4640      	mov	r0, r8
 800308e:	6923      	ldr	r3, [r4, #16]
 8003090:	47d0      	blx	sl
 8003092:	3001      	adds	r0, #1
 8003094:	d0ad      	beq.n	8002ff2 <_printf_i+0x15e>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	079b      	lsls	r3, r3, #30
 800309a:	d413      	bmi.n	80030c4 <_printf_i+0x230>
 800309c:	68e0      	ldr	r0, [r4, #12]
 800309e:	9b03      	ldr	r3, [sp, #12]
 80030a0:	4298      	cmp	r0, r3
 80030a2:	bfb8      	it	lt
 80030a4:	4618      	movlt	r0, r3
 80030a6:	e7a6      	b.n	8002ff6 <_printf_i+0x162>
 80030a8:	2301      	movs	r3, #1
 80030aa:	4632      	mov	r2, r6
 80030ac:	4649      	mov	r1, r9
 80030ae:	4640      	mov	r0, r8
 80030b0:	47d0      	blx	sl
 80030b2:	3001      	adds	r0, #1
 80030b4:	d09d      	beq.n	8002ff2 <_printf_i+0x15e>
 80030b6:	3501      	adds	r5, #1
 80030b8:	68e3      	ldr	r3, [r4, #12]
 80030ba:	9903      	ldr	r1, [sp, #12]
 80030bc:	1a5b      	subs	r3, r3, r1
 80030be:	42ab      	cmp	r3, r5
 80030c0:	dcf2      	bgt.n	80030a8 <_printf_i+0x214>
 80030c2:	e7eb      	b.n	800309c <_printf_i+0x208>
 80030c4:	2500      	movs	r5, #0
 80030c6:	f104 0619 	add.w	r6, r4, #25
 80030ca:	e7f5      	b.n	80030b8 <_printf_i+0x224>
 80030cc:	080035b3 	.word	0x080035b3
 80030d0:	080035c4 	.word	0x080035c4

080030d4 <__sflush_r>:
 80030d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	0716      	lsls	r6, r2, #28
 80030dc:	4605      	mov	r5, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	d454      	bmi.n	800318c <__sflush_r+0xb8>
 80030e2:	684b      	ldr	r3, [r1, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dc02      	bgt.n	80030ee <__sflush_r+0x1a>
 80030e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	dd48      	ble.n	8003180 <__sflush_r+0xac>
 80030ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	d045      	beq.n	8003180 <__sflush_r+0xac>
 80030f4:	2300      	movs	r3, #0
 80030f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80030fa:	682f      	ldr	r7, [r5, #0]
 80030fc:	6a21      	ldr	r1, [r4, #32]
 80030fe:	602b      	str	r3, [r5, #0]
 8003100:	d030      	beq.n	8003164 <__sflush_r+0x90>
 8003102:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	0759      	lsls	r1, r3, #29
 8003108:	d505      	bpl.n	8003116 <__sflush_r+0x42>
 800310a:	6863      	ldr	r3, [r4, #4]
 800310c:	1ad2      	subs	r2, r2, r3
 800310e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003110:	b10b      	cbz	r3, 8003116 <__sflush_r+0x42>
 8003112:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003114:	1ad2      	subs	r2, r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	4628      	mov	r0, r5
 800311a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800311c:	6a21      	ldr	r1, [r4, #32]
 800311e:	47b0      	blx	r6
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	d106      	bne.n	8003134 <__sflush_r+0x60>
 8003126:	6829      	ldr	r1, [r5, #0]
 8003128:	291d      	cmp	r1, #29
 800312a:	d82b      	bhi.n	8003184 <__sflush_r+0xb0>
 800312c:	4a28      	ldr	r2, [pc, #160]	@ (80031d0 <__sflush_r+0xfc>)
 800312e:	410a      	asrs	r2, r1
 8003130:	07d6      	lsls	r6, r2, #31
 8003132:	d427      	bmi.n	8003184 <__sflush_r+0xb0>
 8003134:	2200      	movs	r2, #0
 8003136:	6062      	str	r2, [r4, #4]
 8003138:	6922      	ldr	r2, [r4, #16]
 800313a:	04d9      	lsls	r1, r3, #19
 800313c:	6022      	str	r2, [r4, #0]
 800313e:	d504      	bpl.n	800314a <__sflush_r+0x76>
 8003140:	1c42      	adds	r2, r0, #1
 8003142:	d101      	bne.n	8003148 <__sflush_r+0x74>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b903      	cbnz	r3, 800314a <__sflush_r+0x76>
 8003148:	6560      	str	r0, [r4, #84]	@ 0x54
 800314a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800314c:	602f      	str	r7, [r5, #0]
 800314e:	b1b9      	cbz	r1, 8003180 <__sflush_r+0xac>
 8003150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003154:	4299      	cmp	r1, r3
 8003156:	d002      	beq.n	800315e <__sflush_r+0x8a>
 8003158:	4628      	mov	r0, r5
 800315a:	f7ff fa9b 	bl	8002694 <_free_r>
 800315e:	2300      	movs	r3, #0
 8003160:	6363      	str	r3, [r4, #52]	@ 0x34
 8003162:	e00d      	b.n	8003180 <__sflush_r+0xac>
 8003164:	2301      	movs	r3, #1
 8003166:	4628      	mov	r0, r5
 8003168:	47b0      	blx	r6
 800316a:	4602      	mov	r2, r0
 800316c:	1c50      	adds	r0, r2, #1
 800316e:	d1c9      	bne.n	8003104 <__sflush_r+0x30>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0c6      	beq.n	8003104 <__sflush_r+0x30>
 8003176:	2b1d      	cmp	r3, #29
 8003178:	d001      	beq.n	800317e <__sflush_r+0xaa>
 800317a:	2b16      	cmp	r3, #22
 800317c:	d11d      	bne.n	80031ba <__sflush_r+0xe6>
 800317e:	602f      	str	r7, [r5, #0]
 8003180:	2000      	movs	r0, #0
 8003182:	e021      	b.n	80031c8 <__sflush_r+0xf4>
 8003184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003188:	b21b      	sxth	r3, r3
 800318a:	e01a      	b.n	80031c2 <__sflush_r+0xee>
 800318c:	690f      	ldr	r7, [r1, #16]
 800318e:	2f00      	cmp	r7, #0
 8003190:	d0f6      	beq.n	8003180 <__sflush_r+0xac>
 8003192:	0793      	lsls	r3, r2, #30
 8003194:	bf18      	it	ne
 8003196:	2300      	movne	r3, #0
 8003198:	680e      	ldr	r6, [r1, #0]
 800319a:	bf08      	it	eq
 800319c:	694b      	ldreq	r3, [r1, #20]
 800319e:	1bf6      	subs	r6, r6, r7
 80031a0:	600f      	str	r7, [r1, #0]
 80031a2:	608b      	str	r3, [r1, #8]
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	ddeb      	ble.n	8003180 <__sflush_r+0xac>
 80031a8:	4633      	mov	r3, r6
 80031aa:	463a      	mov	r2, r7
 80031ac:	4628      	mov	r0, r5
 80031ae:	6a21      	ldr	r1, [r4, #32]
 80031b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80031b4:	47e0      	blx	ip
 80031b6:	2800      	cmp	r0, #0
 80031b8:	dc07      	bgt.n	80031ca <__sflush_r+0xf6>
 80031ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ca:	4407      	add	r7, r0
 80031cc:	1a36      	subs	r6, r6, r0
 80031ce:	e7e9      	b.n	80031a4 <__sflush_r+0xd0>
 80031d0:	dfbffffe 	.word	0xdfbffffe

080031d4 <_fflush_r>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	690b      	ldr	r3, [r1, #16]
 80031d8:	4605      	mov	r5, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	b913      	cbnz	r3, 80031e4 <_fflush_r+0x10>
 80031de:	2500      	movs	r5, #0
 80031e0:	4628      	mov	r0, r5
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	b118      	cbz	r0, 80031ee <_fflush_r+0x1a>
 80031e6:	6a03      	ldr	r3, [r0, #32]
 80031e8:	b90b      	cbnz	r3, 80031ee <_fflush_r+0x1a>
 80031ea:	f7ff f92b 	bl	8002444 <__sinit>
 80031ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f3      	beq.n	80031de <_fflush_r+0xa>
 80031f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80031f8:	07d0      	lsls	r0, r2, #31
 80031fa:	d404      	bmi.n	8003206 <_fflush_r+0x32>
 80031fc:	0599      	lsls	r1, r3, #22
 80031fe:	d402      	bmi.n	8003206 <_fflush_r+0x32>
 8003200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003202:	f7ff fa44 	bl	800268e <__retarget_lock_acquire_recursive>
 8003206:	4628      	mov	r0, r5
 8003208:	4621      	mov	r1, r4
 800320a:	f7ff ff63 	bl	80030d4 <__sflush_r>
 800320e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003210:	4605      	mov	r5, r0
 8003212:	07da      	lsls	r2, r3, #31
 8003214:	d4e4      	bmi.n	80031e0 <_fflush_r+0xc>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	059b      	lsls	r3, r3, #22
 800321a:	d4e1      	bmi.n	80031e0 <_fflush_r+0xc>
 800321c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800321e:	f7ff fa37 	bl	8002690 <__retarget_lock_release_recursive>
 8003222:	e7dd      	b.n	80031e0 <_fflush_r+0xc>

08003224 <__swbuf_r>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	460e      	mov	r6, r1
 8003228:	4614      	mov	r4, r2
 800322a:	4605      	mov	r5, r0
 800322c:	b118      	cbz	r0, 8003236 <__swbuf_r+0x12>
 800322e:	6a03      	ldr	r3, [r0, #32]
 8003230:	b90b      	cbnz	r3, 8003236 <__swbuf_r+0x12>
 8003232:	f7ff f907 	bl	8002444 <__sinit>
 8003236:	69a3      	ldr	r3, [r4, #24]
 8003238:	60a3      	str	r3, [r4, #8]
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	071a      	lsls	r2, r3, #28
 800323e:	d501      	bpl.n	8003244 <__swbuf_r+0x20>
 8003240:	6923      	ldr	r3, [r4, #16]
 8003242:	b943      	cbnz	r3, 8003256 <__swbuf_r+0x32>
 8003244:	4621      	mov	r1, r4
 8003246:	4628      	mov	r0, r5
 8003248:	f000 f82a 	bl	80032a0 <__swsetup_r>
 800324c:	b118      	cbz	r0, 8003256 <__swbuf_r+0x32>
 800324e:	f04f 37ff 	mov.w	r7, #4294967295
 8003252:	4638      	mov	r0, r7
 8003254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	6922      	ldr	r2, [r4, #16]
 800325a:	b2f6      	uxtb	r6, r6
 800325c:	1a98      	subs	r0, r3, r2
 800325e:	6963      	ldr	r3, [r4, #20]
 8003260:	4637      	mov	r7, r6
 8003262:	4283      	cmp	r3, r0
 8003264:	dc05      	bgt.n	8003272 <__swbuf_r+0x4e>
 8003266:	4621      	mov	r1, r4
 8003268:	4628      	mov	r0, r5
 800326a:	f7ff ffb3 	bl	80031d4 <_fflush_r>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1ed      	bne.n	800324e <__swbuf_r+0x2a>
 8003272:	68a3      	ldr	r3, [r4, #8]
 8003274:	3b01      	subs	r3, #1
 8003276:	60a3      	str	r3, [r4, #8]
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	6022      	str	r2, [r4, #0]
 800327e:	701e      	strb	r6, [r3, #0]
 8003280:	6962      	ldr	r2, [r4, #20]
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	429a      	cmp	r2, r3
 8003286:	d004      	beq.n	8003292 <__swbuf_r+0x6e>
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	07db      	lsls	r3, r3, #31
 800328c:	d5e1      	bpl.n	8003252 <__swbuf_r+0x2e>
 800328e:	2e0a      	cmp	r6, #10
 8003290:	d1df      	bne.n	8003252 <__swbuf_r+0x2e>
 8003292:	4621      	mov	r1, r4
 8003294:	4628      	mov	r0, r5
 8003296:	f7ff ff9d 	bl	80031d4 <_fflush_r>
 800329a:	2800      	cmp	r0, #0
 800329c:	d0d9      	beq.n	8003252 <__swbuf_r+0x2e>
 800329e:	e7d6      	b.n	800324e <__swbuf_r+0x2a>

080032a0 <__swsetup_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <__swsetup_r+0xa8>)
 80032a4:	4605      	mov	r5, r0
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	460c      	mov	r4, r1
 80032aa:	b118      	cbz	r0, 80032b4 <__swsetup_r+0x14>
 80032ac:	6a03      	ldr	r3, [r0, #32]
 80032ae:	b90b      	cbnz	r3, 80032b4 <__swsetup_r+0x14>
 80032b0:	f7ff f8c8 	bl	8002444 <__sinit>
 80032b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b8:	0719      	lsls	r1, r3, #28
 80032ba:	d422      	bmi.n	8003302 <__swsetup_r+0x62>
 80032bc:	06da      	lsls	r2, r3, #27
 80032be:	d407      	bmi.n	80032d0 <__swsetup_r+0x30>
 80032c0:	2209      	movs	r2, #9
 80032c2:	602a      	str	r2, [r5, #0]
 80032c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	e033      	b.n	8003338 <__swsetup_r+0x98>
 80032d0:	0758      	lsls	r0, r3, #29
 80032d2:	d512      	bpl.n	80032fa <__swsetup_r+0x5a>
 80032d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032d6:	b141      	cbz	r1, 80032ea <__swsetup_r+0x4a>
 80032d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032dc:	4299      	cmp	r1, r3
 80032de:	d002      	beq.n	80032e6 <__swsetup_r+0x46>
 80032e0:	4628      	mov	r0, r5
 80032e2:	f7ff f9d7 	bl	8002694 <_free_r>
 80032e6:	2300      	movs	r3, #0
 80032e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	2300      	movs	r3, #0
 80032f4:	6063      	str	r3, [r4, #4]
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	b94b      	cbnz	r3, 800331a <__swsetup_r+0x7a>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800330c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003310:	d003      	beq.n	800331a <__swsetup_r+0x7a>
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 f8b2 	bl	800347e <__smakebuf_r>
 800331a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331e:	f013 0201 	ands.w	r2, r3, #1
 8003322:	d00a      	beq.n	800333a <__swsetup_r+0x9a>
 8003324:	2200      	movs	r2, #0
 8003326:	60a2      	str	r2, [r4, #8]
 8003328:	6962      	ldr	r2, [r4, #20]
 800332a:	4252      	negs	r2, r2
 800332c:	61a2      	str	r2, [r4, #24]
 800332e:	6922      	ldr	r2, [r4, #16]
 8003330:	b942      	cbnz	r2, 8003344 <__swsetup_r+0xa4>
 8003332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003336:	d1c5      	bne.n	80032c4 <__swsetup_r+0x24>
 8003338:	bd38      	pop	{r3, r4, r5, pc}
 800333a:	0799      	lsls	r1, r3, #30
 800333c:	bf58      	it	pl
 800333e:	6962      	ldrpl	r2, [r4, #20]
 8003340:	60a2      	str	r2, [r4, #8]
 8003342:	e7f4      	b.n	800332e <__swsetup_r+0x8e>
 8003344:	2000      	movs	r0, #0
 8003346:	e7f7      	b.n	8003338 <__swsetup_r+0x98>
 8003348:	20000018 	.word	0x20000018

0800334c <memmove>:
 800334c:	4288      	cmp	r0, r1
 800334e:	b510      	push	{r4, lr}
 8003350:	eb01 0402 	add.w	r4, r1, r2
 8003354:	d902      	bls.n	800335c <memmove+0x10>
 8003356:	4284      	cmp	r4, r0
 8003358:	4623      	mov	r3, r4
 800335a:	d807      	bhi.n	800336c <memmove+0x20>
 800335c:	1e43      	subs	r3, r0, #1
 800335e:	42a1      	cmp	r1, r4
 8003360:	d008      	beq.n	8003374 <memmove+0x28>
 8003362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800336a:	e7f8      	b.n	800335e <memmove+0x12>
 800336c:	4601      	mov	r1, r0
 800336e:	4402      	add	r2, r0
 8003370:	428a      	cmp	r2, r1
 8003372:	d100      	bne.n	8003376 <memmove+0x2a>
 8003374:	bd10      	pop	{r4, pc}
 8003376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800337a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800337e:	e7f7      	b.n	8003370 <memmove+0x24>

08003380 <_sbrk_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	@ (800339c <_sbrk_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fb90 	bl	8000ab0 <_sbrk>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_sbrk_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_sbrk_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000294 	.word	0x20000294

080033a0 <memchr>:
 80033a0:	4603      	mov	r3, r0
 80033a2:	b510      	push	{r4, lr}
 80033a4:	b2c9      	uxtb	r1, r1
 80033a6:	4402      	add	r2, r0
 80033a8:	4293      	cmp	r3, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	d101      	bne.n	80033b2 <memchr+0x12>
 80033ae:	2000      	movs	r0, #0
 80033b0:	e003      	b.n	80033ba <memchr+0x1a>
 80033b2:	7804      	ldrb	r4, [r0, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	428c      	cmp	r4, r1
 80033b8:	d1f6      	bne.n	80033a8 <memchr+0x8>
 80033ba:	bd10      	pop	{r4, pc}

080033bc <memcpy>:
 80033bc:	440a      	add	r2, r1
 80033be:	4291      	cmp	r1, r2
 80033c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80033c4:	d100      	bne.n	80033c8 <memcpy+0xc>
 80033c6:	4770      	bx	lr
 80033c8:	b510      	push	{r4, lr}
 80033ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ce:	4291      	cmp	r1, r2
 80033d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033d4:	d1f9      	bne.n	80033ca <memcpy+0xe>
 80033d6:	bd10      	pop	{r4, pc}

080033d8 <_realloc_r>:
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	4680      	mov	r8, r0
 80033de:	4615      	mov	r5, r2
 80033e0:	460c      	mov	r4, r1
 80033e2:	b921      	cbnz	r1, 80033ee <_realloc_r+0x16>
 80033e4:	4611      	mov	r1, r2
 80033e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ea:	f7ff b9bd 	b.w	8002768 <_malloc_r>
 80033ee:	b92a      	cbnz	r2, 80033fc <_realloc_r+0x24>
 80033f0:	f7ff f950 	bl	8002694 <_free_r>
 80033f4:	2400      	movs	r4, #0
 80033f6:	4620      	mov	r0, r4
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fc:	f000 f89e 	bl	800353c <_malloc_usable_size_r>
 8003400:	4285      	cmp	r5, r0
 8003402:	4606      	mov	r6, r0
 8003404:	d802      	bhi.n	800340c <_realloc_r+0x34>
 8003406:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800340a:	d8f4      	bhi.n	80033f6 <_realloc_r+0x1e>
 800340c:	4629      	mov	r1, r5
 800340e:	4640      	mov	r0, r8
 8003410:	f7ff f9aa 	bl	8002768 <_malloc_r>
 8003414:	4607      	mov	r7, r0
 8003416:	2800      	cmp	r0, #0
 8003418:	d0ec      	beq.n	80033f4 <_realloc_r+0x1c>
 800341a:	42b5      	cmp	r5, r6
 800341c:	462a      	mov	r2, r5
 800341e:	4621      	mov	r1, r4
 8003420:	bf28      	it	cs
 8003422:	4632      	movcs	r2, r6
 8003424:	f7ff ffca 	bl	80033bc <memcpy>
 8003428:	4621      	mov	r1, r4
 800342a:	4640      	mov	r0, r8
 800342c:	f7ff f932 	bl	8002694 <_free_r>
 8003430:	463c      	mov	r4, r7
 8003432:	e7e0      	b.n	80033f6 <_realloc_r+0x1e>

08003434 <__swhatbuf_r>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	460c      	mov	r4, r1
 8003438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800343c:	4615      	mov	r5, r2
 800343e:	2900      	cmp	r1, #0
 8003440:	461e      	mov	r6, r3
 8003442:	b096      	sub	sp, #88	@ 0x58
 8003444:	da0c      	bge.n	8003460 <__swhatbuf_r+0x2c>
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	2100      	movs	r1, #0
 800344a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800344e:	bf14      	ite	ne
 8003450:	2340      	movne	r3, #64	@ 0x40
 8003452:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003456:	2000      	movs	r0, #0
 8003458:	6031      	str	r1, [r6, #0]
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	b016      	add	sp, #88	@ 0x58
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	466a      	mov	r2, sp
 8003462:	f000 f849 	bl	80034f8 <_fstat_r>
 8003466:	2800      	cmp	r0, #0
 8003468:	dbed      	blt.n	8003446 <__swhatbuf_r+0x12>
 800346a:	9901      	ldr	r1, [sp, #4]
 800346c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003470:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003474:	4259      	negs	r1, r3
 8003476:	4159      	adcs	r1, r3
 8003478:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800347c:	e7eb      	b.n	8003456 <__swhatbuf_r+0x22>

0800347e <__smakebuf_r>:
 800347e:	898b      	ldrh	r3, [r1, #12]
 8003480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003482:	079d      	lsls	r5, r3, #30
 8003484:	4606      	mov	r6, r0
 8003486:	460c      	mov	r4, r1
 8003488:	d507      	bpl.n	800349a <__smakebuf_r+0x1c>
 800348a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	6123      	str	r3, [r4, #16]
 8003492:	2301      	movs	r3, #1
 8003494:	6163      	str	r3, [r4, #20]
 8003496:	b003      	add	sp, #12
 8003498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349a:	466a      	mov	r2, sp
 800349c:	ab01      	add	r3, sp, #4
 800349e:	f7ff ffc9 	bl	8003434 <__swhatbuf_r>
 80034a2:	9f00      	ldr	r7, [sp, #0]
 80034a4:	4605      	mov	r5, r0
 80034a6:	4639      	mov	r1, r7
 80034a8:	4630      	mov	r0, r6
 80034aa:	f7ff f95d 	bl	8002768 <_malloc_r>
 80034ae:	b948      	cbnz	r0, 80034c4 <__smakebuf_r+0x46>
 80034b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b4:	059a      	lsls	r2, r3, #22
 80034b6:	d4ee      	bmi.n	8003496 <__smakebuf_r+0x18>
 80034b8:	f023 0303 	bic.w	r3, r3, #3
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	e7e2      	b.n	800348a <__smakebuf_r+0xc>
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80034ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ce:	81a3      	strh	r3, [r4, #12]
 80034d0:	9b01      	ldr	r3, [sp, #4]
 80034d2:	6020      	str	r0, [r4, #0]
 80034d4:	b15b      	cbz	r3, 80034ee <__smakebuf_r+0x70>
 80034d6:	4630      	mov	r0, r6
 80034d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034dc:	f000 f81e 	bl	800351c <_isatty_r>
 80034e0:	b128      	cbz	r0, 80034ee <__smakebuf_r+0x70>
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f023 0303 	bic.w	r3, r3, #3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	431d      	orrs	r5, r3
 80034f2:	81a5      	strh	r5, [r4, #12]
 80034f4:	e7cf      	b.n	8003496 <__smakebuf_r+0x18>
	...

080034f8 <_fstat_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	2300      	movs	r3, #0
 80034fc:	4d06      	ldr	r5, [pc, #24]	@ (8003518 <_fstat_r+0x20>)
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	602b      	str	r3, [r5, #0]
 8003506:	f7fd faad 	bl	8000a64 <_fstat>
 800350a:	1c43      	adds	r3, r0, #1
 800350c:	d102      	bne.n	8003514 <_fstat_r+0x1c>
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	b103      	cbz	r3, 8003514 <_fstat_r+0x1c>
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	bd38      	pop	{r3, r4, r5, pc}
 8003516:	bf00      	nop
 8003518:	20000294 	.word	0x20000294

0800351c <_isatty_r>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	2300      	movs	r3, #0
 8003520:	4d05      	ldr	r5, [pc, #20]	@ (8003538 <_isatty_r+0x1c>)
 8003522:	4604      	mov	r4, r0
 8003524:	4608      	mov	r0, r1
 8003526:	602b      	str	r3, [r5, #0]
 8003528:	f7fd faab 	bl	8000a82 <_isatty>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d102      	bne.n	8003536 <_isatty_r+0x1a>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	b103      	cbz	r3, 8003536 <_isatty_r+0x1a>
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	20000294 	.word	0x20000294

0800353c <_malloc_usable_size_r>:
 800353c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003540:	1f18      	subs	r0, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	bfbc      	itt	lt
 8003546:	580b      	ldrlt	r3, [r1, r0]
 8003548:	18c0      	addlt	r0, r0, r3
 800354a:	4770      	bx	lr

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
