
Lab06_ActuatorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800486c  0800486c  00006030  2**0
                  CONTENTS
  4 .ARM          00000000  0800486c  0800486c  00006030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800486c  0800486c  00006030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08004874  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000030  080048a4  00006030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080048a4  0000624c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee4e  00000000  00000000  00006059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002868  00000000  00000000  00014ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00017710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae7  00000000  00000000  00018530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a21  00000000  00000000  00019017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115b0  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca3b  00000000  00000000  00042fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfa23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  000cfa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000d3530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	08004828 	.word	0x08004828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	08004828 	.word	0x08004828

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_frsub>:
 800076c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000770:	e002      	b.n	8000778 <__addsf3>
 8000772:	bf00      	nop

08000774 <__aeabi_fsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000778 <__addsf3>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	bf1f      	itttt	ne
 800077c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000780:	ea92 0f03 	teqne	r2, r3
 8000784:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000788:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078c:	d06a      	beq.n	8000864 <__addsf3+0xec>
 800078e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000792:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000796:	bfc1      	itttt	gt
 8000798:	18d2      	addgt	r2, r2, r3
 800079a:	4041      	eorgt	r1, r0
 800079c:	4048      	eorgt	r0, r1
 800079e:	4041      	eorgt	r1, r0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	2b19      	cmp	r3, #25
 80007a6:	bf88      	it	hi
 80007a8:	4770      	bxhi	lr
 80007aa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4240      	negne	r0, r0
 80007ba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007be:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007c2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4249      	negne	r1, r1
 80007ca:	ea92 0f03 	teq	r2, r3
 80007ce:	d03f      	beq.n	8000850 <__addsf3+0xd8>
 80007d0:	f1a2 0201 	sub.w	r2, r2, #1
 80007d4:	fa41 fc03 	asr.w	ip, r1, r3
 80007d8:	eb10 000c 	adds.w	r0, r0, ip
 80007dc:	f1c3 0320 	rsb	r3, r3, #32
 80007e0:	fa01 f103 	lsl.w	r1, r1, r3
 80007e4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__addsf3+0x78>
 80007ea:	4249      	negs	r1, r1
 80007ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007f4:	d313      	bcc.n	800081e <__addsf3+0xa6>
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007fa:	d306      	bcc.n	800080a <__addsf3+0x92>
 80007fc:	0840      	lsrs	r0, r0, #1
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	f102 0201 	add.w	r2, r2, #1
 8000806:	2afe      	cmp	r2, #254	@ 0xfe
 8000808:	d251      	bcs.n	80008ae <__addsf3+0x136>
 800080a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800080e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000812:	bf08      	it	eq
 8000814:	f020 0001 	biceq.w	r0, r0, #1
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	4770      	bx	lr
 800081e:	0049      	lsls	r1, r1, #1
 8000820:	eb40 0000 	adc.w	r0, r0, r0
 8000824:	3a01      	subs	r2, #1
 8000826:	bf28      	it	cs
 8000828:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800082c:	d2ed      	bcs.n	800080a <__addsf3+0x92>
 800082e:	fab0 fc80 	clz	ip, r0
 8000832:	f1ac 0c08 	sub.w	ip, ip, #8
 8000836:	ebb2 020c 	subs.w	r2, r2, ip
 800083a:	fa00 f00c 	lsl.w	r0, r0, ip
 800083e:	bfaa      	itet	ge
 8000840:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000844:	4252      	neglt	r2, r2
 8000846:	4318      	orrge	r0, r3
 8000848:	bfbc      	itt	lt
 800084a:	40d0      	lsrlt	r0, r2
 800084c:	4318      	orrlt	r0, r3
 800084e:	4770      	bx	lr
 8000850:	f092 0f00 	teq	r2, #0
 8000854:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000858:	bf06      	itte	eq
 800085a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800085e:	3201      	addeq	r2, #1
 8000860:	3b01      	subne	r3, #1
 8000862:	e7b5      	b.n	80007d0 <__addsf3+0x58>
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d021      	beq.n	80008b8 <__addsf3+0x140>
 8000874:	ea92 0f03 	teq	r2, r3
 8000878:	d004      	beq.n	8000884 <__addsf3+0x10c>
 800087a:	f092 0f00 	teq	r2, #0
 800087e:	bf08      	it	eq
 8000880:	4608      	moveq	r0, r1
 8000882:	4770      	bx	lr
 8000884:	ea90 0f01 	teq	r0, r1
 8000888:	bf1c      	itt	ne
 800088a:	2000      	movne	r0, #0
 800088c:	4770      	bxne	lr
 800088e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000892:	d104      	bne.n	800089e <__addsf3+0x126>
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	bf28      	it	cs
 8000898:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008a2:	bf3c      	itt	cc
 80008a4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008a8:	4770      	bxcc	lr
 80008aa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008ae:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008b6:	4770      	bx	lr
 80008b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008bc:	bf16      	itet	ne
 80008be:	4608      	movne	r0, r1
 80008c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c4:	4601      	movne	r1, r0
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	bf06      	itte	eq
 80008ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ce:	ea90 0f01 	teqeq	r0, r1
 80008d2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_ui2f>:
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e004      	b.n	80008e8 <__aeabi_i2f+0x8>
 80008de:	bf00      	nop

080008e0 <__aeabi_i2f>:
 80008e0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008e4:	bf48      	it	mi
 80008e6:	4240      	negmi	r0, r0
 80008e8:	ea5f 0c00 	movs.w	ip, r0
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008f4:	4601      	mov	r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	e01c      	b.n	8000936 <__aeabi_l2f+0x2a>

080008fc <__aeabi_ul2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e00a      	b.n	8000920 <__aeabi_l2f+0x14>
 800090a:	bf00      	nop

0800090c <__aeabi_l2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000918:	d502      	bpl.n	8000920 <__aeabi_l2f+0x14>
 800091a:	4240      	negs	r0, r0
 800091c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000920:	ea5f 0c01 	movs.w	ip, r1
 8000924:	bf02      	ittt	eq
 8000926:	4684      	moveq	ip, r0
 8000928:	4601      	moveq	r1, r0
 800092a:	2000      	moveq	r0, #0
 800092c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000930:	bf08      	it	eq
 8000932:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000936:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800093a:	fabc f28c 	clz	r2, ip
 800093e:	3a08      	subs	r2, #8
 8000940:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000944:	db10      	blt.n	8000968 <__aeabi_l2f+0x5c>
 8000946:	fa01 fc02 	lsl.w	ip, r1, r2
 800094a:	4463      	add	r3, ip
 800094c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000950:	f1c2 0220 	rsb	r2, r2, #32
 8000954:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000958:	fa20 f202 	lsr.w	r2, r0, r2
 800095c:	eb43 0002 	adc.w	r0, r3, r2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f102 0220 	add.w	r2, r2, #32
 800096c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000970:	f1c2 0220 	rsb	r2, r2, #32
 8000974:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000978:	fa21 f202 	lsr.w	r2, r1, r2
 800097c:	eb43 0002 	adc.w	r0, r3, r2
 8000980:	bf08      	it	eq
 8000982:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000986:	4770      	bx	lr

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009da:	2afd      	cmp	r2, #253	@ 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	@ 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	@ 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	@ 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <__aeabi_f2uiz>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	d20e      	bcs.n	8000c4a <__aeabi_f2uiz+0x22>
 8000c2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c30:	d30b      	bcc.n	8000c4a <__aeabi_f2uiz+0x22>
 8000c32:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3a:	d409      	bmi.n	8000c50 <__aeabi_f2uiz+0x28>
 8000c3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c44:	fa23 f002 	lsr.w	r0, r3, r2
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr
 8000c50:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c54:	d101      	bne.n	8000c5a <__aeabi_f2uiz+0x32>
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	d102      	bne.n	8000c60 <__aeabi_f2uiz+0x38>
 8000c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <CAN_ComInit_Std>:
CAN_RxHeaderTypeDef RxHeader;
CAN_FilterTypeDef canfilterconfig;
uint8_t RxData[8];

void CAN_ComInit_Std(CAN_TxHeaderTypeDef *Tx_Header, CAN_HandleTypeDef *hcan, uint32_t id, uint8_t dlc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	70fb      	strb	r3, [r7, #3]
	Tx_Header->IDE = CAN_ID_STD;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
	Tx_Header->DLC = dlc;
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	611a      	str	r2, [r3, #16]
	Tx_Header->StdId = id;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]
	Tx_Header->RTR = CAN_RTR_DATA;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
	HAL_CAN_Start(hcan);
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f001 f986 	bl	8001fa0 <HAL_CAN_Start>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <CAN_FilterInit_SingleFF0>:

void CAN_FilterInit_SingleFF0(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *canfilterconfig, uint32_t addr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	canfilterconfig->FilterActivation = CAN_FILTER_ENABLE;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2201      	movs	r2, #1
 8000cac:	621a      	str	r2, [r3, #32]
	canfilterconfig->FilterBank = 0;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
	canfilterconfig->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
	canfilterconfig->FilterIdHigh = addr << 5;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	015a      	lsls	r2, r3, #5
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	601a      	str	r2, [r3, #0]
	canfilterconfig->FilterIdLow = 0x0000;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
	canfilterconfig->FilterMaskIdHigh = addr << 5;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	015a      	lsls	r2, r3, #5
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	609a      	str	r2, [r3, #8]
	canfilterconfig->FilterMaskIdLow = 0x0000;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
	canfilterconfig->FilterMode = CAN_FILTERMODE_IDMASK;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
	canfilterconfig->FilterScale = CAN_FILTERSCALE_32BIT;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(hcan, canfilterconfig);
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f001 f892 	bl	8001e0e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cea:	2102      	movs	r1, #2
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f001 fb8b 	bl	8002408 <HAL_CAN_ActivateNotification>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <CAN_Transmit>:

uint32_t CAN_Transmit(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *Tx_Header, uint8_t* buffer)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	HAL_CAN_AddTxMessage(hcan, Tx_Header, buffer, &Mailbox);
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <CAN_Transmit+0x24>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f001 f98a 	bl	8002028 <HAL_CAN_AddTxMessage>
	return Mailbox;
 8000d14:	4b02      	ldr	r3, [pc, #8]	@ (8000d20 <CAN_Transmit+0x24>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000064 	.word	0x20000064

08000d24 <Start_Motor>:

#include "MOTOR.h"

void Start_Motor()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	480a      	ldr	r0, [pc, #40]	@ (8000d54 <Start_Motor+0x30>)
 8000d2c:	f002 fd16 	bl	800375c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d30:	210c      	movs	r1, #12
 8000d32:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <Start_Motor+0x30>)
 8000d34:	f002 fd12 	bl	800375c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <Start_Motor+0x34>)
 8000d40:	f002 f83c 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d4a:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <Start_Motor+0x34>)
 8000d4c:	f002 f836 	bl	8002dbc <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000e0 	.word	0x200000e0
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <run>:

void run(uint8_t speed, uint8_t mode)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
	if (mode == SFORWARD) {
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d110      	bne.n	8000d94 <run+0x38>
		genPwm(&htim1,TIM_CHANNEL_4, speed);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fdaf 	bl	80008d8 <__aeabi_ui2f>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	210c      	movs	r1, #12
 8000d80:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <run+0x60>)
 8000d82:	f000 f81d 	bl	8000dc0 <genPwm>
		genPwm(&htim1,TIM_CHANNEL_1, 0);
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <run+0x60>)
 8000d8e:	f000 f817 	bl	8000dc0 <genPwm>
	}
	else {
		genPwm(&htim1,TIM_CHANNEL_4, 0);
		genPwm(&htim1,TIM_CHANNEL_1, speed);
	}
}
 8000d92:	e00f      	b.n	8000db4 <run+0x58>
		genPwm(&htim1,TIM_CHANNEL_4, 0);
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	210c      	movs	r1, #12
 8000d9a:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <run+0x60>)
 8000d9c:	f000 f810 	bl	8000dc0 <genPwm>
		genPwm(&htim1,TIM_CHANNEL_1, speed);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fd98 	bl	80008d8 <__aeabi_ui2f>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	2100      	movs	r1, #0
 8000dae:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <run+0x60>)
 8000db0:	f000 f806 	bl	8000dc0 <genPwm>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000e0 	.word	0x200000e0

08000dc0 <genPwm>:

void genPwm(TIM_HandleTypeDef *htim, uint32_t channel, float duty_cycle)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	float load_value = (duty_cycle / 100) * htim->Instance->ARR;
 8000dcc:	4922      	ldr	r1, [pc, #136]	@ (8000e58 <genPwm+0x98>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fe8e 	bl	8000af0 <__aeabi_fdiv>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461c      	mov	r4, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fd7a 	bl	80008d8 <__aeabi_ui2f>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4619      	mov	r1, r3
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fdcd 	bl	8000988 <__aeabi_fmul>
 8000dee:	4603      	mov	r3, r0
 8000df0:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d108      	bne.n	8000e0a <genPwm+0x4a>
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ff15 	bl	8000c28 <__aeabi_f2uiz>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e08:	e022      	b.n	8000e50 <genPwm+0x90>
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d109      	bne.n	8000e24 <genPwm+0x64>
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ff09 	bl	8000c28 <__aeabi_f2uiz>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b299      	uxth	r1, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e22:	e015      	b.n	8000e50 <genPwm+0x90>
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d109      	bne.n	8000e3e <genPwm+0x7e>
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff fefc 	bl	8000c28 <__aeabi_f2uiz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b299      	uxth	r1, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000e3c:	e008      	b.n	8000e50 <genPwm+0x90>
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff fef2 	bl	8000c28 <__aeabi_f2uiz>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b299      	uxth	r1, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e50:	bf00      	nop
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	42c80000 	.word	0x42c80000

08000e5c <Start_Servo>:

#include "SERVO.h"

void Start_Servo()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e60:	2100      	movs	r1, #0
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <Start_Servo+0x1c>)
 8000e64:	f002 fc7a 	bl	800375c <HAL_TIM_PWM_Start>
	To_Default();
 8000e68:	f000 f834 	bl	8000ed4 <To_Default>
	HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f000 feaf 	bl	8001bd0 <HAL_Delay>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001b8 	.word	0x200001b8
 8000e7c:	00000000 	.word	0x00000000

08000e80 <Angle>:

uint16_t Angle(double angle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	e9c7 0100 	strd	r0, r1, [r7]
	double temp = 250 + angle * 5.56;
 8000e8a:	a30f      	add	r3, pc, #60	@ (adr r3, 8000ec8 <Angle+0x48>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e94:	f7ff f95c 	bl	8000150 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <Angle+0x50>)
 8000ea6:	f7ff fa83 	bl	80003b0 <__adddf3>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (int)temp;
 8000eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eb6:	f7ff fc31 	bl	800071c <__aeabi_d2iz>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29b      	uxth	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	a3d70a3d 	.word	0xa3d70a3d
 8000ecc:	40163d70 	.word	0x40163d70
 8000ed0:	406f4000 	.word	0x406f4000

08000ed4 <To_Default>:

void To_Default()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, Angle(90));
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4904      	ldr	r1, [pc, #16]	@ (8000ef0 <To_Default+0x1c>)
 8000ede:	f7ff ffcf 	bl	8000e80 <Angle>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <To_Default+0x20>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40568000 	.word	0x40568000
 8000ef4:	200001b8 	.word	0x200001b8

08000ef8 <Turn_Left>:
		}
	}
}

void Turn_Left()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	//To_Default();
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, Angle(48));
 8000efc:	f04f 0000 	mov.w	r0, #0
 8000f00:	4904      	ldr	r1, [pc, #16]	@ (8000f14 <Turn_Left+0x1c>)
 8000f02:	f7ff ffbd 	bl	8000e80 <Angle>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <Turn_Left+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40480000 	.word	0x40480000
 8000f18:	200001b8 	.word	0x200001b8

08000f1c <Turn_Right>:

void Turn_Right()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	//To_Default();
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, Angle(136));
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	4904      	ldr	r1, [pc, #16]	@ (8000f38 <Turn_Right+0x1c>)
 8000f26:	f7ff ffab 	bl	8000e80 <Angle>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <Turn_Right+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40610000 	.word	0x40610000
 8000f3c:	200001b8 	.word	0x200001b8

08000f40 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <MX_CAN_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f5e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000f62:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f66:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000f6a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_CAN_Init+0x64>)
 8000f92:	f000 fe41 	bl	8001c18 <HAL_CAN_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f9c:	f000 f9e5 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000b4 	.word	0x200000b4
 8000fa8:	40006400 	.word	0x40006400

08000fac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a29      	ldr	r2, [pc, #164]	@ (800106c <HAL_CAN_MspInit+0xc0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d14b      	bne.n	8001064 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fcc:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <HAL_CAN_MspInit+0xc4>)
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <HAL_CAN_MspInit+0xc4>)
 8000fd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fd6:	61d3      	str	r3, [r2, #28]
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <HAL_CAN_MspInit+0xc4>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <HAL_CAN_MspInit+0xc4>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <HAL_CAN_MspInit+0xc4>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <HAL_CAN_MspInit+0xc4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4818      	ldr	r0, [pc, #96]	@ (8001074 <HAL_CAN_MspInit+0xc8>)
 8001012:	f001 fd4f 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4812      	ldr	r0, [pc, #72]	@ (8001074 <HAL_CAN_MspInit+0xc8>)
 800102c:	f001 fd42 	bl	8002ab4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_CAN_MspInit+0xcc>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_CAN_MspInit+0xcc>)
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2014      	movs	r0, #20
 800105a:	f001 fcf4 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 fd0d 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40006400 	.word	0x40006400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40010000 	.word	0x40010000

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <MX_GPIO_Init+0x90>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <MX_GPIO_Init+0x90>)
 8001096:	f043 0320 	orr.w	r3, r3, #32
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_GPIO_Init+0x90>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_GPIO_Init+0x90>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <MX_GPIO_Init+0x90>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <MX_GPIO_Init+0x90>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_GPIO_Init+0x90>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a11      	ldr	r2, [pc, #68]	@ (800110c <MX_GPIO_Init+0x90>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_GPIO_Init+0x90>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80010de:	480c      	ldr	r0, [pc, #48]	@ (8001110 <MX_GPIO_Init+0x94>)
 80010e0:	f001 fe6c 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010e4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_GPIO_Init+0x94>)
 80010fe:	f001 fcd9 	bl	8002ab4 <HAL_GPIO_Init>

}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40010c00 	.word	0x40010c00

08001114 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t receive = 0, mess = 7, mess2 = 7;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800111e:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 f84f 	bl	80021c6 <HAL_CAN_GetRxMessage>
	mess = RxData[0];
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800112e:	701a      	strb	r2, [r3, #0]
	mess2 = RxData[1];
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001132:	785a      	ldrb	r2, [r3, #1]
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001136:	701a      	strb	r2, [r3, #0]
	receive = 1;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000ac 	.word	0x200000ac
 800114c:	20000068 	.word	0x20000068
 8001150:	20000020 	.word	0x20000020
 8001154:	20000021 	.word	0x20000021
 8001158:	200000dc 	.word	0x200000dc

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f000 fcd4 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f8bc 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f7ff ff88 	bl	800107c <MX_GPIO_Init>
  MX_TIM1_Init();
 800116c:	f000 f986 	bl	800147c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001170:	f000 fa30 	bl	80015d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001174:	f000 fa82 	bl	800167c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001178:	f000 fc2c 	bl	80019d4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800117c:	f000 facc 	bl	8001718 <MX_TIM4_Init>
  MX_CAN_Init();
 8001180:	f7ff fede 	bl	8000f40 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	Start_Motor();
 8001184:	f7ff fdce 	bl	8000d24 <Start_Motor>
	Start_Servo();
 8001188:	f7ff fe68 	bl	8000e5c <Start_Servo>
	CAN_FilterInit_SingleFF0(&hcan, &canfilterconfig, SENSOR_ADDR);
 800118c:	2212      	movs	r2, #18
 800118e:	494a      	ldr	r1, [pc, #296]	@ (80012b8 <main+0x15c>)
 8001190:	484a      	ldr	r0, [pc, #296]	@ (80012bc <main+0x160>)
 8001192:	f7ff fd83 	bl	8000c9c <CAN_FilterInit_SingleFF0>
	CAN_ComInit_Std(&TxHeader, &hcan, ACTUATOR_ADDR, 1);
 8001196:	2301      	movs	r3, #1
 8001198:	22a2      	movs	r2, #162	@ 0xa2
 800119a:	4948      	ldr	r1, [pc, #288]	@ (80012bc <main+0x160>)
 800119c:	4848      	ldr	r0, [pc, #288]	@ (80012c0 <main+0x164>)
 800119e:	f7ff fd63 	bl	8000c68 <CAN_ComInit_Std>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//uint8_t a = 0;
	run(speed, SFORWARD);
 80011a2:	2101      	movs	r1, #1
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff fdd9 	bl	8000d5c <run>
	//To_Angle(90, 0, FAST, 0);
	//Turn_Left();
	//To_Angle(90, 45, FAST, 0);
	while (1)
	{
		if (receive == 1) {
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <main+0x168>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d1fb      	bne.n	80011aa <main+0x4e>
			switch (mess) {
 80011b2:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <main+0x16c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d878      	bhi.n	80012ae <main+0x152>
 80011bc:	a201      	add	r2, pc, #4	@ (adr r2, 80011c4 <main+0x68>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	08001207 	.word	0x08001207
 80011cc:	08001239 	.word	0x08001239
 80011d0:	08001277 	.word	0x08001277
			case 1: //Forward on the Left
			{
				run(speed, SFORWARD);
 80011d4:	2101      	movs	r1, #1
 80011d6:	2014      	movs	r0, #20
 80011d8:	f7ff fdc0 	bl	8000d5c <run>
				Turn_Left();
 80011dc:	f7ff fe8c 	bl	8000ef8 <Turn_Left>
				HAL_Delay(200);
 80011e0:	20c8      	movs	r0, #200	@ 0xc8
 80011e2:	f000 fcf5 	bl	8001bd0 <HAL_Delay>
				CAN_Transmit(&hcan, &TxHeader, LEFT);
 80011e6:	4a39      	ldr	r2, [pc, #228]	@ (80012cc <main+0x170>)
 80011e8:	4935      	ldr	r1, [pc, #212]	@ (80012c0 <main+0x164>)
 80011ea:	4834      	ldr	r0, [pc, #208]	@ (80012bc <main+0x160>)
 80011ec:	f7ff fd86 	bl	8000cfc <CAN_Transmit>
				while (mess == 1) {
 80011f0:	e004      	b.n	80011fc <main+0xa0>
					CAN_Transmit(&hcan, &TxHeader, LEFT);
 80011f2:	4a36      	ldr	r2, [pc, #216]	@ (80012cc <main+0x170>)
 80011f4:	4932      	ldr	r1, [pc, #200]	@ (80012c0 <main+0x164>)
 80011f6:	4831      	ldr	r0, [pc, #196]	@ (80012bc <main+0x160>)
 80011f8:	f7ff fd80 	bl	8000cfc <CAN_Transmit>
				while (mess == 1) {
 80011fc:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <main+0x16c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d0f6      	beq.n	80011f2 <main+0x96>
				}
				break;
 8001204:	e053      	b.n	80012ae <main+0x152>
			}
			case 2: //Forward on the Right
			{
				run(speed, SFORWARD);
 8001206:	2101      	movs	r1, #1
 8001208:	2014      	movs	r0, #20
 800120a:	f7ff fda7 	bl	8000d5c <run>
				Turn_Right();
 800120e:	f7ff fe85 	bl	8000f1c <Turn_Right>
				HAL_Delay(200);
 8001212:	20c8      	movs	r0, #200	@ 0xc8
 8001214:	f000 fcdc 	bl	8001bd0 <HAL_Delay>
				CAN_Transmit(&hcan, &TxHeader, RIGHT);
 8001218:	4a2d      	ldr	r2, [pc, #180]	@ (80012d0 <main+0x174>)
 800121a:	4929      	ldr	r1, [pc, #164]	@ (80012c0 <main+0x164>)
 800121c:	4827      	ldr	r0, [pc, #156]	@ (80012bc <main+0x160>)
 800121e:	f7ff fd6d 	bl	8000cfc <CAN_Transmit>

				while (mess == 2) {
 8001222:	e004      	b.n	800122e <main+0xd2>
					CAN_Transmit(&hcan, &TxHeader, RIGHT);
 8001224:	4a2a      	ldr	r2, [pc, #168]	@ (80012d0 <main+0x174>)
 8001226:	4926      	ldr	r1, [pc, #152]	@ (80012c0 <main+0x164>)
 8001228:	4824      	ldr	r0, [pc, #144]	@ (80012bc <main+0x160>)
 800122a:	f7ff fd67 	bl	8000cfc <CAN_Transmit>
				while (mess == 2) {
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <main+0x16c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d0f6      	beq.n	8001224 <main+0xc8>
				}
				break;
 8001236:	e03a      	b.n	80012ae <main+0x152>
			}
			case 3: //Forward on the straight
			{
				run(speed, SFORWARD);
 8001238:	2101      	movs	r1, #1
 800123a:	2014      	movs	r0, #20
 800123c:	f7ff fd8e 	bl	8000d5c <run>
				if (mess2 == 1) {
 8001240:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <main+0x178>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <main+0xf2>
					Turn_Left();
 8001248:	f7ff fe56 	bl	8000ef8 <Turn_Left>
 800124c:	e005      	b.n	800125a <main+0xfe>
				}
				else if (mess2 == 2) {
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <main+0x178>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d101      	bne.n	800125a <main+0xfe>
					Turn_Right();
 8001256:	f7ff fe61 	bl	8000f1c <Turn_Right>
				}
				HAL_Delay(200);
 800125a:	20c8      	movs	r0, #200	@ 0xc8
 800125c:	f000 fcb8 	bl	8001bd0 <HAL_Delay>
				CAN_Transmit(&hcan, &TxHeader, FORWARD);
 8001260:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <main+0x17c>)
 8001262:	4917      	ldr	r1, [pc, #92]	@ (80012c0 <main+0x164>)
 8001264:	4815      	ldr	r0, [pc, #84]	@ (80012bc <main+0x160>)
 8001266:	f7ff fd49 	bl	8000cfc <CAN_Transmit>
				while (mess == 3) {}
 800126a:	bf00      	nop
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <main+0x16c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d0fb      	beq.n	800126c <main+0x110>
				break;
 8001274:	e01b      	b.n	80012ae <main+0x152>
			}
			case 4: //Backward
			{
				if (mess2 == 1) {
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <main+0x178>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <main+0x128>
					Turn_Left();
 800127e:	f7ff fe3b 	bl	8000ef8 <Turn_Left>
 8001282:	e001      	b.n	8001288 <main+0x12c>
				}
				else {
					Turn_Right();
 8001284:	f7ff fe4a 	bl	8000f1c <Turn_Right>
				}
				run(speed, SBACKWARD);
 8001288:	2100      	movs	r1, #0
 800128a:	2014      	movs	r0, #20
 800128c:	f7ff fd66 	bl	8000d5c <run>
				CAN_Transmit(&hcan, &TxHeader, BACKWARD);
 8001290:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <main+0x180>)
 8001292:	490b      	ldr	r1, [pc, #44]	@ (80012c0 <main+0x164>)
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <main+0x160>)
 8001296:	f7ff fd31 	bl	8000cfc <CAN_Transmit>
				HAL_Delay(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800129e:	f000 fc97 	bl	8001bd0 <HAL_Delay>
				while(mess == 4) {
 80012a2:	bf00      	nop
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <main+0x16c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d0fb      	beq.n	80012a4 <main+0x148>
				}
				break;
 80012ac:	bf00      	nop
			}
			}
			receive = 0;
 80012ae:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <main+0x168>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
		if (receive == 1) {
 80012b4:	e779      	b.n	80011aa <main+0x4e>
 80012b6:	bf00      	nop
 80012b8:	20000084 	.word	0x20000084
 80012bc:	200000b4 	.word	0x200000b4
 80012c0:	2000004c 	.word	0x2000004c
 80012c4:	200000dc 	.word	0x200000dc
 80012c8:	20000020 	.word	0x20000020
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000021 	.word	0x20000021
 80012d8:	20000010 	.word	0x20000010
 80012dc:	20000018 	.word	0x20000018

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	@ 0x40
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2228      	movs	r2, #40	@ 0x28
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fa6e 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fd5f 	bl	8002dec <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001334:	f000 f819 	bl	800136a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 ffcc 	bl	80032f0 <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800135e:	f000 f804 	bl	800136a <Error_Handler>
  }
}
 8001362:	bf00      	nop
 8001364:	3740      	adds	r7, #64	@ 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136e:	b672      	cpsid	i
}
 8001370:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001372:	bf00      	nop
 8001374:	e7fd      	b.n	8001372 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 fbb4 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800143a:	f001 f80a 	bl	8002452 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000b4 	.word	0x200000b4

08001448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <TIM2_IRQHandler+0x10>)
 800144e:	f002 fac9 	bl	80039e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000128 	.word	0x20000128

0800145c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM3_IRQHandler+0x10>)
 8001462:	f002 fabf 	bl	80039e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000170 	.word	0x20000170

08001470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b096      	sub	sp, #88	@ 0x58
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2220      	movs	r2, #32
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f98b 	bl	80047d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014bc:	4a44      	ldr	r2, [pc, #272]	@ (80015d0 <MX_TIM1_Init+0x154>)
 80014be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014c0:	4b42      	ldr	r3, [pc, #264]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80014cc:	4b3f      	ldr	r3, [pc, #252]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014ce:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014da:	4b3c      	ldr	r3, [pc, #240]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e6:	4839      	ldr	r0, [pc, #228]	@ (80015cc <MX_TIM1_Init+0x150>)
 80014e8:	f002 f890 	bl	800360c <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014f2:	f7ff ff3a 	bl	800136a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001500:	4619      	mov	r1, r3
 8001502:	4832      	ldr	r0, [pc, #200]	@ (80015cc <MX_TIM1_Init+0x150>)
 8001504:	f002 fc20 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800150e:	f7ff ff2c 	bl	800136a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001512:	482e      	ldr	r0, [pc, #184]	@ (80015cc <MX_TIM1_Init+0x150>)
 8001514:	f002 f8c9 	bl	80036aa <HAL_TIM_PWM_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800151e:	f7ff ff24 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800152a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800152e:	4619      	mov	r1, r3
 8001530:	4826      	ldr	r0, [pc, #152]	@ (80015cc <MX_TIM1_Init+0x150>)
 8001532:	f002 ffad 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800153c:	f7ff ff15 	bl	800136a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001540:	2360      	movs	r3, #96	@ 0x60
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	4819      	ldr	r0, [pc, #100]	@ (80015cc <MX_TIM1_Init+0x150>)
 8001566:	f002 fb2d 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001570:	f7ff fefb 	bl	800136a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001578:	220c      	movs	r2, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4813      	ldr	r0, [pc, #76]	@ (80015cc <MX_TIM1_Init+0x150>)
 800157e:	f002 fb21 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001588:	f7ff feef 	bl	800136a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4807      	ldr	r0, [pc, #28]	@ (80015cc <MX_TIM1_Init+0x150>)
 80015b0:	f002 ffcc 	bl	800454c <HAL_TIMEx_ConfigBreakDeadTime>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015ba:	f7ff fed6 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <MX_TIM1_Init+0x150>)
 80015c0:	f000 f9b2 	bl	8001928 <HAL_TIM_MspPostInit>

}
 80015c4:	bf00      	nop
 80015c6:	3758      	adds	r7, #88	@ 0x58
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200000e0 	.word	0x200000e0
 80015d0:	40012c00 	.word	0x40012c00

080015d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2224      	movs	r2, #36	@ 0x24
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 f8f4 	bl	80047d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_TIM2_Init+0xa4>)
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_TIM2_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <MX_TIM2_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_TIM2_Init+0xa4>)
 8001606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_TIM2_Init+0xa4>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_TIM2_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001618:	2303      	movs	r3, #3
 800161a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_TIM2_Init+0xa4>)
 8001644:	f002 f92c 	bl	80038a0 <HAL_TIM_Encoder_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800164e:	f7ff fe8c 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_TIM2_Init+0xa4>)
 8001660:	f002 ff16 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800166a:	f7ff fe7e 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3730      	adds	r7, #48	@ 0x30
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000128 	.word	0x20000128

0800167c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_TIM3_Init+0x94>)
 800169a:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <MX_TIM3_Init+0x98>)
 800169c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016a0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80016a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016c2:	f001 ffa3 	bl	800360c <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016cc:	f7ff fe4d 	bl	800136a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016de:	f002 fb33 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016e8:	f7ff fe3f 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_TIM3_Init+0x94>)
 80016fa:	f002 fec9 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001704:	f7ff fe31 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000170 	.word	0x20000170
 8001714:	40000400 	.word	0x40000400

08001718 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	@ 0x38
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001748:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <MX_TIM4_Init+0xe4>)
 800174a:	4a2d      	ldr	r2, [pc, #180]	@ (8001800 <MX_TIM4_Init+0xe8>)
 800174c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 800174e:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <MX_TIM4_Init+0xe4>)
 8001750:	228f      	movs	r2, #143	@ 0x8f
 8001752:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <MX_TIM4_Init+0xe4>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800175a:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <MX_TIM4_Init+0xe4>)
 800175c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001760:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_TIM4_Init+0xe4>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <MX_TIM4_Init+0xe4>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800176e:	4823      	ldr	r0, [pc, #140]	@ (80017fc <MX_TIM4_Init+0xe4>)
 8001770:	f001 ff4c 	bl	800360c <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800177a:	f7ff fdf6 	bl	800136a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001784:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001788:	4619      	mov	r1, r3
 800178a:	481c      	ldr	r0, [pc, #112]	@ (80017fc <MX_TIM4_Init+0xe4>)
 800178c:	f002 fadc 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001796:	f7ff fde8 	bl	800136a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800179a:	4818      	ldr	r0, [pc, #96]	@ (80017fc <MX_TIM4_Init+0xe4>)
 800179c:	f001 ff85 	bl	80036aa <HAL_TIM_PWM_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80017a6:	f7ff fde0 	bl	800136a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4619      	mov	r1, r3
 80017b8:	4810      	ldr	r0, [pc, #64]	@ (80017fc <MX_TIM4_Init+0xe4>)
 80017ba:	f002 fe69 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80017c4:	f7ff fdd1 	bl	800136a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c8:	2360      	movs	r3, #96	@ 0x60
 80017ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4807      	ldr	r0, [pc, #28]	@ (80017fc <MX_TIM4_Init+0xe4>)
 80017e0:	f002 f9f0 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80017ea:	f7ff fdbe 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017ee:	4803      	ldr	r0, [pc, #12]	@ (80017fc <MX_TIM4_Init+0xe4>)
 80017f0:	f000 f89a 	bl	8001928 <HAL_TIM_MspPostInit>

}
 80017f4:	bf00      	nop
 80017f6:	3738      	adds	r7, #56	@ 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200001b8 	.word	0x200001b8
 8001800:	40000800 	.word	0x40000800

08001804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1f      	ldr	r2, [pc, #124]	@ (8001890 <HAL_TIM_Base_MspInit+0x8c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10c      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 800181c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800182e:	e02a      	b.n	8001886 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_TIM_Base_MspInit+0x94>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d114      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	201d      	movs	r0, #29
 8001858:	f001 f8f5 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800185c:	201d      	movs	r0, #29
 800185e:	f001 f90e 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <HAL_TIM_Base_MspInit+0x98>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_TIM_Base_MspInit+0x90>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40021000 	.word	0x40021000
 8001898:	40000400 	.word	0x40000400
 800189c:	40000800 	.word	0x40000800

080018a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018be:	d12b      	bne.n	8001918 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x80>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a16      	ldr	r2, [pc, #88]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x80>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x80>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x80>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x80>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x80>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f0:	2303      	movs	r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	4808      	ldr	r0, [pc, #32]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x84>)
 8001904:	f001 f8d6 	bl	8002ab4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	201c      	movs	r0, #28
 800190e:	f001 f89a 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001912:	201c      	movs	r0, #28
 8001914:	f001 f8b3 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	40010800 	.word	0x40010800

08001928 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_TIM_MspPostInit+0x98>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d119      	bne.n	800197c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_TIM_MspPostInit+0x9c>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_TIM_MspPostInit+0x9c>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_TIM_MspPostInit+0x9c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001960:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2302      	movs	r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	@ (80019c8 <HAL_TIM_MspPostInit+0xa0>)
 8001976:	f001 f89d 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800197a:	e01c      	b.n	80019b6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <HAL_TIM_MspPostInit+0xa4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d117      	bne.n	80019b6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_TIM_MspPostInit+0x9c>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_TIM_MspPostInit+0x9c>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_TIM_MspPostInit+0x9c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800199e:	2340      	movs	r3, #64	@ 0x40
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <HAL_TIM_MspPostInit+0xa8>)
 80019b2:	f001 f87f 	bl	8002ab4 <HAL_GPIO_Init>
}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40000800 	.word	0x40000800
 80019d0:	40010c00 	.word	0x40010c00

080019d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <MX_USART1_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f002 fe01 	bl	8004612 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f7ff fca8 	bl	800136a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000200 	.word	0x20000200
 8001a24:	40013800 	.word	0x40013800

08001a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab4 <HAL_UART_MspInit+0x8c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d131      	bne.n	8001aac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_UART_MspInit+0x90>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480b      	ldr	r0, [pc, #44]	@ (8001abc <HAL_UART_MspInit+0x94>)
 8001a8e:	f001 f811 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <HAL_UART_MspInit+0x94>)
 8001aa8:	f001 f804 	bl	8002ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800

08001ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac0:	f7ff fcd6 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac6:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001adc:	4c09      	ldr	r4, [pc, #36]	@ (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f002 fe79 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aee:	f7ff fb35 	bl	800115c <main>
  bx lr
 8001af2:	4770      	bx	lr
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001afc:	08004874 	.word	0x08004874
  ldr r2, =_sbss
 8001b00:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001b04:	2000024c 	.word	0x2000024c

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x28>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 ff87 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	200f      	movs	r0, #15
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fc26 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 ff9f 	bl	8002a9a <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 ff67 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000024 	.word	0x20000024
 8001b90:	2000002c 	.word	0x2000002c
 8001b94:	20000028 	.word	0x20000028

08001b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_IncTick+0x1c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a03      	ldr	r2, [pc, #12]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	2000002c 	.word	0x2000002c
 8001bb8:	20000248 	.word	0x20000248

08001bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <HAL_GetTick+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000248 	.word	0x20000248

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffe0 	bl	8001bbc <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000002c 	.word	0x2000002c

08001c18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0ed      	b.n	8001e06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff f9b8 	bl	8000fac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff ffb6 	bl	8001bbc <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c52:	e012      	b.n	8001c7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c54:	f7ff ffb2 	bl	8001bbc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b0a      	cmp	r3, #10
 8001c60:	d90b      	bls.n	8001c7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0c5      	b.n	8001e06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0e5      	beq.n	8001c54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0202 	bic.w	r2, r2, #2
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c98:	f7ff ff90 	bl	8001bbc <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c9e:	e012      	b.n	8001cc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca0:	f7ff ff8c 	bl	8001bbc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d90b      	bls.n	8001cc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e09f      	b.n	8001e06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e5      	bne.n	8001ca0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7e5b      	ldrb	r3, [r3, #25]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e9b      	ldrb	r3, [r3, #26]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d108      	bne.n	8001d42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0220 	bic.w	r2, r2, #32
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7edb      	ldrb	r3, [r3, #27]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0210 	bic.w	r2, r2, #16
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0210 	orr.w	r2, r2, #16
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7f1b      	ldrb	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d108      	bne.n	8001d96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0208 	orr.w	r2, r2, #8
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e007      	b.n	8001da6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0208 	bic.w	r2, r2, #8
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7f5b      	ldrb	r3, [r3, #29]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0204 	orr.w	r2, r2, #4
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e007      	b.n	8001dd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	ea42 0103 	orr.w	r1, r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	1e5a      	subs	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e24:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d003      	beq.n	8001e34 <HAL_CAN_ConfigFilter+0x26>
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	f040 80aa 	bne.w	8001f88 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d123      	bne.n	8001eb6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	401a      	ands	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3248      	adds	r2, #72	@ 0x48
 8001e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	3348      	adds	r3, #72	@ 0x48
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d122      	bne.n	8001f04 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ede:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3248      	adds	r2, #72	@ 0x48
 8001ee4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ef8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001efa:	6979      	ldr	r1, [r7, #20]
 8001efc:	3348      	adds	r3, #72	@ 0x48
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f1e:	e007      	b.n	8001f30 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f7a:	f023 0201 	bic.w	r2, r3, #1
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e006      	b.n	8001f96 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d12e      	bne.n	8002012 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff fdf6 	bl	8001bbc <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fd2:	e012      	b.n	8001ffa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fd4:	f7ff fdf2 	bl	8001bbc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b0a      	cmp	r3, #10
 8001fe0:	d90b      	bls.n	8001ffa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e012      	b.n	8002020 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e5      	bne.n	8001fd4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e006      	b.n	8002020 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d003      	beq.n	8002054 <HAL_CAN_AddTxMessage+0x2c>
 800204c:	7ffb      	ldrb	r3, [r7, #31]
 800204e:	2b02      	cmp	r3, #2
 8002050:	f040 80ad 	bne.w	80021ae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8095 	beq.w	800219e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	0e1b      	lsrs	r3, r3, #24
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800207e:	2201      	movs	r2, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	6809      	ldr	r1, [r1, #0]
 800209e:	431a      	orrs	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3318      	adds	r3, #24
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	440b      	add	r3, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e00f      	b.n	80020cc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3318      	adds	r3, #24
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	440b      	add	r3, r1
 80020ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3318      	adds	r3, #24
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	440b      	add	r3, r1
 80020dc:	3304      	adds	r3, #4
 80020de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	7d1b      	ldrb	r3, [r3, #20]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d111      	bne.n	800210c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3318      	adds	r3, #24
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3318      	adds	r3, #24
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	440b      	add	r3, r1
 8002108:	3304      	adds	r3, #4
 800210a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3307      	adds	r3, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	061a      	lsls	r2, r3, #24
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3306      	adds	r3, #6
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3305      	adds	r3, #5
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	4313      	orrs	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	3204      	adds	r2, #4
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	4610      	mov	r0, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	6811      	ldr	r1, [r2, #0]
 8002134:	ea43 0200 	orr.w	r2, r3, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	440b      	add	r3, r1
 800213e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002142:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3303      	adds	r3, #3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	061a      	lsls	r2, r3, #24
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3302      	adds	r3, #2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3301      	adds	r3, #1
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	4313      	orrs	r3, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	4610      	mov	r0, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6811      	ldr	r1, [r2, #0]
 800216a:	ea43 0200 	orr.w	r2, r3, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	440b      	add	r3, r1
 8002174:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002178:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3318      	adds	r3, #24
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	6811      	ldr	r1, [r2, #0]
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3318      	adds	r3, #24
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	440b      	add	r3, r1
 8002198:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e00e      	b.n	80021bc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e006      	b.n	80021bc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3724      	adds	r7, #36	@ 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021c6:	b480      	push	{r7}
 80021c8:	b087      	sub	sp, #28
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d003      	beq.n	80021ea <HAL_CAN_GetRxMessage+0x24>
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	f040 8103 	bne.w	80023f0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10e      	bne.n	800220e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0f7      	b.n	80023fe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0e8      	b.n	80023fe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	331b      	adds	r3, #27
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4413      	add	r3, r2
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0204 	and.w	r2, r3, #4
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	331b      	adds	r3, #27
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0d5b      	lsrs	r3, r3, #21
 800225a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e00b      	b.n	800227c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	331b      	adds	r3, #27
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	331b      	adds	r3, #27
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0202 	and.w	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	331b      	adds	r3, #27
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2208      	movs	r2, #8
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	e00b      	b.n	80022ca <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	331b      	adds	r3, #27
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	331b      	adds	r3, #27
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	4413      	add	r3, r2
 80022d6:	3304      	adds	r3, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	331b      	adds	r3, #27
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	3304      	adds	r3, #4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4413      	add	r3, r2
 8002304:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	4413      	add	r3, r2
 800231a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0a1a      	lsrs	r2, r3, #8
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4413      	add	r3, r2
 8002334:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0c1a      	lsrs	r2, r3, #16
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3302      	adds	r3, #2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e1a      	lsrs	r2, r3, #24
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3303      	adds	r3, #3
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	3304      	adds	r3, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0a1a      	lsrs	r2, r3, #8
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	3305      	adds	r3, #5
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0c1a      	lsrs	r2, r3, #16
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3306      	adds	r3, #6
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e1a      	lsrs	r2, r3, #24
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3307      	adds	r3, #7
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0220 	orr.w	r2, r2, #32
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	e007      	b.n	80023ec <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e006      	b.n	80023fe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002418:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d002      	beq.n	8002426 <HAL_CAN_ActivateNotification+0x1e>
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d109      	bne.n	800243a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6959      	ldr	r1, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e006      	b.n	8002448 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08a      	sub	sp, #40	@ 0x28
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d07c      	beq.n	8002592 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d023      	beq.n	80024ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f983 	bl	80027c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80024ba:	e016      	b.n	80024ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	e00c      	b.n	80024ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e2:	e002      	b.n	80024ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f986 	bl	80027f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d024      	beq.n	800253e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f962 	bl	80027d2 <HAL_CAN_TxMailbox1CompleteCallback>
 800250e:	e016      	b.n	800253e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d004      	beq.n	8002524 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
 8002522:	e00c      	b.n	800253e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	e002      	b.n	800253e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f965 	bl	8002808 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d024      	beq.n	8002592 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002550:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f941 	bl	80027e4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002562:	e016      	b.n	8002592 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
 8002576:	e00c      	b.n	8002592 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
 800258a:	e002      	b.n	8002592 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f944 	bl	800281a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2210      	movs	r2, #16
 80025b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2208      	movs	r2, #8
 80025d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f92a 	bl	800282c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe fd8f 	bl	8001114 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2210      	movs	r2, #16
 8002618:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2208      	movs	r2, #8
 8002634:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f90a 	bl	8002850 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8f2 	bl	800283e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8f3 	bl	8002862 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2208      	movs	r2, #8
 8002696:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8eb 	bl	8002874 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d07b      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d072      	beq.n	8002798 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270c:	2b00      	cmp	r3, #0
 800270e:	d043      	beq.n	8002798 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03e      	beq.n	8002798 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002720:	2b60      	cmp	r3, #96	@ 0x60
 8002722:	d02b      	beq.n	800277c <HAL_CAN_IRQHandler+0x32a>
 8002724:	2b60      	cmp	r3, #96	@ 0x60
 8002726:	d82e      	bhi.n	8002786 <HAL_CAN_IRQHandler+0x334>
 8002728:	2b50      	cmp	r3, #80	@ 0x50
 800272a:	d022      	beq.n	8002772 <HAL_CAN_IRQHandler+0x320>
 800272c:	2b50      	cmp	r3, #80	@ 0x50
 800272e:	d82a      	bhi.n	8002786 <HAL_CAN_IRQHandler+0x334>
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d019      	beq.n	8002768 <HAL_CAN_IRQHandler+0x316>
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d826      	bhi.n	8002786 <HAL_CAN_IRQHandler+0x334>
 8002738:	2b30      	cmp	r3, #48	@ 0x30
 800273a:	d010      	beq.n	800275e <HAL_CAN_IRQHandler+0x30c>
 800273c:	2b30      	cmp	r3, #48	@ 0x30
 800273e:	d822      	bhi.n	8002786 <HAL_CAN_IRQHandler+0x334>
 8002740:	2b10      	cmp	r3, #16
 8002742:	d002      	beq.n	800274a <HAL_CAN_IRQHandler+0x2f8>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d005      	beq.n	8002754 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002748:	e01d      	b.n	8002786 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002752:	e019      	b.n	8002788 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800275c:	e014      	b.n	8002788 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	f043 0320 	orr.w	r3, r3, #32
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002766:	e00f      	b.n	8002788 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002770:	e00a      	b.n	8002788 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800277a:	e005      	b.n	8002788 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002784:	e000      	b.n	8002788 <HAL_CAN_IRQHandler+0x336>
            break;
 8002786:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002796:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2204      	movs	r2, #4
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f867 	bl	8002886 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	@ 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4906      	ldr	r1, [pc, #24]	@ (8002930 <__NVIC_EnableIRQ+0x34>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	@ (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	@ (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	@ 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff90 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	@ (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff2d 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff42 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff90 	bl	8002988 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5f 	bl	8002934 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff35 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b08b      	sub	sp, #44	@ 0x2c
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac6:	e169      	b.n	8002d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 8158 	bne.w	8002d96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a9a      	ldr	r2, [pc, #616]	@ (8002d54 <HAL_GPIO_Init+0x2a0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d05e      	beq.n	8002bae <HAL_GPIO_Init+0xfa>
 8002af0:	4a98      	ldr	r2, [pc, #608]	@ (8002d54 <HAL_GPIO_Init+0x2a0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d875      	bhi.n	8002be2 <HAL_GPIO_Init+0x12e>
 8002af6:	4a98      	ldr	r2, [pc, #608]	@ (8002d58 <HAL_GPIO_Init+0x2a4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d058      	beq.n	8002bae <HAL_GPIO_Init+0xfa>
 8002afc:	4a96      	ldr	r2, [pc, #600]	@ (8002d58 <HAL_GPIO_Init+0x2a4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d86f      	bhi.n	8002be2 <HAL_GPIO_Init+0x12e>
 8002b02:	4a96      	ldr	r2, [pc, #600]	@ (8002d5c <HAL_GPIO_Init+0x2a8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d052      	beq.n	8002bae <HAL_GPIO_Init+0xfa>
 8002b08:	4a94      	ldr	r2, [pc, #592]	@ (8002d5c <HAL_GPIO_Init+0x2a8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d869      	bhi.n	8002be2 <HAL_GPIO_Init+0x12e>
 8002b0e:	4a94      	ldr	r2, [pc, #592]	@ (8002d60 <HAL_GPIO_Init+0x2ac>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d04c      	beq.n	8002bae <HAL_GPIO_Init+0xfa>
 8002b14:	4a92      	ldr	r2, [pc, #584]	@ (8002d60 <HAL_GPIO_Init+0x2ac>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d863      	bhi.n	8002be2 <HAL_GPIO_Init+0x12e>
 8002b1a:	4a92      	ldr	r2, [pc, #584]	@ (8002d64 <HAL_GPIO_Init+0x2b0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d046      	beq.n	8002bae <HAL_GPIO_Init+0xfa>
 8002b20:	4a90      	ldr	r2, [pc, #576]	@ (8002d64 <HAL_GPIO_Init+0x2b0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d85d      	bhi.n	8002be2 <HAL_GPIO_Init+0x12e>
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d82a      	bhi.n	8002b80 <HAL_GPIO_Init+0xcc>
 8002b2a:	2b12      	cmp	r3, #18
 8002b2c:	d859      	bhi.n	8002be2 <HAL_GPIO_Init+0x12e>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <HAL_GPIO_Init+0x80>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002baf 	.word	0x08002baf
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b9b 	.word	0x08002b9b
 8002b40:	08002bdd 	.word	0x08002bdd
 8002b44:	08002be3 	.word	0x08002be3
 8002b48:	08002be3 	.word	0x08002be3
 8002b4c:	08002be3 	.word	0x08002be3
 8002b50:	08002be3 	.word	0x08002be3
 8002b54:	08002be3 	.word	0x08002be3
 8002b58:	08002be3 	.word	0x08002be3
 8002b5c:	08002be3 	.word	0x08002be3
 8002b60:	08002be3 	.word	0x08002be3
 8002b64:	08002be3 	.word	0x08002be3
 8002b68:	08002be3 	.word	0x08002be3
 8002b6c:	08002be3 	.word	0x08002be3
 8002b70:	08002be3 	.word	0x08002be3
 8002b74:	08002be3 	.word	0x08002be3
 8002b78:	08002b91 	.word	0x08002b91
 8002b7c:	08002ba5 	.word	0x08002ba5
 8002b80:	4a79      	ldr	r2, [pc, #484]	@ (8002d68 <HAL_GPIO_Init+0x2b4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b86:	e02c      	b.n	8002be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	623b      	str	r3, [r7, #32]
          break;
 8002b8e:	e029      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	3304      	adds	r3, #4
 8002b96:	623b      	str	r3, [r7, #32]
          break;
 8002b98:	e024      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	623b      	str	r3, [r7, #32]
          break;
 8002ba2:	e01f      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	623b      	str	r3, [r7, #32]
          break;
 8002bac:	e01a      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	623b      	str	r3, [r7, #32]
          break;
 8002bba:	e013      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	611a      	str	r2, [r3, #16]
          break;
 8002bce:	e009      	b.n	8002be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	615a      	str	r2, [r3, #20]
          break;
 8002bda:	e003      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
          break;
 8002be0:	e000      	b.n	8002be4 <HAL_GPIO_Init+0x130>
          break;
 8002be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2bff      	cmp	r3, #255	@ 0xff
 8002be8:	d801      	bhi.n	8002bee <HAL_GPIO_Init+0x13a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	e001      	b.n	8002bf2 <HAL_GPIO_Init+0x13e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2bff      	cmp	r3, #255	@ 0xff
 8002bf8:	d802      	bhi.n	8002c00 <HAL_GPIO_Init+0x14c>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0x152>
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	3b08      	subs	r3, #8
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	210f      	movs	r1, #15
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	401a      	ands	r2, r3
 8002c18:	6a39      	ldr	r1, [r7, #32]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	431a      	orrs	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80b1 	beq.w	8002d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c34:	4b4d      	ldr	r3, [pc, #308]	@ (8002d6c <HAL_GPIO_Init+0x2b8>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	@ (8002d6c <HAL_GPIO_Init+0x2b8>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6193      	str	r3, [r2, #24]
 8002c40:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <HAL_GPIO_Init+0x2b8>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c4c:	4a48      	ldr	r2, [pc, #288]	@ (8002d70 <HAL_GPIO_Init+0x2bc>)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a40      	ldr	r2, [pc, #256]	@ (8002d74 <HAL_GPIO_Init+0x2c0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_GPIO_Init+0x1ec>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d78 <HAL_GPIO_Init+0x2c4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00d      	beq.n	8002c9c <HAL_GPIO_Init+0x1e8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3e      	ldr	r2, [pc, #248]	@ (8002d7c <HAL_GPIO_Init+0x2c8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <HAL_GPIO_Init+0x1e4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d80 <HAL_GPIO_Init+0x2cc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_GPIO_Init+0x1e0>
 8002c90:	2303      	movs	r3, #3
 8002c92:	e006      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c94:	2304      	movs	r3, #4
 8002c96:	e004      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e002      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	f002 0203 	and.w	r2, r2, #3
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	4093      	lsls	r3, r2
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cb2:	492f      	ldr	r1, [pc, #188]	@ (8002d70 <HAL_GPIO_Init+0x2bc>)
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d006      	beq.n	8002cda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	492c      	ldr	r1, [pc, #176]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cda:	4b2a      	ldr	r3, [pc, #168]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	4928      	ldr	r1, [pc, #160]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cf4:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4922      	ldr	r1, [pc, #136]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	491e      	ldr	r1, [pc, #120]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4918      	ldr	r1, [pc, #96]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	4914      	ldr	r1, [pc, #80]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d021      	beq.n	8002d88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	490e      	ldr	r1, [pc, #56]	@ (8002d84 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e021      	b.n	8002d96 <HAL_GPIO_Init+0x2e2>
 8002d52:	bf00      	nop
 8002d54:	10320000 	.word	0x10320000
 8002d58:	10310000 	.word	0x10310000
 8002d5c:	10220000 	.word	0x10220000
 8002d60:	10210000 	.word	0x10210000
 8002d64:	10120000 	.word	0x10120000
 8002d68:	10110000 	.word	0x10110000
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40010800 	.word	0x40010800
 8002d78:	40010c00 	.word	0x40010c00
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40011400 	.word	0x40011400
 8002d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_GPIO_Init+0x304>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	4909      	ldr	r1, [pc, #36]	@ (8002db8 <HAL_GPIO_Init+0x304>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	3301      	adds	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f47f ae8e 	bne.w	8002ac8 <HAL_GPIO_Init+0x14>
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	372c      	adds	r7, #44	@ 0x2c
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	40010400 	.word	0x40010400

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	611a      	str	r2, [r3, #16]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e272      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d00c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e18:	4b8f      	ldr	r3, [pc, #572]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d112      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
 8002e24:	4b8c      	ldr	r3, [pc, #560]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e30:	d10b      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e32:	4b89      	ldr	r3, [pc, #548]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d06c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x12c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d168      	bne.n	8002f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e24c      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x76>
 8002e54:	4b80      	ldr	r3, [pc, #512]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7f      	ldr	r2, [pc, #508]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e02e      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7a      	ldr	r2, [pc, #488]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b78      	ldr	r3, [pc, #480]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a77      	ldr	r2, [pc, #476]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xbc>
 8002e8e:	4b72      	ldr	r3, [pc, #456]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a71      	ldr	r2, [pc, #452]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6a      	ldr	r2, [pc, #424]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b68      	ldr	r3, [pc, #416]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a67      	ldr	r2, [pc, #412]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fe78 	bl	8001bbc <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fe74 	bl	8001bbc <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e200      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xe4>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fe64 	bl	8001bbc <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fe60 	bl	8001bbc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1ec      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x10c>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f26:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f32:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
 8002f3e:	4b46      	ldr	r3, [pc, #280]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b43      	ldr	r3, [pc, #268]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1c0      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3d      	ldr	r3, [pc, #244]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4939      	ldr	r1, [pc, #228]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_RCC_OscConfig+0x270>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fe19 	bl	8001bbc <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fe15 	bl	8001bbc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1a1      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b2a      	ldr	r3, [pc, #168]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4927      	ldr	r1, [pc, #156]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b26      	ldr	r3, [pc, #152]	@ (800305c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fdf8 	bl	8001bbc <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fdf4 	bl	8001bbc <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e180      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03a      	beq.n	8003070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d019      	beq.n	8003036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b17      	ldr	r3, [pc, #92]	@ (8003060 <HAL_RCC_OscConfig+0x274>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fe fdd8 	bl	8001bbc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe fdd4 	bl	8001bbc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e160      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <HAL_RCC_OscConfig+0x26c>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302e:	2001      	movs	r0, #1
 8003030:	f000 face 	bl	80035d0 <RCC_Delay>
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <HAL_RCC_OscConfig+0x274>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fe fdbe 	bl	8001bbc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe fdba 	bl	8001bbc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d908      	bls.n	8003064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e146      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	42420000 	.word	0x42420000
 8003060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	4b92      	ldr	r3, [pc, #584]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e9      	bne.n	8003044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a6 	beq.w	80031ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b8b      	ldr	r3, [pc, #556]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b88      	ldr	r3, [pc, #544]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a87      	ldr	r2, [pc, #540]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b85      	ldr	r3, [pc, #532]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b82      	ldr	r3, [pc, #520]	@ (80032b4 <HAL_RCC_OscConfig+0x4c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b7f      	ldr	r3, [pc, #508]	@ (80032b4 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a7e      	ldr	r2, [pc, #504]	@ (80032b4 <HAL_RCC_OscConfig+0x4c8>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fd7b 	bl	8001bbc <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe fd77 	bl	8001bbc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	@ 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e103      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b75      	ldr	r3, [pc, #468]	@ (80032b4 <HAL_RCC_OscConfig+0x4c8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x312>
 80030f0:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a6e      	ldr	r2, [pc, #440]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e02d      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003106:	4b6a      	ldr	r3, [pc, #424]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a69      	ldr	r2, [pc, #420]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a66      	ldr	r2, [pc, #408]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e01c      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_OscConfig+0x356>
 8003128:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a60      	ldr	r2, [pc, #384]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	4b5e      	ldr	r3, [pc, #376]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a5d      	ldr	r2, [pc, #372]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	e00b      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003142:	4b5b      	ldr	r3, [pc, #364]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a5a      	ldr	r2, [pc, #360]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b58      	ldr	r3, [pc, #352]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a57      	ldr	r2, [pc, #348]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe fd2b 	bl	8001bbc <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe fd27 	bl	8001bbc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0b1      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	4b4b      	ldr	r3, [pc, #300]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ee      	beq.n	800316a <HAL_RCC_OscConfig+0x37e>
 800318c:	e014      	b.n	80031b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fd15 	bl	8001bbc <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fd11 	bl	8001bbc <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e09b      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	4b40      	ldr	r3, [pc, #256]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b3c      	ldr	r3, [pc, #240]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a3b      	ldr	r2, [pc, #236]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8087 	beq.w	80032e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d4:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d061      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d146      	bne.n	8003276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b33      	ldr	r3, [pc, #204]	@ (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fce5 	bl	8001bbc <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fce1 	bl	8001bbc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e06d      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321e:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4921      	ldr	r1, [pc, #132]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a19      	ldr	r1, [r3, #32]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	430b      	orrs	r3, r1
 8003242:	491b      	ldr	r1, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003248:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe fcb5 	bl	8001bbc <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe fcb1 	bl	8001bbc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e03d      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x46a>
 8003274:	e035      	b.n	80032e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fc9e 	bl	8001bbc <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fc9a 	bl	8001bbc <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e026      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x498>
 80032a2:	e01e      	b.n	80032e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e019      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
 80032b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_RCC_OscConfig+0x500>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0d0      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b6a      	ldr	r3, [pc, #424]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b67      	ldr	r3, [pc, #412]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4965      	ldr	r1, [pc, #404]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b63      	ldr	r3, [pc, #396]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0b8      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800334c:	4b59      	ldr	r3, [pc, #356]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003364:	4b53      	ldr	r3, [pc, #332]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a52      	ldr	r2, [pc, #328]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800336e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	494d      	ldr	r1, [pc, #308]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d040      	beq.n	8003410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d115      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e07f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b41      	ldr	r3, [pc, #260]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e073      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06b      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ce:	4b39      	ldr	r3, [pc, #228]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4936      	ldr	r1, [pc, #216]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e0:	f7fe fbec 	bl	8001bbc <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7fe fbe8 	bl	8001bbc <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e053      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	4b2d      	ldr	r3, [pc, #180]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 020c 	and.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d1eb      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003410:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d210      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4922      	ldr	r1, [pc, #136]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e032      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344c:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4916      	ldr	r1, [pc, #88]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800346a:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	490e      	ldr	r1, [pc, #56]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347e:	f000 f821 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	490a      	ldr	r1, [pc, #40]	@ (80034b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	fa22 f303 	lsr.w	r3, r2, r3
 8003496:	4a09      	ldr	r2, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1cc>)
 8003498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x1d0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fb4a 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08004840 	.word	0x08004840
 80034bc:	20000024 	.word	0x20000024
 80034c0:	20000028 	.word	0x20000028

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034de:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x94>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x36>
 80034f2:	e027      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f4:	4b19      	ldr	r3, [pc, #100]	@ (800355c <HAL_RCC_GetSysClockFreq+0x98>)
 80034f6:	613b      	str	r3, [r7, #16]
      break;
 80034f8:	e027      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0c9b      	lsrs	r3, r3, #18
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003504:	5cd3      	ldrb	r3, [r2, r3]
 8003506:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d010      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x94>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0c5b      	lsrs	r3, r3, #17
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	4a11      	ldr	r2, [pc, #68]	@ (8003564 <HAL_RCC_GetSysClockFreq+0xa0>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <HAL_RCC_GetSysClockFreq+0x98>)
 8003526:	fb03 f202 	mul.w	r2, r3, r2
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e004      	b.n	800353e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0c      	ldr	r2, [pc, #48]	@ (8003568 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	613b      	str	r3, [r7, #16]
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCC_GetSysClockFreq+0x98>)
 8003546:	613b      	str	r3, [r7, #16]
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	693b      	ldr	r3, [r7, #16]
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	007a1200 	.word	0x007a1200
 8003560:	08004858 	.word	0x08004858
 8003564:	08004868 	.word	0x08004868
 8003568:	003d0900 	.word	0x003d0900

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b02      	ldr	r3, [pc, #8]	@ (800357c <HAL_RCC_GetHCLKFreq+0x10>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20000024 	.word	0x20000024

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff2 	bl	800356c <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	@ (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08004850 	.word	0x08004850

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffde 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0adb      	lsrs	r3, r3, #11
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08004850 	.word	0x08004850

080035d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <RCC_Delay+0x34>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003608 <RCC_Delay+0x38>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0a5b      	lsrs	r3, r3, #9
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035ec:	bf00      	nop
  }
  while (Delay --);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	60fa      	str	r2, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f9      	bne.n	80035ec <RCC_Delay+0x1c>
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	20000024 	.word	0x20000024
 8003608:	10624dd3 	.word	0x10624dd3

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe f8e6 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 fc70 	bl	8003f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e041      	b.n	8003740 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f839 	bl	8003748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f000 fc21 	bl	8003f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
	...

0800375c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_TIM_PWM_Start+0x24>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e022      	b.n	80037c6 <HAL_TIM_PWM_Start+0x6a>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d109      	bne.n	800379a <HAL_TIM_PWM_Start+0x3e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e015      	b.n	80037c6 <HAL_TIM_PWM_Start+0x6a>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d109      	bne.n	80037b4 <HAL_TIM_PWM_Start+0x58>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e008      	b.n	80037c6 <HAL_TIM_PWM_Start+0x6a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e05e      	b.n	800388c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start+0x82>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037dc:	e013      	b.n	8003806 <HAL_TIM_PWM_Start+0xaa>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_PWM_Start+0x92>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037ec:	e00b      	b.n	8003806 <HAL_TIM_PWM_Start+0xaa>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_PWM_Start+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037fc:	e003      	b.n	8003806 <HAL_TIM_PWM_Start+0xaa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fe1a 	bl	8004448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1e      	ldr	r2, [pc, #120]	@ (8003894 <HAL_TIM_PWM_Start+0x138>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d107      	bne.n	800382e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_TIM_PWM_Start+0x138>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_TIM_PWM_Start+0xfa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003840:	d009      	beq.n	8003856 <HAL_TIM_PWM_Start+0xfa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a14      	ldr	r2, [pc, #80]	@ (8003898 <HAL_TIM_PWM_Start+0x13c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIM_PWM_Start+0xfa>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a12      	ldr	r2, [pc, #72]	@ (800389c <HAL_TIM_PWM_Start+0x140>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d111      	bne.n	800387a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d010      	beq.n	800388a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003878:	e007      	b.n	800388a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800

080038a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e093      	b.n	80039dc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd ffe9 	bl	80018a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f000 fb1b 	bl	8003f30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	4313      	orrs	r3, r2
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003940:	f023 030c 	bic.w	r3, r3, #12
 8003944:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800394c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	4313      	orrs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	011a      	lsls	r2, r3, #4
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	031b      	lsls	r3, r3, #12
 8003970:	4313      	orrs	r3, r2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4313      	orrs	r3, r2
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0202 	mvn.w	r2, #2
 8003a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa63 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa56 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa65 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d020      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0204 	mvn.w	r2, #4
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa3d 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa30 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fa3f 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0208 	mvn.w	r2, #8
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa17 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa0a 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fa19 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d020      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0210 	mvn.w	r2, #16
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2208      	movs	r2, #8
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9f1 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9e4 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f9f3 	bl	8003f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0201 	mvn.w	r2, #1
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9c3 	bl	8003ed6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fd46 	bl	8004600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9c3 	bl	8003f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0220 	mvn.w	r2, #32
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fd19 	bl	80045ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0ae      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	f200 809f 	bhi.w	8003d30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003d31 	.word	0x08003d31
 8003c00:	08003d31 	.word	0x08003d31
 8003c04:	08003d31 	.word	0x08003d31
 8003c08:	08003c6d 	.word	0x08003c6d
 8003c0c:	08003d31 	.word	0x08003d31
 8003c10:	08003d31 	.word	0x08003d31
 8003c14:	08003d31 	.word	0x08003d31
 8003c18:	08003caf 	.word	0x08003caf
 8003c1c:	08003d31 	.word	0x08003d31
 8003c20:	08003d31 	.word	0x08003d31
 8003c24:	08003d31 	.word	0x08003d31
 8003c28:	08003cef 	.word	0x08003cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9ea 	bl	800400c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0208 	orr.w	r2, r2, #8
 8003c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	619a      	str	r2, [r3, #24]
      break;
 8003c6a:	e064      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa30 	bl	80040d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6999      	ldr	r1, [r3, #24]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	619a      	str	r2, [r3, #24]
      break;
 8003cac:	e043      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa79 	bl	80041ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0208 	orr.w	r2, r2, #8
 8003cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
      break;
 8003cec:	e023      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fac3 	bl	8004280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69d9      	ldr	r1, [r3, #28]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	021a      	lsls	r2, r3, #8
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	61da      	str	r2, [r3, #28]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_ConfigClockSource+0x1c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0b4      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x186>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d9c:	d03e      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0xd4>
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da2:	f200 8087 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003daa:	f000 8086 	beq.w	8003eba <HAL_TIM_ConfigClockSource+0x172>
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db2:	d87f      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b70      	cmp	r3, #112	@ 0x70
 8003db6:	d01a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0xa6>
 8003db8:	2b70      	cmp	r3, #112	@ 0x70
 8003dba:	d87b      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b60      	cmp	r3, #96	@ 0x60
 8003dbe:	d050      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc0:	2b60      	cmp	r3, #96	@ 0x60
 8003dc2:	d877      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b50      	cmp	r3, #80	@ 0x50
 8003dc6:	d03c      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0xfa>
 8003dc8:	2b50      	cmp	r3, #80	@ 0x50
 8003dca:	d873      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d058      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d86f      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b30      	cmp	r3, #48	@ 0x30
 8003dd6:	d064      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd8:	2b30      	cmp	r3, #48	@ 0x30
 8003dda:	d86b      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d060      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d867      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05c      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d05a      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	e062      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	f000 fb04 	bl	800440a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	609a      	str	r2, [r3, #8]
      break;
 8003e1a:	e04f      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2c:	f000 faed 	bl	800440a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e3e:	609a      	str	r2, [r3, #8]
      break;
 8003e40:	e03c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fa64 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2150      	movs	r1, #80	@ 0x50
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fabb 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e02c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 fa82 	bl	8004378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2160      	movs	r1, #96	@ 0x60
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 faab 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e01c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 fa44 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2140      	movs	r1, #64	@ 0x40
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fa9b 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f000 fa92 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a2f      	ldr	r2, [pc, #188]	@ (8004000 <TIM_Base_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x30>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x30>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	@ (8004004 <TIM_Base_SetConfig+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x30>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004008 <TIM_Base_SetConfig+0xd8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a22      	ldr	r2, [pc, #136]	@ (8004000 <TIM_Base_SetConfig+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_Base_SetConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1f      	ldr	r2, [pc, #124]	@ (8004004 <TIM_Base_SetConfig+0xd4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0x62>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004008 <TIM_Base_SetConfig+0xd8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0d      	ldr	r2, [pc, #52]	@ (8004000 <TIM_Base_SetConfig+0xd0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800

0800400c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 0201 	bic.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 0302 	bic.w	r3, r3, #2
 8004054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1c      	ldr	r2, [pc, #112]	@ (80040d4 <TIM_OC1_SetConfig+0xc8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10c      	bne.n	8004082 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0308 	bic.w	r3, r3, #8
 800406e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 0304 	bic.w	r3, r3, #4
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a13      	ldr	r2, [pc, #76]	@ (80040d4 <TIM_OC1_SetConfig+0xc8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d111      	bne.n	80040ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	621a      	str	r2, [r3, #32]
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00

080040d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0210 	bic.w	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0320 	bic.w	r3, r3, #32
 8004122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <TIM_OC2_SetConfig+0xd0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10d      	bne.n	8004154 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <TIM_OC2_SetConfig+0xd0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d113      	bne.n	8004184 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00

080041ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <TIM_OC3_SetConfig+0xd0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10d      	bne.n	8004226 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a14      	ldr	r2, [pc, #80]	@ (800427c <TIM_OC3_SetConfig+0xd0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d113      	bne.n	8004256 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00

08004280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0f      	ldr	r2, [pc, #60]	@ (8004318 <TIM_OC4_SetConfig+0x98>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	40012c00 	.word	0x40012c00

0800431c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 030a 	bic.w	r3, r3, #10
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	031b      	lsls	r3, r3, #12
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f043 0307 	orr.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440a:	b480      	push	{r7}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004424:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	021a      	lsls	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	431a      	orrs	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2201      	movs	r2, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	43db      	mvns	r3, r3
 800446a:	401a      	ands	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e046      	b.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d009      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a12      	ldr	r2, [pc, #72]	@ (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a10      	ldr	r2, [pc, #64]	@ (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10c      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4313      	orrs	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800

0800454c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004564:	2302      	movs	r3, #2
 8004566:	e03d      	b.n	80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e042      	b.n	80046aa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fd f9f5 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2224      	movs	r2, #36	@ 0x24
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004654:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f82c 	bl	80046b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800466a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800467a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800468a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80046ee:	f023 030c 	bic.w	r3, r3, #12
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <UART_SetConfig+0x114>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d103      	bne.n	8004724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7fe ff44 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	e002      	b.n	800472a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fe ff2c 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8004728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	4a22      	ldr	r2, [pc, #136]	@ (80047cc <UART_SetConfig+0x118>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	0119      	lsls	r1, r3, #4
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009a      	lsls	r2, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004760:	4b1a      	ldr	r3, [pc, #104]	@ (80047cc <UART_SetConfig+0x118>)
 8004762:	fba3 0302 	umull	r0, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2064      	movs	r0, #100	@ 0x64
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	@ 0x32
 8004774:	4a15      	ldr	r2, [pc, #84]	@ (80047cc <UART_SetConfig+0x118>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004780:	4419      	add	r1, r3
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009a      	lsls	r2, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	fbb2 f2f3 	udiv	r2, r2, r3
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <UART_SetConfig+0x118>)
 800479a:	fba3 0302 	umull	r0, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2064      	movs	r0, #100	@ 0x64
 80047a2:	fb00 f303 	mul.w	r3, r0, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	3332      	adds	r3, #50	@ 0x32
 80047ac:	4a07      	ldr	r2, [pc, #28]	@ (80047cc <UART_SetConfig+0x118>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	440a      	add	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40013800 	.word	0x40013800
 80047cc:	51eb851f 	.word	0x51eb851f

080047d0 <memset>:
 80047d0:	4603      	mov	r3, r0
 80047d2:	4402      	add	r2, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	2600      	movs	r6, #0
 80047e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004818 <__libc_init_array+0x38>)
 80047e6:	4c0d      	ldr	r4, [pc, #52]	@ (800481c <__libc_init_array+0x3c>)
 80047e8:	1b64      	subs	r4, r4, r5
 80047ea:	10a4      	asrs	r4, r4, #2
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	f000 f81a 	bl	8004828 <_init>
 80047f4:	2600      	movs	r6, #0
 80047f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004820 <__libc_init_array+0x40>)
 80047f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004824 <__libc_init_array+0x44>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	0800486c 	.word	0x0800486c
 800481c:	0800486c 	.word	0x0800486c
 8004820:	0800486c 	.word	0x0800486c
 8004824:	08004870 	.word	0x08004870

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
