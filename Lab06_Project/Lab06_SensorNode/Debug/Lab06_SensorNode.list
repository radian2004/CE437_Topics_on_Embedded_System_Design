
Lab06_SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800576c  0800576c  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005774  08005774  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005774  08005774  00006774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005778  08005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800577c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000084  08005800  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08005800  00007524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d13  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003188  00000000  00000000  0001adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0001df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8a  00000000  00000000  0001f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a47d  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180d8  00000000  00000000  0003a507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092399  00000000  00000000  000525df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  000e49bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000e9c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080054dc 	.word	0x080054dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080054dc 	.word	0x080054dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_ComInit_Std>:
CAN_RxHeaderTypeDef RxHeader;
CAN_FilterTypeDef canfilterconfig;
uint8_t RxData[8];

void CAN_ComInit_Std(CAN_TxHeaderTypeDef *Tx_Header, CAN_HandleTypeDef *hcan, uint32_t id, uint8_t dlc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	70fb      	strb	r3, [r7, #3]
	Tx_Header->IDE = CAN_ID_STD;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2200      	movs	r2, #0
 800016e:	609a      	str	r2, [r3, #8]
	Tx_Header->DLC = dlc;
 8000170:	78fa      	ldrb	r2, [r7, #3]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	611a      	str	r2, [r3, #16]
	Tx_Header->StdId = id;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	601a      	str	r2, [r3, #0]
	Tx_Header->RTR = CAN_RTR_DATA;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
	HAL_CAN_Start(hcan);
 8000182:	68b8      	ldr	r0, [r7, #8]
 8000184:	f001 fbc4 	bl	8001910 <HAL_CAN_Start>
}
 8000188:	bf00      	nop
 800018a:	3710      	adds	r7, #16
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <CAN_FilterInit_SingleFF0>:

void CAN_FilterInit_SingleFF0(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *canfilterconfig, uint32_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
	canfilterconfig->FilterActivation = CAN_FILTER_ENABLE;
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	2201      	movs	r2, #1
 80001a0:	621a      	str	r2, [r3, #32]
	canfilterconfig->FilterBank = 0;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	2200      	movs	r2, #0
 80001a6:	615a      	str	r2, [r3, #20]
	canfilterconfig->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	2200      	movs	r2, #0
 80001ac:	611a      	str	r2, [r3, #16]
	canfilterconfig->FilterIdHigh = addr << 5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	015a      	lsls	r2, r3, #5
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	601a      	str	r2, [r3, #0]
	canfilterconfig->FilterIdLow = 0x0000;
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	2200      	movs	r2, #0
 80001ba:	605a      	str	r2, [r3, #4]
	canfilterconfig->FilterMaskIdHigh = addr << 5;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	015a      	lsls	r2, r3, #5
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	609a      	str	r2, [r3, #8]
	canfilterconfig->FilterMaskIdLow = 0x0000;
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	2200      	movs	r2, #0
 80001c8:	60da      	str	r2, [r3, #12]
	canfilterconfig->FilterMode = CAN_FILTERMODE_IDMASK;
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	2200      	movs	r2, #0
 80001ce:	619a      	str	r2, [r3, #24]
	canfilterconfig->FilterScale = CAN_FILTERSCALE_32BIT;
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	2201      	movs	r2, #1
 80001d4:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(hcan, canfilterconfig);
 80001d6:	68b9      	ldr	r1, [r7, #8]
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	f001 fad0 	bl	800177e <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001de:	2102      	movs	r1, #2
 80001e0:	68f8      	ldr	r0, [r7, #12]
 80001e2:	f001 fdc9 	bl	8001d78 <HAL_CAN_ActivateNotification>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <CAN_Transmit>:

uint32_t CAN_Transmit(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *Tx_Header, uint8_t* buffer)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
	HAL_CAN_AddTxMessage(hcan, Tx_Header, buffer, &Mailbox);
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <CAN_Transmit+0x24>)
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	68b9      	ldr	r1, [r7, #8]
 8000202:	68f8      	ldr	r0, [r7, #12]
 8000204:	f001 fbc8 	bl	8001998 <HAL_CAN_AddTxMessage>
	return Mailbox;
 8000208:	4b02      	ldr	r3, [pc, #8]	@ (8000214 <CAN_Transmit+0x24>)
 800020a:	681b      	ldr	r3, [r3, #0]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000b8 	.word	0x200000b8

08000218 <Get_State>:
uint8_t FORWARD_LEFT[]   = { 3, 1, 0, 0, 0, 0, 0, 0 };
uint8_t FORWARD_RIGHT[]  = { 3, 2, 0, 0, 0, 0, 0, 0 };

uint8_t returnSignal = 0;
uint8_t Get_State(int distance1, int distance2, uint8_t *forceChange, uint8_t state)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	70fb      	strb	r3, [r7, #3]
	if (*forceChange == 0) {
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d11d      	bne.n	800026a <Get_State+0x52>
		if (distance2 < distance1) {
 800022e:	68ba      	ldr	r2, [r7, #8]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	429a      	cmp	r2, r3
 8000234:	da0a      	bge.n	800024c <Get_State+0x34>
			if (distance2 <= 100)
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	2b64      	cmp	r3, #100	@ 0x64
 800023a:	dc01      	bgt.n	8000240 <Get_State+0x28>
				return BACKWARD_RIGHT_STATE;
 800023c:	2305      	movs	r3, #5
 800023e:	e022      	b.n	8000286 <Get_State+0x6e>
			else if (distance2 <= 900)
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000246:	dc1d      	bgt.n	8000284 <Get_State+0x6c>
				return LEFT_STATE;
 8000248:	2301      	movs	r3, #1
 800024a:	e01c      	b.n	8000286 <Get_State+0x6e>
		}
		else if (distance1 < distance2) {
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	429a      	cmp	r2, r3
 8000252:	da17      	bge.n	8000284 <Get_State+0x6c>
			if (distance1 <= 100)
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2b64      	cmp	r3, #100	@ 0x64
 8000258:	dc01      	bgt.n	800025e <Get_State+0x46>
				return BACKWARD_LEFT_STATE;
 800025a:	2304      	movs	r3, #4
 800025c:	e013      	b.n	8000286 <Get_State+0x6e>
			else if (distance1 <= 900)
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000264:	dc0e      	bgt.n	8000284 <Get_State+0x6c>
				return RIGHT_STATE;
 8000266:	2302      	movs	r3, #2
 8000268:	e00d      	b.n	8000286 <Get_State+0x6e>
		}

	}
	else if (*forceChange == 1) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d108      	bne.n	8000284 <Get_State+0x6c>
		*forceChange = 0;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
		return Get_CounterState(state);
 8000278:	78fb      	ldrb	r3, [r7, #3]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f807 	bl	800028e <Get_CounterState>
 8000280:	4603      	mov	r3, r0
 8000282:	e000      	b.n	8000286 <Get_State+0x6e>
	}
	return FORWARD_STATE;
 8000284:	2303      	movs	r3, #3
}
 8000286:	4618      	mov	r0, r3
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <Get_CounterState>:

uint8_t Get_CounterState(uint8_t state)
{
 800028e:	b480      	push	{r7}
 8000290:	b083      	sub	sp, #12
 8000292:	af00      	add	r7, sp, #0
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
	if (state == RIGHT_STATE) {
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d101      	bne.n	80002a2 <Get_CounterState+0x14>
		return LEFT_STATE;
 800029e:	2301      	movs	r3, #1
 80002a0:	e005      	b.n	80002ae <Get_CounterState+0x20>
	} else if (state == LEFT_STATE) {
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d101      	bne.n	80002ac <Get_CounterState+0x1e>
		return RIGHT_STATE;
 80002a8:	2302      	movs	r3, #2
 80002aa:	e000      	b.n	80002ae <Get_CounterState+0x20>
	} else {
		return LEFT_STATE;
 80002ac:	2301      	movs	r3, #1
	}
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <TOF_InitStruct>:
const size_t registered_sensors_cnt = _VL53L1X_MAX_SENSORS;
static int (*vl53l1x_log_func)(const char*, ...) = NULL;

// Function definitions
int TOF_InitStruct(VL53L1X* sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	4613      	mov	r3, r2
 80002c6:	71fb      	strb	r3, [r7, #7]
	if (address == 0x29)
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b29      	cmp	r3, #41	@ 0x29
 80002cc:	d107      	bne.n	80002de <TOF_InitStruct+0x26>
		_VL53L1X_LOG("Trying to set 0x29 as the address for the ToF, this can cause issues\r\n");
 80002ce:	4b1f      	ldr	r3, [pc, #124]	@ (800034c <TOF_InitStruct+0x94>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d003      	beq.n	80002de <TOF_InitStruct+0x26>
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <TOF_InitStruct+0x94>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	481d      	ldr	r0, [pc, #116]	@ (8000350 <TOF_InitStruct+0x98>)
 80002dc:	4798      	blx	r3

	sensor->hi2c = hi2c;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	683a      	ldr	r2, [r7, #0]
 80002ee:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	8c3a      	ldrh	r2, [r7, #32]
 80002f4:	819a      	strh	r2, [r3, #12]

	// Find free slot
	uint8_t id;
	for (id = 0; (id < _VL53L1X_MAX_SENSORS) && registered_sensors[id] != NULL; id++);
 80002f6:	2300      	movs	r3, #0
 80002f8:	75fb      	strb	r3, [r7, #23]
 80002fa:	e002      	b.n	8000302 <TOF_InitStruct+0x4a>
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	3301      	adds	r3, #1
 8000300:	75fb      	strb	r3, [r7, #23]
 8000302:	7dfb      	ldrb	r3, [r7, #23]
 8000304:	2b09      	cmp	r3, #9
 8000306:	d805      	bhi.n	8000314 <TOF_InitStruct+0x5c>
 8000308:	7dfb      	ldrb	r3, [r7, #23]
 800030a:	4a12      	ldr	r2, [pc, #72]	@ (8000354 <TOF_InitStruct+0x9c>)
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1f3      	bne.n	80002fc <TOF_InitStruct+0x44>

	if (id >= _VL53L1X_MAX_SENSORS)
 8000314:	7dfb      	ldrb	r3, [r7, #23]
 8000316:	2b09      	cmp	r3, #9
 8000318:	d90b      	bls.n	8000332 <TOF_InitStruct+0x7a>
	{
		_VL53L1X_LOG("Added too many sensors, increase _VL53L1X_MAX_SENSORS value, currently %d\r\n", registered_sensors_cnt);
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <TOF_InitStruct+0x94>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d005      	beq.n	800032e <TOF_InitStruct+0x76>
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <TOF_InitStruct+0x94>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	220a      	movs	r2, #10
 8000328:	4611      	mov	r1, r2
 800032a:	480b      	ldr	r0, [pc, #44]	@ (8000358 <TOF_InitStruct+0xa0>)
 800032c:	4798      	blx	r3
		return 1;
 800032e:	2301      	movs	r3, #1
 8000330:	e008      	b.n	8000344 <TOF_InitStruct+0x8c>
	}

	sensor->id = id;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	7dfa      	ldrb	r2, [r7, #23]
 8000336:	739a      	strb	r2, [r3, #14]
	registered_sensors[id] = sensor;
 8000338:	7dfb      	ldrb	r3, [r7, #23]
 800033a:	4906      	ldr	r1, [pc, #24]	@ (8000354 <TOF_InitStruct+0x9c>)
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return 0;
 8000342:	2300      	movs	r3, #0
}
 8000344:	4618      	mov	r0, r3
 8000346:	3718      	adds	r7, #24
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000134 	.word	0x20000134
 8000350:	080054f4 	.word	0x080054f4
 8000354:	2000010c 	.word	0x2000010c
 8000358:	08005548 	.word	0x08005548

0800035c <TOF_TurnOn>:

void TOF_TurnOn(const VL53L1X* sensor)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6898      	ldr	r0, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	899b      	ldrh	r3, [r3, #12]
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	f002 f9dc 	bl	800272c <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <TOF_TurnOff>:

void TOF_TurnOff(const VL53L1X* sensor)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6898      	ldr	r0, [r3, #8]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	899b      	ldrh	r3, [r3, #12]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	f002 f9cc 	bl	800272c <HAL_GPIO_WritePin>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <TOF_BootSensor>:

	return status;
}

int TOF_BootSensor(VL53L1X* sensor)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	int status = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
	TOF_TurnOn(sensor);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ffd7 	bl	800035c <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 80003ae:	2002      	movs	r0, #2
 80003b0:	f001 f8c6 	bl	8001540 <HAL_Delay>

    // Check if sensor is already configured with the correct address
    uint16_t id = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	813b      	strh	r3, [r7, #8]
    if (VL53L1X_GetSensorId(sensor->id, &id) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7b9b      	ldrb	r3, [r3, #14]
 80003bc:	461a      	mov	r2, r3
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	4619      	mov	r1, r3
 80003c4:	4610      	mov	r0, r2
 80003c6:	f000 f9d2 	bl	800076e <VL53L1X_GetSensorId>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d029      	beq.n	8000424 <TOF_BootSensor+0x88>
    {
    	uint8_t real_address = sensor->address;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	72fb      	strb	r3, [r7, #11]
    	sensor->address = 0x29;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2229      	movs	r2, #41	@ 0x29
 80003da:	711a      	strb	r2, [r3, #4]

    	status = VL53L1X_SetI2CAddress(sensor->id, real_address);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7b9b      	ldrb	r3, [r3, #14]
 80003e0:	461a      	mov	r2, r3
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	4619      	mov	r1, r3
 80003e6:	4610      	mov	r0, r2
 80003e8:	f000 f890 	bl	800050c <VL53L1X_SetI2CAddress>
 80003ec:	4603      	mov	r3, r0
 80003ee:	60fb      	str	r3, [r7, #12]
    	//status = VL53L1X_SetI2CAddress(sensor->id, sensor->address);
    	sensor->address = real_address;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	7afa      	ldrb	r2, [r7, #11]
 80003f4:	711a      	strb	r2, [r3, #4]

    	if (status != 0)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d013      	beq.n	8000424 <TOF_BootSensor+0x88>
    	{
    		if (sensor->address == 0x20) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	2b20      	cmp	r3, #32
 8000402:	d103      	bne.n	800040c <TOF_BootSensor+0x70>
    			status = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
    			return status;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	e049      	b.n	80004a0 <TOF_BootSensor+0x104>
    		}
    		else if (sensor->address == 0x26) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	2b26      	cmp	r3, #38	@ 0x26
 8000412:	d103      	bne.n	800041c <TOF_BootSensor+0x80>
    			status = 2;
 8000414:	2302      	movs	r3, #2
 8000416:	60fb      	str	r3, [r7, #12]
    			return status;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	e041      	b.n	80004a0 <TOF_BootSensor+0x104>
    		}
    		else {
    			status = 9;
 800041c:	2309      	movs	r3, #9
 800041e:	60fb      	str	r3, [r7, #12]
    			return status;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	e03d      	b.n	80004a0 <TOF_BootSensor+0x104>
    		return status;
    	}
    }

	// Initialise sensor
    status = VL53L1X_SensorInit(sensor->id);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7b9b      	ldrb	r3, [r3, #14]
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f88b 	bl	8000544 <VL53L1X_SensorInit>
 800042e:	4603      	mov	r3, r0
 8000430:	60fb      	str	r3, [r7, #12]
	if (status)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00e      	beq.n	8000456 <TOF_BootSensor+0xba>
	{
		status = 3;
 8000438:	2303      	movs	r3, #3
 800043a:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to initialise sensor 0x%02X\r\n", sensor->address);
 800043c:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <TOF_BootSensor+0x10c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d006      	beq.n	8000452 <TOF_BootSensor+0xb6>
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <TOF_BootSensor+0x10c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	7912      	ldrb	r2, [r2, #4]
 800044c:	4611      	mov	r1, r2
 800044e:	4817      	ldr	r0, [pc, #92]	@ (80004ac <TOF_BootSensor+0x110>)
 8000450:	4798      	blx	r3
		return status;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	e024      	b.n	80004a0 <TOF_BootSensor+0x104>
	}
	status = VL53L1X_StartRanging(sensor->id);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7b9b      	ldrb	r3, [r3, #14]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f920 	bl	80006a0 <VL53L1X_StartRanging>
 8000460:	4603      	mov	r3, r0
 8000462:	60fb      	str	r3, [r7, #12]
	if (status)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00e      	beq.n	8000488 <TOF_BootSensor+0xec>
	{
		status = 4;
 800046a:	2304      	movs	r3, #4
 800046c:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to start measurements on sensor 0x%02X\r\n", sensor->address);
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <TOF_BootSensor+0x10c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d006      	beq.n	8000484 <TOF_BootSensor+0xe8>
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <TOF_BootSensor+0x10c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7912      	ldrb	r2, [r2, #4]
 800047e:	4611      	mov	r1, r2
 8000480:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <TOF_BootSensor+0x114>)
 8000482:	4798      	blx	r3
		return status;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	e00b      	b.n	80004a0 <TOF_BootSensor+0x104>
	}

	_VL53L1X_LOG("Sensor 0x%02X configured successfully\r\n", sensor->address);
 8000488:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <TOF_BootSensor+0x10c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d006      	beq.n	800049e <TOF_BootSensor+0x102>
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <TOF_BootSensor+0x10c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	4806      	ldr	r0, [pc, #24]	@ (80004b4 <TOF_BootSensor+0x118>)
 800049c:	4798      	blx	r3
	return 0;
 800049e:	2300      	movs	r3, #0
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000134 	.word	0x20000134
 80004ac:	080055a0 	.word	0x080055a0
 80004b0:	080055d0 	.word	0x080055d0
 80004b4:	0800560c 	.word	0x0800560c

080004b8 <TOF_GetDistance>:

uint16_t TOF_GetDistance(const VL53L1X* sensor)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint16_t reading = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	81fb      	strh	r3, [r7, #14]
	if(VL53L1X_GetDistance(sensor->id, &reading) != 0)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	7b9b      	ldrb	r3, [r3, #14]
 80004c8:	461a      	mov	r2, r3
 80004ca:	f107 030e 	add.w	r3, r7, #14
 80004ce:	4619      	mov	r1, r3
 80004d0:	4610      	mov	r0, r2
 80004d2:	f000 f96c 	bl	80007ae <VL53L1X_GetDistance>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00d      	beq.n	80004f8 <TOF_GetDistance+0x40>
	{
		_VL53L1X_LOG("Failed to read distance from sensor 0x%02X\r\n", sensor->address);
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <TOF_GetDistance+0x4c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d006      	beq.n	80004f2 <TOF_GetDistance+0x3a>
 80004e4:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <TOF_GetDistance+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	7912      	ldrb	r2, [r2, #4]
 80004ec:	4611      	mov	r1, r2
 80004ee:	4806      	ldr	r0, [pc, #24]	@ (8000508 <TOF_GetDistance+0x50>)
 80004f0:	4798      	blx	r3
		return 0xFFFF; // VL53L1X_GetDistance() returns the reading for previous sensor if reading failed
 80004f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004f6:	e000      	b.n	80004fa <TOF_GetDistance+0x42>
	}
	return reading;
 80004f8:	89fb      	ldrh	r3, [r7, #14]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000134 	.word	0x20000134
 8000508:	08005640 	.word	0x08005640

0800050c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	80fb      	strh	r3, [r7, #6]
 8000518:	4613      	mov	r3, r2
 800051a:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8000520:	797a      	ldrb	r2, [r7, #5]
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	2101      	movs	r1, #1
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fede 	bl	80012e8 <VL53L1_WrByte>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	4313      	orrs	r3, r2
 8000534:	73fb      	strb	r3, [r7, #15]
	return status;
 8000536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8000552:	2300      	movs	r3, #0
 8000554:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000556:	232d      	movs	r3, #45	@ 0x2d
 8000558:	73bb      	strb	r3, [r7, #14]
 800055a:	e011      	b.n	8000580 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	b299      	uxth	r1, r3
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	3b2d      	subs	r3, #45	@ 0x2d
 8000564:	4a2c      	ldr	r2, [pc, #176]	@ (8000618 <VL53L1X_SensorInit+0xd4>)
 8000566:	5cd2      	ldrb	r2, [r2, r3]
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 febc 	bl	80012e8 <VL53L1_WrByte>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4313      	orrs	r3, r2
 8000578:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	3301      	adds	r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	2b87      	cmp	r3, #135	@ 0x87
 8000584:	d9ea      	bls.n	800055c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f889 	bl	80006a0 <VL53L1X_StartRanging>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	4313      	orrs	r3, r2
 8000596:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800059c:	e00b      	b.n	80005b6 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800059e:	f107 020d 	add.w	r2, r7, #13
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f8aa 	bl	8000700 <VL53L1X_CheckForDataReady>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80005b6:	7b7b      	ldrb	r3, [r7, #13]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f0      	beq.n	800059e <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f82c 	bl	800061c <VL53L1X_ClearInterrupt>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f87d 	bl	80006d0 <VL53L1X_StopRanging>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4313      	orrs	r3, r2
 80005de:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	2209      	movs	r2, #9
 80005e4:	2108      	movs	r1, #8
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fe7e 	bl	80012e8 <VL53L1_WrByte>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	2200      	movs	r2, #0
 80005fa:	210b      	movs	r1, #11
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe73 	bl	80012e8 <VL53L1_WrByte>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	4313      	orrs	r3, r2
 800060a:	73fb      	strb	r3, [r7, #15]
	return status;
 800060c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080056b0 	.word	0x080056b0

0800061c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2201      	movs	r2, #1
 800062e:	2186      	movs	r1, #134	@ 0x86
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fe59 	bl	80012e8 <VL53L1_WrByte>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	4313      	orrs	r3, r2
 800063e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800065c:	f107 020e 	add.w	r2, r7, #14
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	2130      	movs	r1, #48	@ 0x30
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fe6b 	bl	8001340 <VL53L1_RdByte>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4313      	orrs	r3, r2
 8000672:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	f003 0310 	and.w	r3, r3, #16
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	091b      	lsrs	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	bf0c      	ite	eq
 8000688:	2301      	moveq	r3, #1
 800068a:	2300      	movne	r3, #0
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	701a      	strb	r2, [r3, #0]
	return status;
 8000694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	2240      	movs	r2, #64	@ 0x40
 80006b2:	2187      	movs	r1, #135	@ 0x87
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe17 	bl	80012e8 <VL53L1_WrByte>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	73fb      	strb	r3, [r7, #15]
	return status;
 80006c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	2200      	movs	r2, #0
 80006e2:	2187      	movs	r1, #135	@ 0x87
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fdff 	bl	80012e8 <VL53L1_WrByte>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80006f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000710:	f107 020d 	add.w	r2, r7, #13
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff97 	bl	800064c <VL53L1X_GetInterruptPolarity>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	4313      	orrs	r3, r2
 8000726:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000728:	f107 020e 	add.w	r2, r7, #14
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	2131      	movs	r1, #49	@ 0x31
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fe05 	bl	8001340 <VL53L1_RdByte>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4313      	orrs	r3, r2
 800073e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10c      	bne.n	8000762 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000748:	7bbb      	ldrb	r3, [r7, #14]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	7b7a      	ldrb	r2, [r7, #13]
 8000750:	4293      	cmp	r3, r2
 8000752:	d103      	bne.n	800075c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e002      	b.n	8000762 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	6039      	str	r1, [r7, #0]
 8000778:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8000782:	f107 020c 	add.w	r2, r7, #12
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	f240 110f 	movw	r1, #271	@ 0x10f
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fe0f 	bl	80013b0 <VL53L1_RdWord>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	4313      	orrs	r3, r2
 800079a:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 800079c:	89ba      	ldrh	r2, [r7, #12]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	801a      	strh	r2, [r3, #0]
	return status;
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	6039      	str	r1, [r7, #0]
 80007b8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80007be:	f107 020c 	add.w	r2, r7, #12
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2196      	movs	r1, #150	@ 0x96
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fdf2 	bl	80013b0 <VL53L1_RdWord>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 80007d6:	89ba      	ldrh	r2, [r7, #12]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	801a      	strh	r2, [r3, #0]
	return status;
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <VL53L1_BootDualSensors>:

#include "VL53L1_Handler.h"

uint8_t VL53L1_BootDualSensors(VL53L1X* sensor1, VL53L1X* sensor2)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	int status = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	TOF_TurnOff(sensor1);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fdc0 	bl	800037c <TOF_TurnOff>
	TOF_TurnOff(sensor2);
 80007fc:	6838      	ldr	r0, [r7, #0]
 80007fe:	f7ff fdbd 	bl	800037c <TOF_TurnOff>

	status |= TOF_BootSensor(sensor1);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fdca 	bl	800039c <TOF_BootSensor>
 8000808:	4602      	mov	r2, r0
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4313      	orrs	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
	status |= TOF_BootSensor(sensor2);
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f7ff fdc3 	bl	800039c <TOF_BootSensor>
 8000816:	4602      	mov	r2, r0
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4313      	orrs	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]


	return status;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	b2db      	uxtb	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <VL53L1_Error_Hanlder>:

void VL53L1_Error_Hanlder(int status) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	char buffer[10];
	sprintf(buffer, "%d", (int)status);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4906      	ldr	r1, [pc, #24]	@ (8000854 <VL53L1_Error_Hanlder+0x28>)
 800083c:	4618      	mov	r0, r3
 800083e:	f004 f99d 	bl	8004b7c <siprintf>
	Print(buffer, 200);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	21c8      	movs	r1, #200	@ 0xc8
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fcc3 	bl	80011d4 <Print>
	while (1) {}
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <VL53L1_Error_Hanlder+0x22>
 8000852:	bf00      	nop
 8000854:	08005678 	.word	0x08005678

08000858 <VL53L1_GetDistance>:
}

uint16_t VL53L1_GetDistance(VL53L1X* sensor) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	MX_I2C1_Init();
 8000860:	f000 f908 	bl	8000a74 <MX_I2C1_Init>
	sensor->distance = TOF_GetDistance(sensor);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fe27 	bl	80004b8 <TOF_GetDistance>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	611a      	str	r2, [r3, #16]
	return sensor->distance;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	b29b      	uxth	r3, r3
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_CAN_Init+0x68>)
 8000886:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <MX_CAN_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_CAN_Init+0x68>)
 800088c:	2204      	movs	r2, #4
 800088e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_CAN_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_CAN_Init+0x68>)
 8000898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800089c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008a0:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80008a4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008a8:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80008ac:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_CAN_Init+0x68>)
 80008d4:	f000 fe58 	bl	8001588 <HAL_CAN_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80008de:	f000 fada 	bl	8000e96 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000138 	.word	0x20000138
 80008ec:	40006400 	.word	0x40006400

080008f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a20      	ldr	r2, [pc, #128]	@ (800098c <HAL_CAN_MspInit+0x9c>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d139      	bne.n	8000984 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <HAL_CAN_MspInit+0xa0>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a1e      	ldr	r2, [pc, #120]	@ (8000990 <HAL_CAN_MspInit+0xa0>)
 8000916:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800091a:	61d3      	str	r3, [r2, #28]
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <HAL_CAN_MspInit+0xa0>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <HAL_CAN_MspInit+0xa0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <HAL_CAN_MspInit+0xa0>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <HAL_CAN_MspInit+0xa0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000940:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4619      	mov	r1, r3
 8000954:	480f      	ldr	r0, [pc, #60]	@ (8000994 <HAL_CAN_MspInit+0xa4>)
 8000956:	f001 fd65 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <HAL_CAN_MspInit+0xa4>)
 8000970:	f001 fd58 	bl	8002424 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2014      	movs	r0, #20
 800097a:	f001 fd1c 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800097e:	2014      	movs	r0, #20
 8000980:	f001 fd35 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40006400 	.word	0x40006400
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a27      	ldr	r2, [pc, #156]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO10_Pin|XSHUT1_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000a12:	4816      	ldr	r0, [pc, #88]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 8000a14:	f001 fe8a 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|XSHUT2_Pin
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8000a1e:	4814      	ldr	r0, [pc, #80]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 8000a20:	f001 fe84 	bl	800272c <HAL_GPIO_WritePin>
                          |GPIO11_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO10_Pin|XSHUT1_Pin;
 8000a24:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 8000a3e:	f001 fcf1 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|XSHUT2_Pin
 8000a42:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a46:	613b      	str	r3, [r7, #16]
                          |GPIO11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 8000a5c:	f001 fce2 	bl	8002424 <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <MX_I2C1_Init+0x54>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a80:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <MX_I2C1_Init+0x58>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_I2C1_Init+0x50>)
 8000ab2:	f001 fe53 	bl	800275c <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 f9eb 	bl	8000e96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000160 	.word	0x20000160
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	00061a80 	.word	0x00061a80

08000ad0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <HAL_I2C_MspInit+0x70>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d123      	bne.n	8000b38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a13      	ldr	r2, [pc, #76]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b08:	23c0      	movs	r3, #192	@ 0xc0
 8000b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <HAL_I2C_MspInit+0x78>)
 8000b1c:	f001 fc82 	bl	8002424 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	61d3      	str	r3, [r2, #28]
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_I2C_MspInit+0x74>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t state = 0, prevstate = 0, forceChange = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000b56:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 ffeb 	bl	8001b36 <HAL_CAN_GetRxMessage>
	returnSignal = RxData[0];
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000b66:	701a      	strb	r2, [r3, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000100 	.word	0x20000100
 8000b74:	200000bc 	.word	0x200000bc
 8000b78:	20000108 	.word	0x20000108

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b82:	f000 fc7b 	bl	800147c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b86:	f000 f941 	bl	8000e0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b8a:	f7ff ff05 	bl	8000998 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b8e:	f7ff ff71 	bl	8000a74 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000b92:	f000 faa9 	bl	80010e8 <MX_USART1_UART_Init>
	MX_CAN_Init();
 8000b96:	f7ff fe73 	bl	8000880 <MX_CAN_Init>
	MX_TIM3_Init();
 8000b9a:	f000 fa31 	bl	8001000 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	TOF_InitStruct(&sensor1, &hi2c1, 0x22, XSHUT1_GPIO_Port, XSHUT1_Pin);
 8000b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4b86      	ldr	r3, [pc, #536]	@ (8000dc0 <main+0x244>)
 8000ba6:	2222      	movs	r2, #34	@ 0x22
 8000ba8:	4986      	ldr	r1, [pc, #536]	@ (8000dc4 <main+0x248>)
 8000baa:	4887      	ldr	r0, [pc, #540]	@ (8000dc8 <main+0x24c>)
 8000bac:	f7ff fb84 	bl	80002b8 <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c1, 0x26, XSHUT2_GPIO_Port, XSHUT2_Pin);
 8000bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	4b85      	ldr	r3, [pc, #532]	@ (8000dcc <main+0x250>)
 8000bb8:	2226      	movs	r2, #38	@ 0x26
 8000bba:	4982      	ldr	r1, [pc, #520]	@ (8000dc4 <main+0x248>)
 8000bbc:	4884      	ldr	r0, [pc, #528]	@ (8000dd0 <main+0x254>)
 8000bbe:	f7ff fb7b 	bl	80002b8 <TOF_InitStruct>
	int status = VL53L1_BootDualSensors(&sensor1, &sensor2);
 8000bc2:	4983      	ldr	r1, [pc, #524]	@ (8000dd0 <main+0x254>)
 8000bc4:	4880      	ldr	r0, [pc, #512]	@ (8000dc8 <main+0x24c>)
 8000bc6:	f7ff fe0f 	bl	80007e8 <VL53L1_BootDualSensors>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	607b      	str	r3, [r7, #4]
	if (VL53L1_BootDualSensors(&sensor1, &sensor2) != 0) {
 8000bce:	4980      	ldr	r1, [pc, #512]	@ (8000dd0 <main+0x254>)
 8000bd0:	487d      	ldr	r0, [pc, #500]	@ (8000dc8 <main+0x24c>)
 8000bd2:	f7ff fe09 	bl	80007e8 <VL53L1_BootDualSensors>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <main+0x66>
		VL53L1_Error_Hanlder(status);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fe25 	bl	800082c <VL53L1_Error_Hanlder>
	}
	CAN_FilterInit_SingleFF0(&hcan, &canfilterconfig, ACTUATOR_ADDR);
 8000be2:	22a2      	movs	r2, #162	@ 0xa2
 8000be4:	497b      	ldr	r1, [pc, #492]	@ (8000dd4 <main+0x258>)
 8000be6:	487c      	ldr	r0, [pc, #496]	@ (8000dd8 <main+0x25c>)
 8000be8:	f7ff fad2 	bl	8000190 <CAN_FilterInit_SingleFF0>
	CAN_ComInit_Std(&TxHeader, &hcan, SENSOR_ADDR, 2);
 8000bec:	2302      	movs	r3, #2
 8000bee:	2212      	movs	r2, #18
 8000bf0:	4979      	ldr	r1, [pc, #484]	@ (8000dd8 <main+0x25c>)
 8000bf2:	487a      	ldr	r0, [pc, #488]	@ (8000ddc <main+0x260>)
 8000bf4:	f7ff fab2 	bl	800015c <CAN_ComInit_Std>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (forceChange != 0) {
 8000bf8:	4b79      	ldr	r3, [pc, #484]	@ (8000de0 <main+0x264>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00e      	beq.n	8000c1e <main+0xa2>
			if (forceChange == BACKWARD_RIGHT_STATE) {
 8000c00:	4b77      	ldr	r3, [pc, #476]	@ (8000de0 <main+0x264>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d103      	bne.n	8000c10 <main+0x94>
				state = LEFT_STATE;
 8000c08:	4b76      	ldr	r3, [pc, #472]	@ (8000de4 <main+0x268>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e002      	b.n	8000c16 <main+0x9a>
			} else {
				state = RIGHT_STATE;
 8000c10:	4b74      	ldr	r3, [pc, #464]	@ (8000de4 <main+0x268>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	701a      	strb	r2, [r3, #0]
			}
			forceChange = 0;
 8000c16:	4b72      	ldr	r3, [pc, #456]	@ (8000de0 <main+0x264>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e01b      	b.n	8000c56 <main+0xda>
		} else {
			VL53L1_GetDistance(&sensor1);
 8000c1e:	486a      	ldr	r0, [pc, #424]	@ (8000dc8 <main+0x24c>)
 8000c20:	f7ff fe1a 	bl	8000858 <VL53L1_GetDistance>
			VL53L1_GetDistance(&sensor2);
 8000c24:	486a      	ldr	r0, [pc, #424]	@ (8000dd0 <main+0x254>)
 8000c26:	f7ff fe17 	bl	8000858 <VL53L1_GetDistance>
			if (sensor2.distance >= 55) {
 8000c2a:	4b69      	ldr	r3, [pc, #420]	@ (8000dd0 <main+0x254>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b36      	cmp	r3, #54	@ 0x36
 8000c30:	dd04      	ble.n	8000c3c <main+0xc0>
				sensor2.distance += 50;
 8000c32:	4b67      	ldr	r3, [pc, #412]	@ (8000dd0 <main+0x254>)
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	3332      	adds	r3, #50	@ 0x32
 8000c38:	4a65      	ldr	r2, [pc, #404]	@ (8000dd0 <main+0x254>)
 8000c3a:	6113      	str	r3, [r2, #16]
			}

			state = Get_State(sensor1.distance, sensor2.distance, 0, prevstate);
 8000c3c:	4b62      	ldr	r3, [pc, #392]	@ (8000dc8 <main+0x24c>)
 8000c3e:	6918      	ldr	r0, [r3, #16]
 8000c40:	4b63      	ldr	r3, [pc, #396]	@ (8000dd0 <main+0x254>)
 8000c42:	6919      	ldr	r1, [r3, #16]
 8000c44:	4b68      	ldr	r3, [pc, #416]	@ (8000de8 <main+0x26c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f7ff fae5 	bl	8000218 <Get_State>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b64      	ldr	r3, [pc, #400]	@ (8000de4 <main+0x268>)
 8000c54:	701a      	strb	r2, [r3, #0]
		}


		switch (state) {
 8000c56:	4b63      	ldr	r3, [pc, #396]	@ (8000de4 <main+0x268>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8cb      	bhi.n	8000bf8 <main+0x7c>
 8000c60:	a201      	add	r2, pc, #4	@ (adr r2, 8000c68 <main+0xec>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c89 	.word	0x08000c89
 8000c6c:	08000cb3 	.word	0x08000cb3
 8000c70:	08000ce7 	.word	0x08000ce7
 8000c74:	08000cf9 	.word	0x08000cf9
 8000c78:	08000d4d 	.word	0x08000d4d
 8000c7c:	08000bf9 	.word	0x08000bf9
 8000c80:	08000bf9 	.word	0x08000bf9
 8000c84:	08000da1 	.word	0x08000da1
		case LEFT_STATE:
			forceChange = 0;
 8000c88:	4b55      	ldr	r3, [pc, #340]	@ (8000de0 <main+0x264>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
			prevstate = state;
 8000c8e:	4b55      	ldr	r3, [pc, #340]	@ (8000de4 <main+0x268>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b55      	ldr	r3, [pc, #340]	@ (8000de8 <main+0x26c>)
 8000c94:	701a      	strb	r2, [r3, #0]

			HAL_Delay(50);
 8000c96:	2032      	movs	r0, #50	@ 0x32
 8000c98:	f000 fc52 	bl	8001540 <HAL_Delay>
			while (returnSignal != LEFT_STATE) {
 8000c9c:	e004      	b.n	8000ca8 <main+0x12c>
				CAN_Transmit(&hcan, &TxHeader, LEFT);
 8000c9e:	4a53      	ldr	r2, [pc, #332]	@ (8000dec <main+0x270>)
 8000ca0:	494e      	ldr	r1, [pc, #312]	@ (8000ddc <main+0x260>)
 8000ca2:	484d      	ldr	r0, [pc, #308]	@ (8000dd8 <main+0x25c>)
 8000ca4:	f7ff faa4 	bl	80001f0 <CAN_Transmit>
			while (returnSignal != LEFT_STATE) {
 8000ca8:	4b51      	ldr	r3, [pc, #324]	@ (8000df0 <main+0x274>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d1f6      	bne.n	8000c9e <main+0x122>
			}
			break;
 8000cb0:	e084      	b.n	8000dbc <main+0x240>
		case RIGHT_STATE:
			forceChange = 0;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8000de0 <main+0x264>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			prevstate = state;
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000de4 <main+0x268>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8000de8 <main+0x26c>)
 8000cbe:	701a      	strb	r2, [r3, #0]
			CAN_Transmit(&hcan, &TxHeader, RIGHT);
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8000df4 <main+0x278>)
 8000cc2:	4946      	ldr	r1, [pc, #280]	@ (8000ddc <main+0x260>)
 8000cc4:	4844      	ldr	r0, [pc, #272]	@ (8000dd8 <main+0x25c>)
 8000cc6:	f7ff fa93 	bl	80001f0 <CAN_Transmit>
			HAL_Delay(50);
 8000cca:	2032      	movs	r0, #50	@ 0x32
 8000ccc:	f000 fc38 	bl	8001540 <HAL_Delay>
			while (returnSignal != RIGHT_STATE) {
 8000cd0:	e004      	b.n	8000cdc <main+0x160>
				CAN_Transmit(&hcan, &TxHeader, RIGHT);
 8000cd2:	4a48      	ldr	r2, [pc, #288]	@ (8000df4 <main+0x278>)
 8000cd4:	4941      	ldr	r1, [pc, #260]	@ (8000ddc <main+0x260>)
 8000cd6:	4840      	ldr	r0, [pc, #256]	@ (8000dd8 <main+0x25c>)
 8000cd8:	f7ff fa8a 	bl	80001f0 <CAN_Transmit>
			while (returnSignal != RIGHT_STATE) {
 8000cdc:	4b44      	ldr	r3, [pc, #272]	@ (8000df0 <main+0x274>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d1f6      	bne.n	8000cd2 <main+0x156>
			}
			break;
 8000ce4:	e06a      	b.n	8000dbc <main+0x240>
		case FORWARD_STATE:
			forceChange = 0;
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8000de0 <main+0x264>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
			//prevstate = state;
			CAN_Transmit(&hcan, &TxHeader, FORWARD);
 8000cec:	4a42      	ldr	r2, [pc, #264]	@ (8000df8 <main+0x27c>)
 8000cee:	493b      	ldr	r1, [pc, #236]	@ (8000ddc <main+0x260>)
 8000cf0:	4839      	ldr	r0, [pc, #228]	@ (8000dd8 <main+0x25c>)
 8000cf2:	f7ff fa7d 	bl	80001f0 <CAN_Transmit>
			//while (returnSignal != FORWARD_STATE) {}
			break;
 8000cf6:	e061      	b.n	8000dbc <main+0x240>
		case BACKWARD_LEFT_STATE:
			CAN_Transmit(&hcan, &TxHeader, BACKWARD_LEFT);
 8000cf8:	4a40      	ldr	r2, [pc, #256]	@ (8000dfc <main+0x280>)
 8000cfa:	4938      	ldr	r1, [pc, #224]	@ (8000ddc <main+0x260>)
 8000cfc:	4836      	ldr	r0, [pc, #216]	@ (8000dd8 <main+0x25c>)
 8000cfe:	f7ff fa77 	bl	80001f0 <CAN_Transmit>
			while (state == BACKWARD_LEFT_STATE) {
 8000d02:	e01b      	b.n	8000d3c <main+0x1c0>
				VL53L1_GetDistance(&sensor1);
 8000d04:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <main+0x24c>)
 8000d06:	f7ff fda7 	bl	8000858 <VL53L1_GetDistance>
				VL53L1_GetDistance(&sensor2);
 8000d0a:	4831      	ldr	r0, [pc, #196]	@ (8000dd0 <main+0x254>)
 8000d0c:	f7ff fda4 	bl	8000858 <VL53L1_GetDistance>
				if (sensor2.distance >= 55) {
 8000d10:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <main+0x254>)
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b36      	cmp	r3, #54	@ 0x36
 8000d16:	dd04      	ble.n	8000d22 <main+0x1a6>
					sensor2.distance += 50;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <main+0x254>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	3332      	adds	r3, #50	@ 0x32
 8000d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd0 <main+0x254>)
 8000d20:	6113      	str	r3, [r2, #16]
				}
				state = Get_State(sensor1.distance, sensor2.distance, 0, prevstate);
 8000d22:	4b29      	ldr	r3, [pc, #164]	@ (8000dc8 <main+0x24c>)
 8000d24:	6918      	ldr	r0, [r3, #16]
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <main+0x254>)
 8000d28:	6919      	ldr	r1, [r3, #16]
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <main+0x26c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f7ff fa72 	bl	8000218 <Get_State>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <main+0x268>)
 8000d3a:	701a      	strb	r2, [r3, #0]
			while (state == BACKWARD_LEFT_STATE) {
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <main+0x268>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d0df      	beq.n	8000d04 <main+0x188>
			}
			forceChange = BACKWARD_LEFT_STATE;
 8000d44:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <main+0x264>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	701a      	strb	r2, [r3, #0]
			break;
 8000d4a:	e037      	b.n	8000dbc <main+0x240>
		case BACKWARD_RIGHT_STATE:
			CAN_Transmit(&hcan, &TxHeader, BACKWARD_RIGHT);
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e00 <main+0x284>)
 8000d4e:	4923      	ldr	r1, [pc, #140]	@ (8000ddc <main+0x260>)
 8000d50:	4821      	ldr	r0, [pc, #132]	@ (8000dd8 <main+0x25c>)
 8000d52:	f7ff fa4d 	bl	80001f0 <CAN_Transmit>
			while (state == BACKWARD_RIGHT_STATE) {
 8000d56:	e01b      	b.n	8000d90 <main+0x214>
				VL53L1_GetDistance(&sensor1);
 8000d58:	481b      	ldr	r0, [pc, #108]	@ (8000dc8 <main+0x24c>)
 8000d5a:	f7ff fd7d 	bl	8000858 <VL53L1_GetDistance>
				VL53L1_GetDistance(&sensor2);
 8000d5e:	481c      	ldr	r0, [pc, #112]	@ (8000dd0 <main+0x254>)
 8000d60:	f7ff fd7a 	bl	8000858 <VL53L1_GetDistance>
				if (sensor2.distance >= 55) {
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <main+0x254>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b36      	cmp	r3, #54	@ 0x36
 8000d6a:	dd04      	ble.n	8000d76 <main+0x1fa>
					sensor2.distance += 50;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <main+0x254>)
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	3332      	adds	r3, #50	@ 0x32
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <main+0x254>)
 8000d74:	6113      	str	r3, [r2, #16]
				}
				state = Get_State(sensor1.distance, sensor2.distance, 0, prevstate);
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <main+0x24c>)
 8000d78:	6918      	ldr	r0, [r3, #16]
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <main+0x254>)
 8000d7c:	6919      	ldr	r1, [r3, #16]
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <main+0x26c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fa48 	bl	8000218 <Get_State>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <main+0x268>)
 8000d8e:	701a      	strb	r2, [r3, #0]
			while (state == BACKWARD_RIGHT_STATE) {
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <main+0x268>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d0df      	beq.n	8000d58 <main+0x1dc>
			}
			forceChange = BACKWARD_RIGHT_STATE;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <main+0x264>)
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	701a      	strb	r2, [r3, #0]
			break;
 8000d9e:	e00d      	b.n	8000dbc <main+0x240>
		case TEST_SENSORS:
			sprintf(buffer, "\n\rSensor 1\n\r  D1: %dmm\n\n\rSensor 2\n\r  D2: %dmm", sensor1.distance, sensor2.distance);
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <main+0x24c>)
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <main+0x254>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	4916      	ldr	r1, [pc, #88]	@ (8000e04 <main+0x288>)
 8000daa:	4817      	ldr	r0, [pc, #92]	@ (8000e08 <main+0x28c>)
 8000dac:	f003 fee6 	bl	8004b7c <siprintf>
			Print(buffer, 200);
 8000db0:	21c8      	movs	r1, #200	@ 0xc8
 8000db2:	4815      	ldr	r0, [pc, #84]	@ (8000e08 <main+0x28c>)
 8000db4:	f000 fa0e 	bl	80011d4 <Print>
			break;
 8000db8:	bf00      	nop
 8000dba:	e71d      	b.n	8000bf8 <main+0x7c>
		if (forceChange != 0) {
 8000dbc:	e71c      	b.n	8000bf8 <main+0x7c>
 8000dbe:	bf00      	nop
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	20000160 	.word	0x20000160
 8000dc8:	200001b4 	.word	0x200001b4
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	200001c8 	.word	0x200001c8
 8000dd4:	200000d8 	.word	0x200000d8
 8000dd8:	20000138 	.word	0x20000138
 8000ddc:	200000a0 	.word	0x200000a0
 8000de0:	20000242 	.word	0x20000242
 8000de4:	20000240 	.word	0x20000240
 8000de8:	20000241 	.word	0x20000241
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000108 	.word	0x20000108
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000010 	.word	0x20000010
 8000dfc:	20000018 	.word	0x20000018
 8000e00:	20000020 	.word	0x20000020
 8000e04:	0800567c 	.word	0x0800567c
 8000e08:	200001dc 	.word	0x200001dc

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b090      	sub	sp, #64	@ 0x40
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	2228      	movs	r2, #40	@ 0x28
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fece 	bl	8004bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e4a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fcb5 	bl	80037c4 <HAL_RCC_OscConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e60:	f000 f819 	bl	8000e96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 ff22 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e8a:	f000 f804 	bl	8000e96 <Error_Handler>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3740      	adds	r7, #64	@ 0x40
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9a:	b672      	cpsid	i
}
 8000e9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9e:	bf00      	nop
 8000ea0:	e7fd      	b.n	8000e9e <Error_Handler+0x8>
	...

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_MspInit+0x60>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_MspInit+0x60>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 fad6 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f66:	f000 ff2c 	bl	8001dc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000138 	.word	0x20000138

08000f74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <TIM3_IRQHandler+0x10>)
 8000f7a:	f003 f882 	bl	8004082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000248 	.word	0x20000248

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d207      	bcs.n	8000fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb8:	f003 fe08 	bl	8004bcc <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20005000 	.word	0x20005000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000244 	.word	0x20000244
 8000ff0:	20000528 	.word	0x20000528

08000ff4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_TIM3_Init+0x94>)
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <MX_TIM3_Init+0x98>)
 8001020:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <MX_TIM3_Init+0x94>)
 8001024:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001028:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_TIM3_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_TIM3_Init+0x94>)
 8001032:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_TIM3_Init+0x94>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_TIM3_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001044:	4813      	ldr	r0, [pc, #76]	@ (8001094 <MX_TIM3_Init+0x94>)
 8001046:	f002 ffcd 	bl	8003fe4 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001050:	f7ff ff21 	bl	8000e96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <MX_TIM3_Init+0x94>)
 8001062:	f003 f8fe 	bl	8004262 <HAL_TIM_ConfigClockSource>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800106c:	f7ff ff13 	bl	8000e96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_TIM3_Init+0x94>)
 800107e:	f003 fae9 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001088:	f7ff ff05 	bl	8000e96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000248 	.word	0x20000248
 8001098:	40000400 	.word	0x40000400

0800109c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <HAL_TIM_Base_MspInit+0x44>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d113      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	201d      	movs	r0, #29
 80010cc:	f001 f973 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010d0:	201d      	movs	r0, #29
 80010d2:	f001 f98c 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_USART1_UART_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_USART1_UART_Init+0x4c>)
 8001120:	f003 fb08 	bl	8004734 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800112a:	f7ff feb4 	bl	8000e96 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000290 	.word	0x20000290
 8001138:	40013800 	.word	0x40013800

0800113c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <HAL_UART_MspInit+0x8c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d131      	bne.n	80011c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_UART_MspInit+0x90>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <HAL_UART_MspInit+0x90>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_UART_MspInit+0x90>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_UART_MspInit+0x90>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <HAL_UART_MspInit+0x90>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_UART_MspInit+0x90>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800118c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <HAL_UART_MspInit+0x94>)
 80011a2:	f001 f93f 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_UART_MspInit+0x94>)
 80011bc:	f001 f932 	bl	8002424 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800

080011d4 <Print>:
  }
}

/* USER CODE BEGIN 1 */
void Print(char *buffer, uint16_t timeout)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 200);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7fe ffb3 	bl	800014c <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	23c8      	movs	r3, #200	@ 0xc8
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <Print+0x28>)
 80011f0:	f003 faf0 	bl	80047d4 <HAL_UART_Transmit>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000290 	.word	0x20000290

08001200 <_GetTof>:
extern VL53L1X* registered_sensors[];
extern size_t registered_sensors_cnt;
uint8_t _I2CBuffer[256];

VL53L1X* _GetTof(uint16_t dev)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e016      	b.n	800123e <_GetTof+0x3e>
		if (registered_sensors[i] != NULL && registered_sensors[i]->id == dev)
 8001210:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <_GetTof+0x54>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00d      	beq.n	8001238 <_GetTof+0x38>
 800121c:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <_GetTof+0x54>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	7b9b      	ldrb	r3, [r3, #14]
 8001226:	461a      	mov	r2, r3
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4293      	cmp	r3, r2
 800122c:	d104      	bne.n	8001238 <_GetTof+0x38>
		{
			return registered_sensors[i];
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <_GetTof+0x54>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	e008      	b.n	800124a <_GetTof+0x4a>
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <_GetTof+0x58>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3e3      	bcc.n	8001210 <_GetTof+0x10>
		}

	return NULL;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	2000010c 	.word	0x2000010c
 8001258:	080056ac 	.word	0x080056ac

0800125c <_I2CWrite>:

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	4603      	mov	r3, r0
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffc7 	bl	8001200 <_GetTof>
 8001272:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <_I2CWrite+0x22>
		return 1;
 800127a:	2301      	movs	r3, #1
 800127c:	e00d      	b.n	800129a <_I2CWrite+0x3e>

	return (int) HAL_I2C_Master_Transmit(tof->hi2c, tof->address << 1, pdata, count, 100);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b299      	uxth	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b29b      	uxth	r3, r3
 800128e:	2264      	movs	r2, #100	@ 0x64
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f001 fba6 	bl	80029e4 <HAL_I2C_Master_Transmit>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b088      	sub	sp, #32
 80012a6:	af02      	add	r7, sp, #8
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffa4 	bl	8001200 <_GetTof>
 80012b8:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <_I2CRead+0x22>
		return 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e00d      	b.n	80012e0 <_I2CRead+0x3e>

    return (int) HAL_I2C_Master_Receive(tof->hi2c, tof->address << 1, pdata, count, 100);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b299      	uxth	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	2264      	movs	r2, #100	@ 0x64
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	f001 fc81 	bl	8002be0 <HAL_I2C_Master_Receive>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	b29b      	uxth	r3, r3
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <VL53L1_WrByte+0x54>)
 8001308:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <VL53L1_WrByte+0x54>)
 8001310:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <VL53L1_WrByte+0x54>)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	2203      	movs	r2, #3
 800131c:	4907      	ldr	r1, [pc, #28]	@ (800133c <VL53L1_WrByte+0x54>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff9c 	bl	800125c <_I2CWrite>
 8001324:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800132c:	23f3      	movs	r3, #243	@ 0xf3
 800132e:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002d8 	.word	0x200002d8

08001340 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	603a      	str	r2, [r7, #0]
 800134a:	80fb      	strh	r3, [r7, #6]
 800134c:	460b      	mov	r3, r1
 800134e:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <VL53L1_RdByte+0x6c>)
 800135e:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <VL53L1_RdByte+0x6c>)
 8001366:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	2202      	movs	r2, #2
 800136c:	490f      	ldr	r1, [pc, #60]	@ (80013ac <VL53L1_RdByte+0x6c>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff74 	bl	800125c <_I2CWrite>
 8001374:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800137c:	23f3      	movs	r3, #243	@ 0xf3
 800137e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001380:	e00d      	b.n	800139e <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2201      	movs	r2, #1
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff8a 	bl	80012a2 <_I2CRead>
 800138e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001396:	23f3      	movs	r3, #243	@ 0xf3
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e000      	b.n	800139e <VL53L1_RdByte+0x5e>
    }
done:
 800139c:	bf00      	nop

	return Status;
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002d8 	.word	0x200002d8

080013b0 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	603a      	str	r2, [r7, #0]
 80013ba:	80fb      	strh	r3, [r7, #6]
 80013bc:	460b      	mov	r3, r1
 80013be:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <VL53L1_RdWord+0x7c>)
 80013ce:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <VL53L1_RdWord+0x7c>)
 80013d6:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	2202      	movs	r2, #2
 80013dc:	4913      	ldr	r1, [pc, #76]	@ (800142c <VL53L1_RdWord+0x7c>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff3c 	bl	800125c <_I2CWrite>
 80013e4:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80013ec:	23f3      	movs	r3, #243	@ 0xf3
 80013ee:	73fb      	strb	r3, [r7, #15]
        goto done;
 80013f0:	e016      	b.n	8001420 <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	2202      	movs	r2, #2
 80013f6:	490d      	ldr	r1, [pc, #52]	@ (800142c <VL53L1_RdWord+0x7c>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff52 	bl	80012a2 <_I2CRead>
 80013fe:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001406:	23f3      	movs	r3, #243	@ 0xf3
 8001408:	73fb      	strb	r3, [r7, #15]
        goto done;
 800140a:	e009      	b.n	8001420 <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <VL53L1_RdWord+0x7c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	4a05      	ldr	r2, [pc, #20]	@ (800142c <VL53L1_RdWord+0x7c>)
 8001416:	7852      	ldrb	r2, [r2, #1]
 8001418:	4413      	add	r3, r2
 800141a:	b29a      	uxth	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200002d8 	.word	0x200002d8

08001430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff fde0 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480b      	ldr	r0, [pc, #44]	@ (8001464 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001436:	490c      	ldr	r1, [pc, #48]	@ (8001468 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001438:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <LoopFillZerobss+0x16>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800144c:	4c09      	ldr	r4, [pc, #36]	@ (8001474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f003 fbbd 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145e:	f7ff fb8d 	bl	8000b7c <main>
  bx lr
 8001462:	4770      	bx	lr
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800146c:	0800577c 	.word	0x0800577c
  ldr r2, =_sbss
 8001470:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001474:	20000524 	.word	0x20000524

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_Init+0x28>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_Init+0x28>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 ff87 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fd04 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 ff9f 	bl	800240a <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 ff67 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000028 	.word	0x20000028
 8001500:	20000030 	.word	0x20000030
 8001504:	2000002c 	.word	0x2000002c

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	@ (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000030 	.word	0x20000030
 8001528:	200003d8 	.word	0x200003d8

0800152c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	@ (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200003d8 	.word	0x200003d8

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fff0 	bl	800152c <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffe0 	bl	800152c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000030 	.word	0x20000030

08001588 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0ed      	b.n	8001776 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff f9a2 	bl	80008f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff ffb6 	bl	800152c <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff ffb2 	bl	800152c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0c5      	b.n	8001776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0e5      	beq.n	80015c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0202 	bic.w	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff ff90 	bl	800152c <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff ff8c 	bl	800152c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e09f      	b.n	8001776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e5      	bne.n	8001610 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7e1b      	ldrb	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e007      	b.n	800166e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7e5b      	ldrb	r3, [r3, #25]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e007      	b.n	8001698 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001696:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e9b      	ldrb	r3, [r3, #26]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0220 	bic.w	r2, r2, #32
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7edb      	ldrb	r3, [r3, #27]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0210 	bic.w	r2, r2, #16
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e007      	b.n	80016ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0210 	orr.w	r2, r2, #16
 80016ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f1b      	ldrb	r3, [r3, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e007      	b.n	8001716 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0208 	bic.w	r2, r2, #8
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7f5b      	ldrb	r3, [r3, #29]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0204 	orr.w	r2, r2, #4
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0204 	bic.w	r2, r2, #4
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	ea42 0103 	orr.w	r1, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800177e:	b480      	push	{r7}
 8001780:	b087      	sub	sp, #28
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001796:	7cfb      	ldrb	r3, [r7, #19]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d003      	beq.n	80017a4 <HAL_CAN_ConfigFilter+0x26>
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	f040 80aa 	bne.w	80018f8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2201      	movs	r2, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d123      	bne.n	8001826 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001800:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3248      	adds	r2, #72	@ 0x48
 8001806:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800181a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	3348      	adds	r3, #72	@ 0x48
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d122      	bne.n	8001874 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800184e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3248      	adds	r2, #72	@ 0x48
 8001854:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001868:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	3348      	adds	r3, #72	@ 0x48
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800188e:	e007      	b.n	80018a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018ba:	e007      	b.n	80018cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018ea:	f023 0201 	bic.w	r2, r3, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e006      	b.n	8001906 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d12e      	bne.n	8001982 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fdf6 	bl	800152c <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001942:	e012      	b.n	800196a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001944:	f7ff fdf2 	bl	800152c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d90b      	bls.n	800196a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e012      	b.n	8001990 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e5      	bne.n	8001944 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e006      	b.n	8001990 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_AddTxMessage+0x2c>
 80019bc:	7ffb      	ldrb	r3, [r7, #31]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	f040 80ad 	bne.w	8001b1e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8095 	beq.w	8001b0e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	0e1b      	lsrs	r3, r3, #24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019ee:	2201      	movs	r2, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a0a:	68f9      	ldr	r1, [r7, #12]
 8001a0c:	6809      	ldr	r1, [r1, #0]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3318      	adds	r3, #24
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	440b      	add	r3, r1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e00f      	b.n	8001a3c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a26:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a30:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3318      	adds	r3, #24
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	440b      	add	r3, r1
 8001a3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3318      	adds	r3, #24
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	7d1b      	ldrb	r3, [r3, #20]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d111      	bne.n	8001a7c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3318      	adds	r3, #24
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	6811      	ldr	r1, [r2, #0]
 8001a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3318      	adds	r3, #24
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	440b      	add	r3, r1
 8001a78:	3304      	adds	r3, #4
 8001a7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3307      	adds	r3, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	061a      	lsls	r2, r3, #24
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3306      	adds	r3, #6
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3305      	adds	r3, #5
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	4313      	orrs	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	3204      	adds	r2, #4
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	ea43 0200 	orr.w	r2, r3, r0
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	440b      	add	r3, r1
 8001aae:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ab2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	061a      	lsls	r2, r3, #24
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	ea43 0200 	orr.w	r2, r3, r0
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001ae8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3318      	adds	r3, #24
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	6811      	ldr	r1, [r2, #0]
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3318      	adds	r3, #24
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	440b      	add	r3, r1
 8001b08:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e00e      	b.n	8001b2c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e006      	b.n	8001b2c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3724      	adds	r7, #36	@ 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b36:	b480      	push	{r7}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d003      	beq.n	8001b5a <HAL_CAN_GetRxMessage+0x24>
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	f040 8103 	bne.w	8001d60 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10e      	bne.n	8001b7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d116      	bne.n	8001b9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0f7      	b.n	8001d6e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0e8      	b.n	8001d6e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	331b      	adds	r3, #27
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0204 	and.w	r2, r3, #4
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	331b      	adds	r3, #27
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0d5b      	lsrs	r3, r3, #21
 8001bca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	331b      	adds	r3, #27
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	331b      	adds	r3, #27
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0202 	and.w	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	331b      	adds	r3, #27
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	e00b      	b.n	8001c3a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	331b      	adds	r3, #27
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	331b      	adds	r3, #27
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	331b      	adds	r3, #27
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0a1a      	lsrs	r2, r3, #8
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0c1a      	lsrs	r2, r3, #16
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e1a      	lsrs	r2, r3, #24
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3303      	adds	r3, #3
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0a1a      	lsrs	r2, r3, #8
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3305      	adds	r3, #5
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1a      	lsrs	r2, r3, #16
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3306      	adds	r3, #6
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0e1a      	lsrs	r2, r3, #24
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3307      	adds	r3, #7
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0220 	orr.w	r2, r2, #32
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e007      	b.n	8001d5c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e006      	b.n	8001d6e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d88:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d002      	beq.n	8001d96 <HAL_CAN_ActivateNotification+0x1e>
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d109      	bne.n	8001daa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6959      	ldr	r1, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e006      	b.n	8001db8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b08a      	sub	sp, #40	@ 0x28
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d07c      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d023      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f983 	bl	8002130 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e2a:	e016      	b.n	8001e5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3e:	e00c      	b.n	8001e5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	e002      	b.n	8001e5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f986 	bl	8002166 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d024      	beq.n	8001eae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f962 	bl	8002142 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e7e:	e016      	b.n	8001eae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e92:	e00c      	b.n	8001eae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	e002      	b.n	8001eae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f965 	bl	8002178 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d024      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ec0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f941 	bl	8002154 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ed2:	e016      	b.n	8001f02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee6:	e00c      	b.n	8001f02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efa:	e002      	b.n	8001f02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f944 	bl	800218a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00c      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2208      	movs	r2, #8
 8001f40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f92a 	bl	800219c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7fe fdf3 	bl	8000b4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00c      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2210      	movs	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f90a 	bl	80021c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8f2 	bl	80021ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8f3 	bl	80021d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2208      	movs	r2, #8
 8002006:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f8eb 	bl	80021e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d07b      	beq.n	8002110 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d072      	beq.n	8002108 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800207c:	2b00      	cmp	r3, #0
 800207e:	d043      	beq.n	8002108 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d03e      	beq.n	8002108 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002090:	2b60      	cmp	r3, #96	@ 0x60
 8002092:	d02b      	beq.n	80020ec <HAL_CAN_IRQHandler+0x32a>
 8002094:	2b60      	cmp	r3, #96	@ 0x60
 8002096:	d82e      	bhi.n	80020f6 <HAL_CAN_IRQHandler+0x334>
 8002098:	2b50      	cmp	r3, #80	@ 0x50
 800209a:	d022      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x320>
 800209c:	2b50      	cmp	r3, #80	@ 0x50
 800209e:	d82a      	bhi.n	80020f6 <HAL_CAN_IRQHandler+0x334>
 80020a0:	2b40      	cmp	r3, #64	@ 0x40
 80020a2:	d019      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x316>
 80020a4:	2b40      	cmp	r3, #64	@ 0x40
 80020a6:	d826      	bhi.n	80020f6 <HAL_CAN_IRQHandler+0x334>
 80020a8:	2b30      	cmp	r3, #48	@ 0x30
 80020aa:	d010      	beq.n	80020ce <HAL_CAN_IRQHandler+0x30c>
 80020ac:	2b30      	cmp	r3, #48	@ 0x30
 80020ae:	d822      	bhi.n	80020f6 <HAL_CAN_IRQHandler+0x334>
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d002      	beq.n	80020ba <HAL_CAN_IRQHandler+0x2f8>
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d005      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020b8:	e01d      	b.n	80020f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020c2:	e019      	b.n	80020f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020cc:	e014      	b.n	80020f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020d6:	e00f      	b.n	80020f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020e0:	e00a      	b.n	80020f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020ea:	e005      	b.n	80020f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020f4:	e000      	b.n	80020f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80020f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002106:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2204      	movs	r2, #4
 800210e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f867 	bl	80021f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	@ 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	@ (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <__NVIC_EnableIRQ+0x34>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	@ (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	@ (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff90 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff2d 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff42 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff90 	bl	80022f8 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5f 	bl	80022a4 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff35 	bl	800226c <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b08b      	sub	sp, #44	@ 0x2c
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002436:	e169      	b.n	800270c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002438:	2201      	movs	r2, #1
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8158 	bne.w	8002706 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4a9a      	ldr	r2, [pc, #616]	@ (80026c4 <HAL_GPIO_Init+0x2a0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d05e      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002460:	4a98      	ldr	r2, [pc, #608]	@ (80026c4 <HAL_GPIO_Init+0x2a0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d875      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002466:	4a98      	ldr	r2, [pc, #608]	@ (80026c8 <HAL_GPIO_Init+0x2a4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d058      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 800246c:	4a96      	ldr	r2, [pc, #600]	@ (80026c8 <HAL_GPIO_Init+0x2a4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d86f      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002472:	4a96      	ldr	r2, [pc, #600]	@ (80026cc <HAL_GPIO_Init+0x2a8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d052      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002478:	4a94      	ldr	r2, [pc, #592]	@ (80026cc <HAL_GPIO_Init+0x2a8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d869      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800247e:	4a94      	ldr	r2, [pc, #592]	@ (80026d0 <HAL_GPIO_Init+0x2ac>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04c      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002484:	4a92      	ldr	r2, [pc, #584]	@ (80026d0 <HAL_GPIO_Init+0x2ac>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d863      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800248a:	4a92      	ldr	r2, [pc, #584]	@ (80026d4 <HAL_GPIO_Init+0x2b0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d046      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002490:	4a90      	ldr	r2, [pc, #576]	@ (80026d4 <HAL_GPIO_Init+0x2b0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d85d      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002496:	2b12      	cmp	r3, #18
 8002498:	d82a      	bhi.n	80024f0 <HAL_GPIO_Init+0xcc>
 800249a:	2b12      	cmp	r3, #18
 800249c:	d859      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800249e:	a201      	add	r2, pc, #4	@ (adr r2, 80024a4 <HAL_GPIO_Init+0x80>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	0800251f 	.word	0x0800251f
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	0800250b 	.word	0x0800250b
 80024b0:	0800254d 	.word	0x0800254d
 80024b4:	08002553 	.word	0x08002553
 80024b8:	08002553 	.word	0x08002553
 80024bc:	08002553 	.word	0x08002553
 80024c0:	08002553 	.word	0x08002553
 80024c4:	08002553 	.word	0x08002553
 80024c8:	08002553 	.word	0x08002553
 80024cc:	08002553 	.word	0x08002553
 80024d0:	08002553 	.word	0x08002553
 80024d4:	08002553 	.word	0x08002553
 80024d8:	08002553 	.word	0x08002553
 80024dc:	08002553 	.word	0x08002553
 80024e0:	08002553 	.word	0x08002553
 80024e4:	08002553 	.word	0x08002553
 80024e8:	08002501 	.word	0x08002501
 80024ec:	08002515 	.word	0x08002515
 80024f0:	4a79      	ldr	r2, [pc, #484]	@ (80026d8 <HAL_GPIO_Init+0x2b4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024f6:	e02c      	b.n	8002552 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e029      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e024      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	3308      	adds	r3, #8
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e01f      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	330c      	adds	r3, #12
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	e01a      	b.n	8002554 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002526:	2304      	movs	r3, #4
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e013      	b.n	8002554 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002534:	2308      	movs	r3, #8
 8002536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	611a      	str	r2, [r3, #16]
          break;
 800253e:	e009      	b.n	8002554 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002540:	2308      	movs	r3, #8
 8002542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	615a      	str	r2, [r3, #20]
          break;
 800254a:	e003      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x130>
          break;
 8002552:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2bff      	cmp	r3, #255	@ 0xff
 8002558:	d801      	bhi.n	800255e <HAL_GPIO_Init+0x13a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_Init+0x13e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2bff      	cmp	r3, #255	@ 0xff
 8002568:	d802      	bhi.n	8002570 <HAL_GPIO_Init+0x14c>
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x152>
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	3b08      	subs	r3, #8
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	210f      	movs	r1, #15
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	6a39      	ldr	r1, [r7, #32]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80b1 	beq.w	8002706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a4:	4b4d      	ldr	r3, [pc, #308]	@ (80026dc <HAL_GPIO_Init+0x2b8>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a4c      	ldr	r2, [pc, #304]	@ (80026dc <HAL_GPIO_Init+0x2b8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <HAL_GPIO_Init+0x2b8>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025bc:	4a48      	ldr	r2, [pc, #288]	@ (80026e0 <HAL_GPIO_Init+0x2bc>)
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a40      	ldr	r2, [pc, #256]	@ (80026e4 <HAL_GPIO_Init+0x2c0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_GPIO_Init+0x1ec>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3f      	ldr	r2, [pc, #252]	@ (80026e8 <HAL_GPIO_Init+0x2c4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00d      	beq.n	800260c <HAL_GPIO_Init+0x1e8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3e      	ldr	r2, [pc, #248]	@ (80026ec <HAL_GPIO_Init+0x2c8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <HAL_GPIO_Init+0x1e4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a3d      	ldr	r2, [pc, #244]	@ (80026f0 <HAL_GPIO_Init+0x2cc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_GPIO_Init+0x1e0>
 8002600:	2303      	movs	r3, #3
 8002602:	e006      	b.n	8002612 <HAL_GPIO_Init+0x1ee>
 8002604:	2304      	movs	r3, #4
 8002606:	e004      	b.n	8002612 <HAL_GPIO_Init+0x1ee>
 8002608:	2302      	movs	r3, #2
 800260a:	e002      	b.n	8002612 <HAL_GPIO_Init+0x1ee>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_GPIO_Init+0x1ee>
 8002610:	2300      	movs	r3, #0
 8002612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002614:	f002 0203 	and.w	r2, r2, #3
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	4093      	lsls	r3, r2
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002622:	492f      	ldr	r1, [pc, #188]	@ (80026e0 <HAL_GPIO_Init+0x2bc>)
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d006      	beq.n	800264a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800263c:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	492c      	ldr	r1, [pc, #176]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800264a:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	43db      	mvns	r3, r3
 8002652:	4928      	ldr	r1, [pc, #160]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 8002654:	4013      	ands	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002664:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	4922      	ldr	r1, [pc, #136]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	43db      	mvns	r3, r3
 800267a:	491e      	ldr	r1, [pc, #120]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 800267c:	4013      	ands	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4918      	ldr	r1, [pc, #96]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800269a:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4914      	ldr	r1, [pc, #80]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d021      	beq.n	80026f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	490e      	ldr	r1, [pc, #56]	@ (80026f4 <HAL_GPIO_Init+0x2d0>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e021      	b.n	8002706 <HAL_GPIO_Init+0x2e2>
 80026c2:	bf00      	nop
 80026c4:	10320000 	.word	0x10320000
 80026c8:	10310000 	.word	0x10310000
 80026cc:	10220000 	.word	0x10220000
 80026d0:	10210000 	.word	0x10210000
 80026d4:	10120000 	.word	0x10120000
 80026d8:	10110000 	.word	0x10110000
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40010800 	.word	0x40010800
 80026e8:	40010c00 	.word	0x40010c00
 80026ec:	40011000 	.word	0x40011000
 80026f0:	40011400 	.word	0x40011400
 80026f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_GPIO_Init+0x304>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	43db      	mvns	r3, r3
 8002700:	4909      	ldr	r1, [pc, #36]	@ (8002728 <HAL_GPIO_Init+0x304>)
 8002702:	4013      	ands	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	3301      	adds	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	f47f ae8e 	bne.w	8002438 <HAL_GPIO_Init+0x14>
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	372c      	adds	r7, #44	@ 0x2c
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	40010400 	.word	0x40010400

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e12b      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe f9a4 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	@ 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c0:	f001 fbca 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a81      	ldr	r2, [pc, #516]	@ (80029d0 <HAL_I2C_Init+0x274>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <HAL_I2C_Init+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a80      	ldr	r2, [pc, #512]	@ (80029d4 <HAL_I2C_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x92>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a7d      	ldr	r2, [pc, #500]	@ (80029d8 <HAL_I2C_Init+0x27c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0e7      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a78      	ldr	r2, [pc, #480]	@ (80029dc <HAL_I2C_Init+0x280>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_I2C_Init+0x274>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <HAL_I2C_Init+0xd4>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	e009      	b.n	8002844 <HAL_I2C_Init+0xe8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a69      	ldr	r2, [pc, #420]	@ (80029e0 <HAL_I2C_Init+0x284>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002856:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	495c      	ldr	r1, [pc, #368]	@ (80029d0 <HAL_I2C_Init+0x274>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d819      	bhi.n	8002898 <HAL_I2C_Init+0x13c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e59      	subs	r1, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002878:	400b      	ands	r3, r1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_I2C_Init+0x138>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e59      	subs	r1, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fbb1 f3f3 	udiv	r3, r1, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	e051      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002894:	2304      	movs	r3, #4
 8002896:	e04f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_I2C_Init+0x168>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_I2C_Init+0x18e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x196>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e022      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10e      	bne.n	8002918 <HAL_I2C_Init+0x1bc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e58      	subs	r0, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	fbb0 f3f3 	udiv	r3, r0, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6809      	ldr	r1, [r1, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6911      	ldr	r1, [r2, #16]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	000186a0 	.word	0x000186a0
 80029d4:	001e847f 	.word	0x001e847f
 80029d8:	003d08ff 	.word	0x003d08ff
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
 80029f4:	4613      	mov	r3, r2
 80029f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7fe fd98 	bl	800152c <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 80e0 	bne.w	8002bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	4970      	ldr	r1, [pc, #448]	@ (8002bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fc9e 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0d3      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x50>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0cc      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d007      	beq.n	8002a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2221      	movs	r2, #33	@ 0x21
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a50      	ldr	r2, [pc, #320]	@ (8002bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fb08 	bl	80030b8 <I2C_MasterRequestWrite>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08d      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac8:	e066      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6a39      	ldr	r1, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fd5c 	bl	800358c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fd53 	bl	800361c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01a      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d194      	bne.n	8002aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000

08002be0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	@ 0x30
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7fe fc98 	bl	800152c <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 824b 	bne.w	80030a2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	497f      	ldr	r1, [pc, #508]	@ (8002e14 <HAL_I2C_Master_Receive+0x234>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fb9e 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e23e      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Master_Receive+0x54>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e237      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2222      	movs	r2, #34	@ 0x22
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a5f      	ldr	r2, [pc, #380]	@ (8002e18 <HAL_I2C_Master_Receive+0x238>)
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa8a 	bl	80031bc <I2C_MasterRequestRead>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1f8      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d113      	bne.n	8002ce2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e1cc      	b.n	800307c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d11e      	bne.n	8002d28 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfa:	b672      	cpsid	i
}
 8002cfc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d24:	b662      	cpsie	i
}
 8002d26:	e035      	b.n	8002d94 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11e      	bne.n	8002d6e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d40:	b672      	cpsid	i
}
 8002d42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d6a:	b662      	cpsie	i
}
 8002d6c:	e012      	b.n	8002d94 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d94:	e172      	b.n	800307c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	f200 811f 	bhi.w	8002fde <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d123      	bne.n	8002df0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002daa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fc7d 	bl	80036ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e173      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dee:	e145      	b.n	800307c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d152      	bne.n	8002e9e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4906      	ldr	r1, [pc, #24]	@ (8002e1c <HAL_I2C_Master_Receive+0x23c>)
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 faa8 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e148      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
 8002e12:	bf00      	nop
 8002e14:	00100002 	.word	0x00100002
 8002e18:	ffff0000 	.word	0xffff0000
 8002e1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e66:	b662      	cpsie	i
}
 8002e68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e9c:	e0ee      	b.n	800307c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4981      	ldr	r1, [pc, #516]	@ (80030ac <HAL_I2C_Master_Receive+0x4cc>)
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fa55 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0f5      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec8:	b672      	cpsid	i
}
 8002eca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002efe:	4b6c      	ldr	r3, [pc, #432]	@ (80030b0 <HAL_I2C_Master_Receive+0x4d0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	08db      	lsrs	r3, r3, #3
 8002f04:	4a6b      	ldr	r2, [pc, #428]	@ (80030b4 <HAL_I2C_Master_Receive+0x4d4>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0a1a      	lsrs	r2, r3, #8
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00da      	lsls	r2, r3, #3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d118      	bne.n	8002f56 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f46:	b662      	cpsie	i
}
 8002f48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0a6      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d1d9      	bne.n	8002f18 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fa6:	b662      	cpsie	i
}
 8002fa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fdc:	e04e      	b.n	800307c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fb62 	bl	80036ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e058      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d124      	bne.n	800307c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003036:	2b03      	cmp	r3, #3
 8003038:	d107      	bne.n	800304a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003048:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f ae88 	bne.w	8002d96 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	@ 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	00010004 	.word	0x00010004
 80030b0:	20000028 	.word	0x20000028
 80030b4:	14f8b589 	.word	0x14f8b589

080030b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	460b      	mov	r3, r1
 80030c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d006      	beq.n	80030e2 <I2C_MasterRequestWrite+0x2a>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d003      	beq.n	80030e2 <I2C_MasterRequestWrite+0x2a>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030e0:	d108      	bne.n	80030f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e00b      	b.n	800310c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	2b12      	cmp	r3, #18
 80030fa:	d107      	bne.n	800310c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800310a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f91d 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00d      	beq.n	8003140 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003132:	d103      	bne.n	800313c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e035      	b.n	80031ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003148:	d108      	bne.n	800315c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003158:	611a      	str	r2, [r3, #16]
 800315a:	e01b      	b.n	8003194 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800315c:	897b      	ldrh	r3, [r7, #10]
 800315e:	11db      	asrs	r3, r3, #7
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 0306 	and.w	r3, r3, #6
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f063 030f 	orn	r3, r3, #15
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	490e      	ldr	r1, [pc, #56]	@ (80031b4 <I2C_MasterRequestWrite+0xfc>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f966 	bl	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e010      	b.n	80031ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4907      	ldr	r1, [pc, #28]	@ (80031b8 <I2C_MasterRequestWrite+0x100>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f956 	bl	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	00010008 	.word	0x00010008
 80031b8:	00010002 	.word	0x00010002

080031bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d006      	beq.n	80031f6 <I2C_MasterRequestRead+0x3a>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d003      	beq.n	80031f6 <I2C_MasterRequestRead+0x3a>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031f4:	d108      	bne.n	8003208 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e00b      	b.n	8003220 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	2b11      	cmp	r3, #17
 800320e:	d107      	bne.n	8003220 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800321e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f893 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003246:	d103      	bne.n	8003250 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e079      	b.n	8003348 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800325c:	d108      	bne.n	8003270 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	e05f      	b.n	8003330 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	11db      	asrs	r3, r3, #7
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0306 	and.w	r3, r3, #6
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f063 030f 	orn	r3, r3, #15
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4930      	ldr	r1, [pc, #192]	@ (8003350 <I2C_MasterRequestRead+0x194>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8dc 	bl	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e054      	b.n	8003348 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4929      	ldr	r1, [pc, #164]	@ (8003354 <I2C_MasterRequestRead+0x198>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f8cc 	bl	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e044      	b.n	8003348 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f831 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330a:	d103      	bne.n	8003314 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e017      	b.n	8003348 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030e 	orn	r3, r3, #14
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4907      	ldr	r1, [pc, #28]	@ (8003354 <I2C_MasterRequestRead+0x198>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f888 	bl	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	00010008 	.word	0x00010008
 8003354:	00010002 	.word	0x00010002

08003358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003368:	e048      	b.n	80033fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d044      	beq.n	80033fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe f8db 	bl	800152c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d139      	bne.n	80033fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	e00c      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d116      	bne.n	80033fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e023      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10d      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	43da      	mvns	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	e00c      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d093      	beq.n	800336a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800345a:	e071      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346a:	d123      	bne.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e067      	b.n	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d041      	beq.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034bc:	f7fe f836 	bl	800152c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d302      	bcc.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d136      	bne.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10c      	bne.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e00b      	b.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	43da      	mvns	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e021      	b.n	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10c      	bne.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	43da      	mvns	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e00b      	b.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4013      	ands	r3, r2
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f af6d 	bne.w	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003598:	e034      	b.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f8e3 	bl	8003766 <I2C_IsAcknowledgeFailed>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e034      	b.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d028      	beq.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fd ffbb 	bl	800152c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d11d      	bne.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b80      	cmp	r3, #128	@ 0x80
 80035d4:	d016      	beq.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d1c3      	bne.n	800359a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003628:	e034      	b.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f89b 	bl	8003766 <I2C_IsAcknowledgeFailed>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e034      	b.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d028      	beq.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fd ff73 	bl	800152c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11d      	bne.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d016      	beq.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d1c3      	bne.n	800362a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036b8:	e049      	b.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d119      	bne.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0210 	mvn.w	r2, #16
 80036d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e030      	b.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fd ff16 	bl	800152c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11d      	bne.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b40      	cmp	r3, #64	@ 0x40
 800371e:	d016      	beq.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e007      	b.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d1ae      	bne.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377c:	d11b      	bne.n	80037b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003786:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f043 0204 	orr.w	r2, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e272      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8087 	beq.w	80038f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e4:	4b92      	ldr	r3, [pc, #584]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00c      	beq.n	800380a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d112      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
 80037fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003808:	d10b      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380a:	4b89      	ldr	r3, [pc, #548]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d06c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x12c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d168      	bne.n	80038f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e24c      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x76>
 800382c:	4b80      	ldr	r3, [pc, #512]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7f      	ldr	r2, [pc, #508]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e02e      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b7b      	ldr	r3, [pc, #492]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7a      	ldr	r2, [pc, #488]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b78      	ldr	r3, [pc, #480]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a77      	ldr	r2, [pc, #476]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003854:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e01d      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0xbc>
 8003866:	4b72      	ldr	r3, [pc, #456]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a71      	ldr	r2, [pc, #452]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b6f      	ldr	r3, [pc, #444]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 8003880:	4b6b      	ldr	r3, [pc, #428]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b68      	ldr	r3, [pc, #416]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a67      	ldr	r2, [pc, #412]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fd fe44 	bl	800152c <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fd fe40 	bl	800152c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	@ 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e200      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe4>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd fe30 	bl	800152c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fd fe2c 	bl	800152c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1ec      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	4b53      	ldr	r3, [pc, #332]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10c>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d063      	beq.n	80039c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800390a:	4b49      	ldr	r3, [pc, #292]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
 8003916:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1c0      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4939      	ldr	r1, [pc, #228]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e03a      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_RCC_OscConfig+0x270>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd fde5 	bl	800152c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003966:	f7fd fde1 	bl	800152c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1a1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	4b2d      	ldr	r3, [pc, #180]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4927      	ldr	r1, [pc, #156]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_RCC_OscConfig+0x270>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fd fdc4 	bl	800152c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7fd fdc0 	bl	800152c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e180      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03a      	beq.n	8003a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d019      	beq.n	8003a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039da:	4b17      	ldr	r3, [pc, #92]	@ (8003a38 <HAL_RCC_OscConfig+0x274>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7fd fda4 	bl	800152c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fd fda0 	bl	800152c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e160      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f000 face 	bl	8003fa8 <RCC_Delay>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_RCC_OscConfig+0x274>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fd fd8a 	bl	800152c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1a:	e00f      	b.n	8003a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7fd fd86 	bl	800152c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e146      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	42420000 	.word	0x42420000
 8003a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b92      	ldr	r3, [pc, #584]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e9      	bne.n	8003a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a6 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b88      	ldr	r3, [pc, #544]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a87      	ldr	r2, [pc, #540]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]
 8003a72:	4b85      	ldr	r3, [pc, #532]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b82      	ldr	r3, [pc, #520]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7e      	ldr	r2, [pc, #504]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fd47 	bl	800152c <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7fd fd43 	bl	800152c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	@ 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e103      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b75      	ldr	r3, [pc, #468]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x312>
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	e02d      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x334>
 8003ade:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b67      	ldr	r3, [pc, #412]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a66      	ldr	r2, [pc, #408]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
 8003af6:	e01c      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x356>
 8003b00:	4b61      	ldr	r3, [pc, #388]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a60      	ldr	r2, [pc, #384]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	4b58      	ldr	r3, [pc, #352]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a57      	ldr	r2, [pc, #348]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fd fcf7 	bl	800152c <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fd fcf3 	bl	800152c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0b1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	4b4b      	ldr	r3, [pc, #300]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ee      	beq.n	8003b42 <HAL_RCC_OscConfig+0x37e>
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b66:	f7fd fce1 	bl	800152c <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fcdd 	bl	800152c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e09b      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b84:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b96:	4b3c      	ldr	r3, [pc, #240]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8087 	beq.w	8003cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bac:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d061      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d146      	bne.n	8003c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b33      	ldr	r3, [pc, #204]	@ (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fd fcb1 	bl	800152c <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fd fcad 	bl	800152c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e06d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	4b29      	ldr	r3, [pc, #164]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4921      	ldr	r1, [pc, #132]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	4b1f      	ldr	r3, [pc, #124]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a19      	ldr	r1, [r3, #32]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	491b      	ldr	r1, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fd fc81 	bl	800152c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fd fc7d 	bl	800152c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e03d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x46a>
 8003c4c:	e035      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fc6a 	bl	800152c <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fd fc66 	bl	800152c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e026      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x498>
 8003c7a:	e01e      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e019      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_RCC_OscConfig+0x500>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d0      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b67      	ldr	r3, [pc, #412]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4965      	ldr	r1, [pc, #404]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a58      	ldr	r2, [pc, #352]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d040      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d115      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e073      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3d      	ldr	r3, [pc, #244]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06b      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b39      	ldr	r3, [pc, #228]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4936      	ldr	r1, [pc, #216]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fd fbb8 	bl	800152c <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fd fbb4 	bl	800152c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e053      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d210      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4922      	ldr	r1, [pc, #136]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f821 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x1cc>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd fb16 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800570c 	.word	0x0800570c
 8003e94:	20000028 	.word	0x20000028
 8003e98:	2000002c 	.word	0x2000002c

08003e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eca:	e027      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0c5b      	lsrs	r3, r3, #17
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	4a11      	ldr	r2, [pc, #68]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	fb03 f202 	mul.w	r2, r3, r2
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e004      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	613b      	str	r3, [r7, #16]
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	613b      	str	r3, [r7, #16]
      break;
 8003f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f22:	693b      	ldr	r3, [r7, #16]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	08005724 	.word	0x08005724
 8003f3c:	08005734 	.word	0x08005734
 8003f40:	003d0900 	.word	0x003d0900

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b02      	ldr	r3, [pc, #8]	@ (8003f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	20000028 	.word	0x20000028

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff2 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0800571c 	.word	0x0800571c

08003f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f84:	f7ff ffde 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	0adb      	lsrs	r3, r3, #11
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	@ (8003fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	0800571c 	.word	0x0800571c

08003fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fdc <RCC_Delay+0x34>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <RCC_Delay+0x38>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	0a5b      	lsrs	r3, r3, #9
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fc4:	bf00      	nop
  }
  while (Delay --);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	60fa      	str	r2, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f9      	bne.n	8003fc4 <RCC_Delay+0x1c>
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	20000028 	.word	0x20000028
 8003fe0:	10624dd3 	.word	0x10624dd3

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e041      	b.n	800407a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd f846 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fa12 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0202 	mvn.w	r2, #2
 80040b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9a1 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 80040d2:	e005      	b.n	80040e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f994 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9a3 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01b      	beq.n	8004132 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0204 	mvn.w	r2, #4
 8004102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f97b 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 800411e:	e005      	b.n	800412c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f96e 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f97d 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01b      	beq.n	800417e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0208 	mvn.w	r2, #8
 800414e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2204      	movs	r2, #4
 8004154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f955 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 800416a:	e005      	b.n	8004178 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f948 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f957 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01b      	beq.n	80041ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0210 	mvn.w	r2, #16
 800419a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2208      	movs	r2, #8
 80041a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f92f 	bl	8004414 <HAL_TIM_IC_CaptureCallback>
 80041b6:	e005      	b.n	80041c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f922 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f931 	bl	8004426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00c      	beq.n	80041ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f06f 0201 	mvn.w	r2, #1
 80041e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f901 	bl	80043f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800420a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fa88 	bl	8004722 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00c      	beq.n	8004236 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f901 	bl	8004438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0220 	mvn.w	r2, #32
 8004252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa5b 	bl	8004710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_TIM_ConfigClockSource+0x1c>
 800427a:	2302      	movs	r3, #2
 800427c:	e0b4      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x186>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800429c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b6:	d03e      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xd4>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042bc:	f200 8087 	bhi.w	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	f000 8086 	beq.w	80043d4 <HAL_TIM_ConfigClockSource+0x172>
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042cc:	d87f      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042ce:	2b70      	cmp	r3, #112	@ 0x70
 80042d0:	d01a      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0xa6>
 80042d2:	2b70      	cmp	r3, #112	@ 0x70
 80042d4:	d87b      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	2b60      	cmp	r3, #96	@ 0x60
 80042d8:	d050      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x11a>
 80042da:	2b60      	cmp	r3, #96	@ 0x60
 80042dc:	d877      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042de:	2b50      	cmp	r3, #80	@ 0x50
 80042e0:	d03c      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xfa>
 80042e2:	2b50      	cmp	r3, #80	@ 0x50
 80042e4:	d873      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d058      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x13a>
 80042ea:	2b40      	cmp	r3, #64	@ 0x40
 80042ec:	d86f      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042ee:	2b30      	cmp	r3, #48	@ 0x30
 80042f0:	d064      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x15a>
 80042f2:	2b30      	cmp	r3, #48	@ 0x30
 80042f4:	d86b      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d060      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x15a>
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d867      	bhi.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d05c      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x15a>
 8004302:	2b10      	cmp	r3, #16
 8004304:	d05a      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x15a>
 8004306:	e062      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004318:	f000 f97d 	bl	8004616 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800432a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
      break;
 8004334:	e04f      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004346:	f000 f966 	bl	8004616 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004358:	609a      	str	r2, [r3, #8]
      break;
 800435a:	e03c      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004368:	461a      	mov	r2, r3
 800436a:	f000 f8dd 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2150      	movs	r1, #80	@ 0x50
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f934 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 800437a:	e02c      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004388:	461a      	mov	r2, r3
 800438a:	f000 f8fb 	bl	8004584 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2160      	movs	r1, #96	@ 0x60
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f924 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 800439a:	e01c      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a8:	461a      	mov	r2, r3
 80043aa:	f000 f8bd 	bl	8004528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2140      	movs	r1, #64	@ 0x40
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f914 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 80043ba:	e00c      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 f90b 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e003      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      break;
 80043d2:	e000      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
	...

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a2f      	ldr	r2, [pc, #188]	@ (800451c <TIM_Base_SetConfig+0xd0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_Base_SetConfig+0x30>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446a:	d007      	beq.n	800447c <TIM_Base_SetConfig+0x30>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a2c      	ldr	r2, [pc, #176]	@ (8004520 <TIM_Base_SetConfig+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_Base_SetConfig+0x30>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <TIM_Base_SetConfig+0xd8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d108      	bne.n	800448e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a22      	ldr	r2, [pc, #136]	@ (800451c <TIM_Base_SetConfig+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00b      	beq.n	80044ae <TIM_Base_SetConfig+0x62>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449c:	d007      	beq.n	80044ae <TIM_Base_SetConfig+0x62>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <TIM_Base_SetConfig+0xd4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_Base_SetConfig+0x62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <TIM_Base_SetConfig+0xd8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d108      	bne.n	80044c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <TIM_Base_SetConfig+0xd0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d103      	bne.n	80044f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
  }
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800

08004528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 030a 	bic.w	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0210 	bic.w	r2, r3, #16
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	031b      	lsls	r3, r3, #12
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	f043 0307 	orr.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004616:	b480      	push	{r7}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004630:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	021a      	lsls	r2, r3, #8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	431a      	orrs	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4313      	orrs	r3, r2
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	609a      	str	r2, [r3, #8]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004668:	2302      	movs	r3, #2
 800466a:	e046      	b.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a16      	ldr	r2, [pc, #88]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b8:	d009      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a12      	ldr	r2, [pc, #72]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a10      	ldr	r2, [pc, #64]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10c      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800

08004710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e042      	b.n	80047cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fc fcee 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	@ 0x24
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f971 	bl	8004a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800478c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800479c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d175      	bne.n	80048e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_UART_Transmit+0x2c>
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e06e      	b.n	80048e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2221      	movs	r2, #33	@ 0x21
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004812:	f7fc fe8b 	bl	800152c <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482c:	d108      	bne.n	8004840 <HAL_UART_Transmit+0x6c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e003      	b.n	8004848 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004848:	e02e      	b.n	80048a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	2180      	movs	r1, #128	@ 0x80
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f848 	bl	80048ea <UART_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e03a      	b.n	80048e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3302      	adds	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e007      	b.n	800489a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1cb      	bne.n	800484a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2140      	movs	r1, #64	@ 0x40
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f814 	bl	80048ea <UART_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e006      	b.n	80048e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	4613      	mov	r3, r2
 80048f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	e03b      	b.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d037      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fc fe12 	bl	800152c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <UART_WaitOnFlagUntilTimeout+0x30>
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03a      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b80      	cmp	r3, #128	@ 0x80
 8004930:	d020      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d01d      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d116      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f81d 	bl	800499c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2208      	movs	r2, #8
 8004966:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e00f      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	d0b4      	beq.n	80048fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b095      	sub	sp, #84	@ 0x54
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d119      	bne.n	8004a48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a34:	61ba      	str	r2, [r7, #24]
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a56:	bf00      	nop
 8004a58:	3754      	adds	r7, #84	@ 0x54
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a9a:	f023 030c 	bic.w	r3, r3, #12
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b74 <UART_SetConfig+0x114>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7ff fa5a 	bl	8003f80 <HAL_RCC_GetPCLK2Freq>
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	e002      	b.n	8004ad6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7ff fa42 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <UART_SetConfig+0x118>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	0119      	lsls	r1, r3, #4
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b78 <UART_SetConfig+0x118>)
 8004b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2064      	movs	r0, #100	@ 0x64
 8004b16:	fb00 f303 	mul.w	r3, r0, r3
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	3332      	adds	r3, #50	@ 0x32
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <UART_SetConfig+0x118>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b2c:	4419      	add	r1, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <UART_SetConfig+0x118>)
 8004b46:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2064      	movs	r0, #100	@ 0x64
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	@ 0x32
 8004b58:	4a07      	ldr	r2, [pc, #28]	@ (8004b78 <UART_SetConfig+0x118>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	440a      	add	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40013800 	.word	0x40013800
 8004b78:	51eb851f 	.word	0x51eb851f

08004b7c <siprintf>:
 8004b7c:	b40e      	push	{r1, r2, r3}
 8004b7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b82:	b500      	push	{lr}
 8004b84:	b09c      	sub	sp, #112	@ 0x70
 8004b86:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b88:	9002      	str	r0, [sp, #8]
 8004b8a:	9006      	str	r0, [sp, #24]
 8004b8c:	9107      	str	r1, [sp, #28]
 8004b8e:	9104      	str	r1, [sp, #16]
 8004b90:	4808      	ldr	r0, [pc, #32]	@ (8004bb4 <siprintf+0x38>)
 8004b92:	4909      	ldr	r1, [pc, #36]	@ (8004bb8 <siprintf+0x3c>)
 8004b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b98:	9105      	str	r1, [sp, #20]
 8004b9a:	6800      	ldr	r0, [r0, #0]
 8004b9c:	a902      	add	r1, sp, #8
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	f000 f9a0 	bl	8004ee4 <_svfiprintf_r>
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	b01c      	add	sp, #112	@ 0x70
 8004bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb0:	b003      	add	sp, #12
 8004bb2:	4770      	bx	lr
 8004bb4:	20000034 	.word	0x20000034
 8004bb8:	ffff0208 	.word	0xffff0208

08004bbc <memset>:
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4402      	add	r2, r0
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <memset+0xa>
 8004bc4:	4770      	bx	lr
 8004bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bca:	e7f9      	b.n	8004bc0 <memset+0x4>

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	@ (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000034 	.word	0x20000034

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	2600      	movs	r6, #0
 8004bdc:	4d0c      	ldr	r5, [pc, #48]	@ (8004c10 <__libc_init_array+0x38>)
 8004bde:	4c0d      	ldr	r4, [pc, #52]	@ (8004c14 <__libc_init_array+0x3c>)
 8004be0:	1b64      	subs	r4, r4, r5
 8004be2:	10a4      	asrs	r4, r4, #2
 8004be4:	42a6      	cmp	r6, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	f000 fc78 	bl	80054dc <_init>
 8004bec:	2600      	movs	r6, #0
 8004bee:	4d0a      	ldr	r5, [pc, #40]	@ (8004c18 <__libc_init_array+0x40>)
 8004bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8004c1c <__libc_init_array+0x44>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	42a6      	cmp	r6, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c00:	4798      	blx	r3
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0a:	4798      	blx	r3
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	08005774 	.word	0x08005774
 8004c14:	08005774 	.word	0x08005774
 8004c18:	08005774 	.word	0x08005774
 8004c1c:	08005778 	.word	0x08005778

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <memcpy>:
 8004c24:	440a      	add	r2, r1
 8004c26:	4291      	cmp	r1, r2
 8004c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c2c:	d100      	bne.n	8004c30 <memcpy+0xc>
 8004c2e:	4770      	bx	lr
 8004c30:	b510      	push	{r4, lr}
 8004c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c3c:	d1f9      	bne.n	8004c32 <memcpy+0xe>
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <_free_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4605      	mov	r5, r0
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d040      	beq.n	8004cca <_free_r+0x8a>
 8004c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4c:	1f0c      	subs	r4, r1, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bfb8      	it	lt
 8004c52:	18e4      	addlt	r4, r4, r3
 8004c54:	f000 f8de 	bl	8004e14 <__malloc_lock>
 8004c58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ccc <_free_r+0x8c>)
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	b933      	cbnz	r3, 8004c6c <_free_r+0x2c>
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	6014      	str	r4, [r2, #0]
 8004c62:	4628      	mov	r0, r5
 8004c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c68:	f000 b8da 	b.w	8004e20 <__malloc_unlock>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d908      	bls.n	8004c82 <_free_r+0x42>
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	1821      	adds	r1, r4, r0
 8004c74:	428b      	cmp	r3, r1
 8004c76:	bf01      	itttt	eq
 8004c78:	6819      	ldreq	r1, [r3, #0]
 8004c7a:	685b      	ldreq	r3, [r3, #4]
 8004c7c:	1809      	addeq	r1, r1, r0
 8004c7e:	6021      	streq	r1, [r4, #0]
 8004c80:	e7ed      	b.n	8004c5e <_free_r+0x1e>
 8004c82:	461a      	mov	r2, r3
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b10b      	cbz	r3, 8004c8c <_free_r+0x4c>
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d9fa      	bls.n	8004c82 <_free_r+0x42>
 8004c8c:	6811      	ldr	r1, [r2, #0]
 8004c8e:	1850      	adds	r0, r2, r1
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d10b      	bne.n	8004cac <_free_r+0x6c>
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	4401      	add	r1, r0
 8004c98:	1850      	adds	r0, r2, r1
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	d1e0      	bne.n	8004c62 <_free_r+0x22>
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4408      	add	r0, r1
 8004ca6:	6010      	str	r0, [r2, #0]
 8004ca8:	6053      	str	r3, [r2, #4]
 8004caa:	e7da      	b.n	8004c62 <_free_r+0x22>
 8004cac:	d902      	bls.n	8004cb4 <_free_r+0x74>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	e7d6      	b.n	8004c62 <_free_r+0x22>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	1821      	adds	r1, r4, r0
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	bf01      	itttt	eq
 8004cbc:	6819      	ldreq	r1, [r3, #0]
 8004cbe:	685b      	ldreq	r3, [r3, #4]
 8004cc0:	1809      	addeq	r1, r1, r0
 8004cc2:	6021      	streq	r1, [r4, #0]
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	6054      	str	r4, [r2, #4]
 8004cc8:	e7cb      	b.n	8004c62 <_free_r+0x22>
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000520 	.word	0x20000520

08004cd0 <sbrk_aligned>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8004d10 <sbrk_aligned+0x40>)
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	6831      	ldr	r1, [r6, #0]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	b911      	cbnz	r1, 8004ce2 <sbrk_aligned+0x12>
 8004cdc:	f000 fbaa 	bl	8005434 <_sbrk_r>
 8004ce0:	6030      	str	r0, [r6, #0]
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 fba5 	bl	8005434 <_sbrk_r>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	d103      	bne.n	8004cf6 <sbrk_aligned+0x26>
 8004cee:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	1cc4      	adds	r4, r0, #3
 8004cf8:	f024 0403 	bic.w	r4, r4, #3
 8004cfc:	42a0      	cmp	r0, r4
 8004cfe:	d0f8      	beq.n	8004cf2 <sbrk_aligned+0x22>
 8004d00:	1a21      	subs	r1, r4, r0
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 fb96 	bl	8005434 <_sbrk_r>
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d1f2      	bne.n	8004cf2 <sbrk_aligned+0x22>
 8004d0c:	e7ef      	b.n	8004cee <sbrk_aligned+0x1e>
 8004d0e:	bf00      	nop
 8004d10:	2000051c 	.word	0x2000051c

08004d14 <_malloc_r>:
 8004d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d18:	1ccd      	adds	r5, r1, #3
 8004d1a:	f025 0503 	bic.w	r5, r5, #3
 8004d1e:	3508      	adds	r5, #8
 8004d20:	2d0c      	cmp	r5, #12
 8004d22:	bf38      	it	cc
 8004d24:	250c      	movcc	r5, #12
 8004d26:	2d00      	cmp	r5, #0
 8004d28:	4606      	mov	r6, r0
 8004d2a:	db01      	blt.n	8004d30 <_malloc_r+0x1c>
 8004d2c:	42a9      	cmp	r1, r5
 8004d2e:	d904      	bls.n	8004d3a <_malloc_r+0x26>
 8004d30:	230c      	movs	r3, #12
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	2000      	movs	r0, #0
 8004d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e10 <_malloc_r+0xfc>
 8004d3e:	f000 f869 	bl	8004e14 <__malloc_lock>
 8004d42:	f8d8 3000 	ldr.w	r3, [r8]
 8004d46:	461c      	mov	r4, r3
 8004d48:	bb44      	cbnz	r4, 8004d9c <_malloc_r+0x88>
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f7ff ffbf 	bl	8004cd0 <sbrk_aligned>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	4604      	mov	r4, r0
 8004d56:	d158      	bne.n	8004e0a <_malloc_r+0xf6>
 8004d58:	f8d8 4000 	ldr.w	r4, [r8]
 8004d5c:	4627      	mov	r7, r4
 8004d5e:	2f00      	cmp	r7, #0
 8004d60:	d143      	bne.n	8004dea <_malloc_r+0xd6>
 8004d62:	2c00      	cmp	r4, #0
 8004d64:	d04b      	beq.n	8004dfe <_malloc_r+0xea>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	4639      	mov	r1, r7
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	eb04 0903 	add.w	r9, r4, r3
 8004d70:	f000 fb60 	bl	8005434 <_sbrk_r>
 8004d74:	4581      	cmp	r9, r0
 8004d76:	d142      	bne.n	8004dfe <_malloc_r+0xea>
 8004d78:	6821      	ldr	r1, [r4, #0]
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	1a6d      	subs	r5, r5, r1
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7ff ffa6 	bl	8004cd0 <sbrk_aligned>
 8004d84:	3001      	adds	r0, #1
 8004d86:	d03a      	beq.n	8004dfe <_malloc_r+0xea>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	442b      	add	r3, r5
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	bb62      	cbnz	r2, 8004df0 <_malloc_r+0xdc>
 8004d96:	f8c8 7000 	str.w	r7, [r8]
 8004d9a:	e00f      	b.n	8004dbc <_malloc_r+0xa8>
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	1b52      	subs	r2, r2, r5
 8004da0:	d420      	bmi.n	8004de4 <_malloc_r+0xd0>
 8004da2:	2a0b      	cmp	r2, #11
 8004da4:	d917      	bls.n	8004dd6 <_malloc_r+0xc2>
 8004da6:	1961      	adds	r1, r4, r5
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	6025      	str	r5, [r4, #0]
 8004dac:	bf18      	it	ne
 8004dae:	6059      	strne	r1, [r3, #4]
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	bf08      	it	eq
 8004db4:	f8c8 1000 	streq.w	r1, [r8]
 8004db8:	5162      	str	r2, [r4, r5]
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 f82f 	bl	8004e20 <__malloc_unlock>
 8004dc2:	f104 000b 	add.w	r0, r4, #11
 8004dc6:	1d23      	adds	r3, r4, #4
 8004dc8:	f020 0007 	bic.w	r0, r0, #7
 8004dcc:	1ac2      	subs	r2, r0, r3
 8004dce:	bf1c      	itt	ne
 8004dd0:	1a1b      	subne	r3, r3, r0
 8004dd2:	50a3      	strne	r3, [r4, r2]
 8004dd4:	e7af      	b.n	8004d36 <_malloc_r+0x22>
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	bf0c      	ite	eq
 8004ddc:	f8c8 2000 	streq.w	r2, [r8]
 8004de0:	605a      	strne	r2, [r3, #4]
 8004de2:	e7eb      	b.n	8004dbc <_malloc_r+0xa8>
 8004de4:	4623      	mov	r3, r4
 8004de6:	6864      	ldr	r4, [r4, #4]
 8004de8:	e7ae      	b.n	8004d48 <_malloc_r+0x34>
 8004dea:	463c      	mov	r4, r7
 8004dec:	687f      	ldr	r7, [r7, #4]
 8004dee:	e7b6      	b.n	8004d5e <_malloc_r+0x4a>
 8004df0:	461a      	mov	r2, r3
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d1fb      	bne.n	8004df0 <_malloc_r+0xdc>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6053      	str	r3, [r2, #4]
 8004dfc:	e7de      	b.n	8004dbc <_malloc_r+0xa8>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	4630      	mov	r0, r6
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	f000 f80c 	bl	8004e20 <__malloc_unlock>
 8004e08:	e794      	b.n	8004d34 <_malloc_r+0x20>
 8004e0a:	6005      	str	r5, [r0, #0]
 8004e0c:	e7d6      	b.n	8004dbc <_malloc_r+0xa8>
 8004e0e:	bf00      	nop
 8004e10:	20000520 	.word	0x20000520

08004e14 <__malloc_lock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	@ (8004e1c <__malloc_lock+0x8>)
 8004e16:	f7ff bf03 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000518 	.word	0x20000518

08004e20 <__malloc_unlock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	@ (8004e28 <__malloc_unlock+0x8>)
 8004e22:	f7ff befe 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000518 	.word	0x20000518

08004e2c <__ssputs_r>:
 8004e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	461f      	mov	r7, r3
 8004e32:	688e      	ldr	r6, [r1, #8]
 8004e34:	4682      	mov	sl, r0
 8004e36:	42be      	cmp	r6, r7
 8004e38:	460c      	mov	r4, r1
 8004e3a:	4690      	mov	r8, r2
 8004e3c:	680b      	ldr	r3, [r1, #0]
 8004e3e:	d82d      	bhi.n	8004e9c <__ssputs_r+0x70>
 8004e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e48:	d026      	beq.n	8004e98 <__ssputs_r+0x6c>
 8004e4a:	6965      	ldr	r5, [r4, #20]
 8004e4c:	6909      	ldr	r1, [r1, #16]
 8004e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e52:	eba3 0901 	sub.w	r9, r3, r1
 8004e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e5a:	1c7b      	adds	r3, r7, #1
 8004e5c:	444b      	add	r3, r9
 8004e5e:	106d      	asrs	r5, r5, #1
 8004e60:	429d      	cmp	r5, r3
 8004e62:	bf38      	it	cc
 8004e64:	461d      	movcc	r5, r3
 8004e66:	0553      	lsls	r3, r2, #21
 8004e68:	d527      	bpl.n	8004eba <__ssputs_r+0x8e>
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7ff ff52 	bl	8004d14 <_malloc_r>
 8004e70:	4606      	mov	r6, r0
 8004e72:	b360      	cbz	r0, 8004ece <__ssputs_r+0xa2>
 8004e74:	464a      	mov	r2, r9
 8004e76:	6921      	ldr	r1, [r4, #16]
 8004e78:	f7ff fed4 	bl	8004c24 <memcpy>
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	6126      	str	r6, [r4, #16]
 8004e8a:	444e      	add	r6, r9
 8004e8c:	6026      	str	r6, [r4, #0]
 8004e8e:	463e      	mov	r6, r7
 8004e90:	6165      	str	r5, [r4, #20]
 8004e92:	eba5 0509 	sub.w	r5, r5, r9
 8004e96:	60a5      	str	r5, [r4, #8]
 8004e98:	42be      	cmp	r6, r7
 8004e9a:	d900      	bls.n	8004e9e <__ssputs_r+0x72>
 8004e9c:	463e      	mov	r6, r7
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	f000 faac 	bl	8005400 <memmove>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	68a3      	ldr	r3, [r4, #8]
 8004eac:	1b9b      	subs	r3, r3, r6
 8004eae:	60a3      	str	r3, [r4, #8]
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	4433      	add	r3, r6
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eba:	462a      	mov	r2, r5
 8004ebc:	f000 fad8 	bl	8005470 <_realloc_r>
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d1e0      	bne.n	8004e88 <__ssputs_r+0x5c>
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	6921      	ldr	r1, [r4, #16]
 8004eca:	f7ff feb9 	bl	8004c40 <_free_r>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	f8ca 3000 	str.w	r3, [sl]
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	e7e9      	b.n	8004eb6 <__ssputs_r+0x8a>
	...

08004ee4 <_svfiprintf_r>:
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	4698      	mov	r8, r3
 8004eea:	898b      	ldrh	r3, [r1, #12]
 8004eec:	4607      	mov	r7, r0
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	460d      	mov	r5, r1
 8004ef2:	4614      	mov	r4, r2
 8004ef4:	b09d      	sub	sp, #116	@ 0x74
 8004ef6:	d510      	bpl.n	8004f1a <_svfiprintf_r+0x36>
 8004ef8:	690b      	ldr	r3, [r1, #16]
 8004efa:	b973      	cbnz	r3, 8004f1a <_svfiprintf_r+0x36>
 8004efc:	2140      	movs	r1, #64	@ 0x40
 8004efe:	f7ff ff09 	bl	8004d14 <_malloc_r>
 8004f02:	6028      	str	r0, [r5, #0]
 8004f04:	6128      	str	r0, [r5, #16]
 8004f06:	b930      	cbnz	r0, 8004f16 <_svfiprintf_r+0x32>
 8004f08:	230c      	movs	r3, #12
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	b01d      	add	sp, #116	@ 0x74
 8004f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f16:	2340      	movs	r3, #64	@ 0x40
 8004f18:	616b      	str	r3, [r5, #20]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f1e:	2320      	movs	r3, #32
 8004f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f24:	2330      	movs	r3, #48	@ 0x30
 8004f26:	f04f 0901 	mov.w	r9, #1
 8004f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80050c8 <_svfiprintf_r+0x1e4>
 8004f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f36:	4623      	mov	r3, r4
 8004f38:	469a      	mov	sl, r3
 8004f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f3e:	b10a      	cbz	r2, 8004f44 <_svfiprintf_r+0x60>
 8004f40:	2a25      	cmp	r2, #37	@ 0x25
 8004f42:	d1f9      	bne.n	8004f38 <_svfiprintf_r+0x54>
 8004f44:	ebba 0b04 	subs.w	fp, sl, r4
 8004f48:	d00b      	beq.n	8004f62 <_svfiprintf_r+0x7e>
 8004f4a:	465b      	mov	r3, fp
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7ff ff6b 	bl	8004e2c <__ssputs_r>
 8004f56:	3001      	adds	r0, #1
 8004f58:	f000 80a7 	beq.w	80050aa <_svfiprintf_r+0x1c6>
 8004f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f5e:	445a      	add	r2, fp
 8004f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f62:	f89a 3000 	ldrb.w	r3, [sl]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 809f 	beq.w	80050aa <_svfiprintf_r+0x1c6>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f76:	f10a 0a01 	add.w	sl, sl, #1
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	9307      	str	r3, [sp, #28]
 8004f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f84:	4654      	mov	r4, sl
 8004f86:	2205      	movs	r2, #5
 8004f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8c:	484e      	ldr	r0, [pc, #312]	@ (80050c8 <_svfiprintf_r+0x1e4>)
 8004f8e:	f000 fa61 	bl	8005454 <memchr>
 8004f92:	9a04      	ldr	r2, [sp, #16]
 8004f94:	b9d8      	cbnz	r0, 8004fce <_svfiprintf_r+0xea>
 8004f96:	06d0      	lsls	r0, r2, #27
 8004f98:	bf44      	itt	mi
 8004f9a:	2320      	movmi	r3, #32
 8004f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fa0:	0711      	lsls	r1, r2, #28
 8004fa2:	bf44      	itt	mi
 8004fa4:	232b      	movmi	r3, #43	@ 0x2b
 8004fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004faa:	f89a 3000 	ldrb.w	r3, [sl]
 8004fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb0:	d015      	beq.n	8004fde <_svfiprintf_r+0xfa>
 8004fb2:	4654      	mov	r4, sl
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f04f 0c0a 	mov.w	ip, #10
 8004fba:	9a07      	ldr	r2, [sp, #28]
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc2:	3b30      	subs	r3, #48	@ 0x30
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d94b      	bls.n	8005060 <_svfiprintf_r+0x17c>
 8004fc8:	b1b0      	cbz	r0, 8004ff8 <_svfiprintf_r+0x114>
 8004fca:	9207      	str	r2, [sp, #28]
 8004fcc:	e014      	b.n	8004ff8 <_svfiprintf_r+0x114>
 8004fce:	eba0 0308 	sub.w	r3, r0, r8
 8004fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	46a2      	mov	sl, r4
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	e7d2      	b.n	8004f84 <_svfiprintf_r+0xa0>
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	1d19      	adds	r1, r3, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	9103      	str	r1, [sp, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfbb      	ittet	lt
 8004fea:	425b      	neglt	r3, r3
 8004fec:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff0:	9307      	strge	r3, [sp, #28]
 8004ff2:	9307      	strlt	r3, [sp, #28]
 8004ff4:	bfb8      	it	lt
 8004ff6:	9204      	strlt	r2, [sp, #16]
 8004ff8:	7823      	ldrb	r3, [r4, #0]
 8004ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ffc:	d10a      	bne.n	8005014 <_svfiprintf_r+0x130>
 8004ffe:	7863      	ldrb	r3, [r4, #1]
 8005000:	2b2a      	cmp	r3, #42	@ 0x2a
 8005002:	d132      	bne.n	800506a <_svfiprintf_r+0x186>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	3402      	adds	r4, #2
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	9203      	str	r2, [sp, #12]
 800500e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005012:	9305      	str	r3, [sp, #20]
 8005014:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80050cc <_svfiprintf_r+0x1e8>
 8005018:	2203      	movs	r2, #3
 800501a:	4650      	mov	r0, sl
 800501c:	7821      	ldrb	r1, [r4, #0]
 800501e:	f000 fa19 	bl	8005454 <memchr>
 8005022:	b138      	cbz	r0, 8005034 <_svfiprintf_r+0x150>
 8005024:	2240      	movs	r2, #64	@ 0x40
 8005026:	9b04      	ldr	r3, [sp, #16]
 8005028:	eba0 000a 	sub.w	r0, r0, sl
 800502c:	4082      	lsls	r2, r0
 800502e:	4313      	orrs	r3, r2
 8005030:	3401      	adds	r4, #1
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005038:	2206      	movs	r2, #6
 800503a:	4825      	ldr	r0, [pc, #148]	@ (80050d0 <_svfiprintf_r+0x1ec>)
 800503c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005040:	f000 fa08 	bl	8005454 <memchr>
 8005044:	2800      	cmp	r0, #0
 8005046:	d036      	beq.n	80050b6 <_svfiprintf_r+0x1d2>
 8005048:	4b22      	ldr	r3, [pc, #136]	@ (80050d4 <_svfiprintf_r+0x1f0>)
 800504a:	bb1b      	cbnz	r3, 8005094 <_svfiprintf_r+0x1b0>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	3307      	adds	r3, #7
 8005050:	f023 0307 	bic.w	r3, r3, #7
 8005054:	3308      	adds	r3, #8
 8005056:	9303      	str	r3, [sp, #12]
 8005058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800505a:	4433      	add	r3, r6
 800505c:	9309      	str	r3, [sp, #36]	@ 0x24
 800505e:	e76a      	b.n	8004f36 <_svfiprintf_r+0x52>
 8005060:	460c      	mov	r4, r1
 8005062:	2001      	movs	r0, #1
 8005064:	fb0c 3202 	mla	r2, ip, r2, r3
 8005068:	e7a8      	b.n	8004fbc <_svfiprintf_r+0xd8>
 800506a:	2300      	movs	r3, #0
 800506c:	f04f 0c0a 	mov.w	ip, #10
 8005070:	4619      	mov	r1, r3
 8005072:	3401      	adds	r4, #1
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	4620      	mov	r0, r4
 8005078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800507c:	3a30      	subs	r2, #48	@ 0x30
 800507e:	2a09      	cmp	r2, #9
 8005080:	d903      	bls.n	800508a <_svfiprintf_r+0x1a6>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0c6      	beq.n	8005014 <_svfiprintf_r+0x130>
 8005086:	9105      	str	r1, [sp, #20]
 8005088:	e7c4      	b.n	8005014 <_svfiprintf_r+0x130>
 800508a:	4604      	mov	r4, r0
 800508c:	2301      	movs	r3, #1
 800508e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005092:	e7f0      	b.n	8005076 <_svfiprintf_r+0x192>
 8005094:	ab03      	add	r3, sp, #12
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	462a      	mov	r2, r5
 800509a:	4638      	mov	r0, r7
 800509c:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <_svfiprintf_r+0x1f4>)
 800509e:	a904      	add	r1, sp, #16
 80050a0:	f3af 8000 	nop.w
 80050a4:	1c42      	adds	r2, r0, #1
 80050a6:	4606      	mov	r6, r0
 80050a8:	d1d6      	bne.n	8005058 <_svfiprintf_r+0x174>
 80050aa:	89ab      	ldrh	r3, [r5, #12]
 80050ac:	065b      	lsls	r3, r3, #25
 80050ae:	f53f af2d 	bmi.w	8004f0c <_svfiprintf_r+0x28>
 80050b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050b4:	e72c      	b.n	8004f10 <_svfiprintf_r+0x2c>
 80050b6:	ab03      	add	r3, sp, #12
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	462a      	mov	r2, r5
 80050bc:	4638      	mov	r0, r7
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <_svfiprintf_r+0x1f4>)
 80050c0:	a904      	add	r1, sp, #16
 80050c2:	f000 f87d 	bl	80051c0 <_printf_i>
 80050c6:	e7ed      	b.n	80050a4 <_svfiprintf_r+0x1c0>
 80050c8:	08005736 	.word	0x08005736
 80050cc:	0800573c 	.word	0x0800573c
 80050d0:	08005740 	.word	0x08005740
 80050d4:	00000000 	.word	0x00000000
 80050d8:	08004e2d 	.word	0x08004e2d

080050dc <_printf_common>:
 80050dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	4616      	mov	r6, r2
 80050e2:	4698      	mov	r8, r3
 80050e4:	688a      	ldr	r2, [r1, #8]
 80050e6:	690b      	ldr	r3, [r1, #16]
 80050e8:	4607      	mov	r7, r0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfb8      	it	lt
 80050ee:	4613      	movlt	r3, r2
 80050f0:	6033      	str	r3, [r6, #0]
 80050f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050f6:	460c      	mov	r4, r1
 80050f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050fc:	b10a      	cbz	r2, 8005102 <_printf_common+0x26>
 80050fe:	3301      	adds	r3, #1
 8005100:	6033      	str	r3, [r6, #0]
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	0699      	lsls	r1, r3, #26
 8005106:	bf42      	ittt	mi
 8005108:	6833      	ldrmi	r3, [r6, #0]
 800510a:	3302      	addmi	r3, #2
 800510c:	6033      	strmi	r3, [r6, #0]
 800510e:	6825      	ldr	r5, [r4, #0]
 8005110:	f015 0506 	ands.w	r5, r5, #6
 8005114:	d106      	bne.n	8005124 <_printf_common+0x48>
 8005116:	f104 0a19 	add.w	sl, r4, #25
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	6832      	ldr	r2, [r6, #0]
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	42ab      	cmp	r3, r5
 8005122:	dc2b      	bgt.n	800517c <_printf_common+0xa0>
 8005124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	3b00      	subs	r3, #0
 800512c:	bf18      	it	ne
 800512e:	2301      	movne	r3, #1
 8005130:	0692      	lsls	r2, r2, #26
 8005132:	d430      	bmi.n	8005196 <_printf_common+0xba>
 8005134:	4641      	mov	r1, r8
 8005136:	4638      	mov	r0, r7
 8005138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800513c:	47c8      	blx	r9
 800513e:	3001      	adds	r0, #1
 8005140:	d023      	beq.n	800518a <_printf_common+0xae>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	6922      	ldr	r2, [r4, #16]
 8005146:	f003 0306 	and.w	r3, r3, #6
 800514a:	2b04      	cmp	r3, #4
 800514c:	bf14      	ite	ne
 800514e:	2500      	movne	r5, #0
 8005150:	6833      	ldreq	r3, [r6, #0]
 8005152:	f04f 0600 	mov.w	r6, #0
 8005156:	bf08      	it	eq
 8005158:	68e5      	ldreq	r5, [r4, #12]
 800515a:	f104 041a 	add.w	r4, r4, #26
 800515e:	bf08      	it	eq
 8005160:	1aed      	subeq	r5, r5, r3
 8005162:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005166:	bf08      	it	eq
 8005168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800516c:	4293      	cmp	r3, r2
 800516e:	bfc4      	itt	gt
 8005170:	1a9b      	subgt	r3, r3, r2
 8005172:	18ed      	addgt	r5, r5, r3
 8005174:	42b5      	cmp	r5, r6
 8005176:	d11a      	bne.n	80051ae <_printf_common+0xd2>
 8005178:	2000      	movs	r0, #0
 800517a:	e008      	b.n	800518e <_printf_common+0xb2>
 800517c:	2301      	movs	r3, #1
 800517e:	4652      	mov	r2, sl
 8005180:	4641      	mov	r1, r8
 8005182:	4638      	mov	r0, r7
 8005184:	47c8      	blx	r9
 8005186:	3001      	adds	r0, #1
 8005188:	d103      	bne.n	8005192 <_printf_common+0xb6>
 800518a:	f04f 30ff 	mov.w	r0, #4294967295
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	3501      	adds	r5, #1
 8005194:	e7c1      	b.n	800511a <_printf_common+0x3e>
 8005196:	2030      	movs	r0, #48	@ 0x30
 8005198:	18e1      	adds	r1, r4, r3
 800519a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051a4:	4422      	add	r2, r4
 80051a6:	3302      	adds	r3, #2
 80051a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051ac:	e7c2      	b.n	8005134 <_printf_common+0x58>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4622      	mov	r2, r4
 80051b2:	4641      	mov	r1, r8
 80051b4:	4638      	mov	r0, r7
 80051b6:	47c8      	blx	r9
 80051b8:	3001      	adds	r0, #1
 80051ba:	d0e6      	beq.n	800518a <_printf_common+0xae>
 80051bc:	3601      	adds	r6, #1
 80051be:	e7d9      	b.n	8005174 <_printf_common+0x98>

080051c0 <_printf_i>:
 80051c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	7e0f      	ldrb	r7, [r1, #24]
 80051c6:	4691      	mov	r9, r2
 80051c8:	2f78      	cmp	r7, #120	@ 0x78
 80051ca:	4680      	mov	r8, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	469a      	mov	sl, r3
 80051d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051d6:	d807      	bhi.n	80051e8 <_printf_i+0x28>
 80051d8:	2f62      	cmp	r7, #98	@ 0x62
 80051da:	d80a      	bhi.n	80051f2 <_printf_i+0x32>
 80051dc:	2f00      	cmp	r7, #0
 80051de:	f000 80d3 	beq.w	8005388 <_printf_i+0x1c8>
 80051e2:	2f58      	cmp	r7, #88	@ 0x58
 80051e4:	f000 80ba 	beq.w	800535c <_printf_i+0x19c>
 80051e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051f0:	e03a      	b.n	8005268 <_printf_i+0xa8>
 80051f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051f6:	2b15      	cmp	r3, #21
 80051f8:	d8f6      	bhi.n	80051e8 <_printf_i+0x28>
 80051fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005200 <_printf_i+0x40>)
 80051fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005200:	08005259 	.word	0x08005259
 8005204:	0800526d 	.word	0x0800526d
 8005208:	080051e9 	.word	0x080051e9
 800520c:	080051e9 	.word	0x080051e9
 8005210:	080051e9 	.word	0x080051e9
 8005214:	080051e9 	.word	0x080051e9
 8005218:	0800526d 	.word	0x0800526d
 800521c:	080051e9 	.word	0x080051e9
 8005220:	080051e9 	.word	0x080051e9
 8005224:	080051e9 	.word	0x080051e9
 8005228:	080051e9 	.word	0x080051e9
 800522c:	0800536f 	.word	0x0800536f
 8005230:	08005297 	.word	0x08005297
 8005234:	08005329 	.word	0x08005329
 8005238:	080051e9 	.word	0x080051e9
 800523c:	080051e9 	.word	0x080051e9
 8005240:	08005391 	.word	0x08005391
 8005244:	080051e9 	.word	0x080051e9
 8005248:	08005297 	.word	0x08005297
 800524c:	080051e9 	.word	0x080051e9
 8005250:	080051e9 	.word	0x080051e9
 8005254:	08005331 	.word	0x08005331
 8005258:	6833      	ldr	r3, [r6, #0]
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6032      	str	r2, [r6, #0]
 8005260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005268:	2301      	movs	r3, #1
 800526a:	e09e      	b.n	80053aa <_printf_i+0x1ea>
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	6820      	ldr	r0, [r4, #0]
 8005270:	1d19      	adds	r1, r3, #4
 8005272:	6031      	str	r1, [r6, #0]
 8005274:	0606      	lsls	r6, r0, #24
 8005276:	d501      	bpl.n	800527c <_printf_i+0xbc>
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	e003      	b.n	8005284 <_printf_i+0xc4>
 800527c:	0645      	lsls	r5, r0, #25
 800527e:	d5fb      	bpl.n	8005278 <_printf_i+0xb8>
 8005280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005284:	2d00      	cmp	r5, #0
 8005286:	da03      	bge.n	8005290 <_printf_i+0xd0>
 8005288:	232d      	movs	r3, #45	@ 0x2d
 800528a:	426d      	negs	r5, r5
 800528c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005290:	230a      	movs	r3, #10
 8005292:	4859      	ldr	r0, [pc, #356]	@ (80053f8 <_printf_i+0x238>)
 8005294:	e011      	b.n	80052ba <_printf_i+0xfa>
 8005296:	6821      	ldr	r1, [r4, #0]
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	0608      	lsls	r0, r1, #24
 800529c:	f853 5b04 	ldr.w	r5, [r3], #4
 80052a0:	d402      	bmi.n	80052a8 <_printf_i+0xe8>
 80052a2:	0649      	lsls	r1, r1, #25
 80052a4:	bf48      	it	mi
 80052a6:	b2ad      	uxthmi	r5, r5
 80052a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	bf14      	ite	ne
 80052ae:	230a      	movne	r3, #10
 80052b0:	2308      	moveq	r3, #8
 80052b2:	4851      	ldr	r0, [pc, #324]	@ (80053f8 <_printf_i+0x238>)
 80052b4:	2100      	movs	r1, #0
 80052b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ba:	6866      	ldr	r6, [r4, #4]
 80052bc:	2e00      	cmp	r6, #0
 80052be:	bfa8      	it	ge
 80052c0:	6821      	ldrge	r1, [r4, #0]
 80052c2:	60a6      	str	r6, [r4, #8]
 80052c4:	bfa4      	itt	ge
 80052c6:	f021 0104 	bicge.w	r1, r1, #4
 80052ca:	6021      	strge	r1, [r4, #0]
 80052cc:	b90d      	cbnz	r5, 80052d2 <_printf_i+0x112>
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d04b      	beq.n	800536a <_printf_i+0x1aa>
 80052d2:	4616      	mov	r6, r2
 80052d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80052d8:	fb03 5711 	mls	r7, r3, r1, r5
 80052dc:	5dc7      	ldrb	r7, [r0, r7]
 80052de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052e2:	462f      	mov	r7, r5
 80052e4:	42bb      	cmp	r3, r7
 80052e6:	460d      	mov	r5, r1
 80052e8:	d9f4      	bls.n	80052d4 <_printf_i+0x114>
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d10b      	bne.n	8005306 <_printf_i+0x146>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	07df      	lsls	r7, r3, #31
 80052f2:	d508      	bpl.n	8005306 <_printf_i+0x146>
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	6861      	ldr	r1, [r4, #4]
 80052f8:	4299      	cmp	r1, r3
 80052fa:	bfde      	ittt	le
 80052fc:	2330      	movle	r3, #48	@ 0x30
 80052fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005302:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005306:	1b92      	subs	r2, r2, r6
 8005308:	6122      	str	r2, [r4, #16]
 800530a:	464b      	mov	r3, r9
 800530c:	4621      	mov	r1, r4
 800530e:	4640      	mov	r0, r8
 8005310:	f8cd a000 	str.w	sl, [sp]
 8005314:	aa03      	add	r2, sp, #12
 8005316:	f7ff fee1 	bl	80050dc <_printf_common>
 800531a:	3001      	adds	r0, #1
 800531c:	d14a      	bne.n	80053b4 <_printf_i+0x1f4>
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	b004      	add	sp, #16
 8005324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	f043 0320 	orr.w	r3, r3, #32
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	2778      	movs	r7, #120	@ 0x78
 8005332:	4832      	ldr	r0, [pc, #200]	@ (80053fc <_printf_i+0x23c>)
 8005334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	6831      	ldr	r1, [r6, #0]
 800533c:	061f      	lsls	r7, r3, #24
 800533e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005342:	d402      	bmi.n	800534a <_printf_i+0x18a>
 8005344:	065f      	lsls	r7, r3, #25
 8005346:	bf48      	it	mi
 8005348:	b2ad      	uxthmi	r5, r5
 800534a:	6031      	str	r1, [r6, #0]
 800534c:	07d9      	lsls	r1, r3, #31
 800534e:	bf44      	itt	mi
 8005350:	f043 0320 	orrmi.w	r3, r3, #32
 8005354:	6023      	strmi	r3, [r4, #0]
 8005356:	b11d      	cbz	r5, 8005360 <_printf_i+0x1a0>
 8005358:	2310      	movs	r3, #16
 800535a:	e7ab      	b.n	80052b4 <_printf_i+0xf4>
 800535c:	4826      	ldr	r0, [pc, #152]	@ (80053f8 <_printf_i+0x238>)
 800535e:	e7e9      	b.n	8005334 <_printf_i+0x174>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	f023 0320 	bic.w	r3, r3, #32
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	e7f6      	b.n	8005358 <_printf_i+0x198>
 800536a:	4616      	mov	r6, r2
 800536c:	e7bd      	b.n	80052ea <_printf_i+0x12a>
 800536e:	6833      	ldr	r3, [r6, #0]
 8005370:	6825      	ldr	r5, [r4, #0]
 8005372:	1d18      	adds	r0, r3, #4
 8005374:	6961      	ldr	r1, [r4, #20]
 8005376:	6030      	str	r0, [r6, #0]
 8005378:	062e      	lsls	r6, r5, #24
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	d501      	bpl.n	8005382 <_printf_i+0x1c2>
 800537e:	6019      	str	r1, [r3, #0]
 8005380:	e002      	b.n	8005388 <_printf_i+0x1c8>
 8005382:	0668      	lsls	r0, r5, #25
 8005384:	d5fb      	bpl.n	800537e <_printf_i+0x1be>
 8005386:	8019      	strh	r1, [r3, #0]
 8005388:	2300      	movs	r3, #0
 800538a:	4616      	mov	r6, r2
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	e7bc      	b.n	800530a <_printf_i+0x14a>
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	2100      	movs	r1, #0
 8005394:	1d1a      	adds	r2, r3, #4
 8005396:	6032      	str	r2, [r6, #0]
 8005398:	681e      	ldr	r6, [r3, #0]
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f859 	bl	8005454 <memchr>
 80053a2:	b108      	cbz	r0, 80053a8 <_printf_i+0x1e8>
 80053a4:	1b80      	subs	r0, r0, r6
 80053a6:	6060      	str	r0, [r4, #4]
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	6123      	str	r3, [r4, #16]
 80053ac:	2300      	movs	r3, #0
 80053ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b2:	e7aa      	b.n	800530a <_printf_i+0x14a>
 80053b4:	4632      	mov	r2, r6
 80053b6:	4649      	mov	r1, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	47d0      	blx	sl
 80053be:	3001      	adds	r0, #1
 80053c0:	d0ad      	beq.n	800531e <_printf_i+0x15e>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	079b      	lsls	r3, r3, #30
 80053c6:	d413      	bmi.n	80053f0 <_printf_i+0x230>
 80053c8:	68e0      	ldr	r0, [r4, #12]
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	4298      	cmp	r0, r3
 80053ce:	bfb8      	it	lt
 80053d0:	4618      	movlt	r0, r3
 80053d2:	e7a6      	b.n	8005322 <_printf_i+0x162>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4632      	mov	r2, r6
 80053d8:	4649      	mov	r1, r9
 80053da:	4640      	mov	r0, r8
 80053dc:	47d0      	blx	sl
 80053de:	3001      	adds	r0, #1
 80053e0:	d09d      	beq.n	800531e <_printf_i+0x15e>
 80053e2:	3501      	adds	r5, #1
 80053e4:	68e3      	ldr	r3, [r4, #12]
 80053e6:	9903      	ldr	r1, [sp, #12]
 80053e8:	1a5b      	subs	r3, r3, r1
 80053ea:	42ab      	cmp	r3, r5
 80053ec:	dcf2      	bgt.n	80053d4 <_printf_i+0x214>
 80053ee:	e7eb      	b.n	80053c8 <_printf_i+0x208>
 80053f0:	2500      	movs	r5, #0
 80053f2:	f104 0619 	add.w	r6, r4, #25
 80053f6:	e7f5      	b.n	80053e4 <_printf_i+0x224>
 80053f8:	08005747 	.word	0x08005747
 80053fc:	08005758 	.word	0x08005758

08005400 <memmove>:
 8005400:	4288      	cmp	r0, r1
 8005402:	b510      	push	{r4, lr}
 8005404:	eb01 0402 	add.w	r4, r1, r2
 8005408:	d902      	bls.n	8005410 <memmove+0x10>
 800540a:	4284      	cmp	r4, r0
 800540c:	4623      	mov	r3, r4
 800540e:	d807      	bhi.n	8005420 <memmove+0x20>
 8005410:	1e43      	subs	r3, r0, #1
 8005412:	42a1      	cmp	r1, r4
 8005414:	d008      	beq.n	8005428 <memmove+0x28>
 8005416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800541a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800541e:	e7f8      	b.n	8005412 <memmove+0x12>
 8005420:	4601      	mov	r1, r0
 8005422:	4402      	add	r2, r0
 8005424:	428a      	cmp	r2, r1
 8005426:	d100      	bne.n	800542a <memmove+0x2a>
 8005428:	bd10      	pop	{r4, pc}
 800542a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800542e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005432:	e7f7      	b.n	8005424 <memmove+0x24>

08005434 <_sbrk_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	2300      	movs	r3, #0
 8005438:	4d05      	ldr	r5, [pc, #20]	@ (8005450 <_sbrk_r+0x1c>)
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fb fda2 	bl	8000f88 <_sbrk>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_sbrk_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_sbrk_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20000514 	.word	0x20000514

08005454 <memchr>:
 8005454:	4603      	mov	r3, r0
 8005456:	b510      	push	{r4, lr}
 8005458:	b2c9      	uxtb	r1, r1
 800545a:	4402      	add	r2, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	4618      	mov	r0, r3
 8005460:	d101      	bne.n	8005466 <memchr+0x12>
 8005462:	2000      	movs	r0, #0
 8005464:	e003      	b.n	800546e <memchr+0x1a>
 8005466:	7804      	ldrb	r4, [r0, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	428c      	cmp	r4, r1
 800546c:	d1f6      	bne.n	800545c <memchr+0x8>
 800546e:	bd10      	pop	{r4, pc}

08005470 <_realloc_r>:
 8005470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	4680      	mov	r8, r0
 8005476:	4615      	mov	r5, r2
 8005478:	460c      	mov	r4, r1
 800547a:	b921      	cbnz	r1, 8005486 <_realloc_r+0x16>
 800547c:	4611      	mov	r1, r2
 800547e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	f7ff bc47 	b.w	8004d14 <_malloc_r>
 8005486:	b92a      	cbnz	r2, 8005494 <_realloc_r+0x24>
 8005488:	f7ff fbda 	bl	8004c40 <_free_r>
 800548c:	2400      	movs	r4, #0
 800548e:	4620      	mov	r0, r4
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	f000 f81a 	bl	80054cc <_malloc_usable_size_r>
 8005498:	4285      	cmp	r5, r0
 800549a:	4606      	mov	r6, r0
 800549c:	d802      	bhi.n	80054a4 <_realloc_r+0x34>
 800549e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054a2:	d8f4      	bhi.n	800548e <_realloc_r+0x1e>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7ff fc34 	bl	8004d14 <_malloc_r>
 80054ac:	4607      	mov	r7, r0
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d0ec      	beq.n	800548c <_realloc_r+0x1c>
 80054b2:	42b5      	cmp	r5, r6
 80054b4:	462a      	mov	r2, r5
 80054b6:	4621      	mov	r1, r4
 80054b8:	bf28      	it	cs
 80054ba:	4632      	movcs	r2, r6
 80054bc:	f7ff fbb2 	bl	8004c24 <memcpy>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4640      	mov	r0, r8
 80054c4:	f7ff fbbc 	bl	8004c40 <_free_r>
 80054c8:	463c      	mov	r4, r7
 80054ca:	e7e0      	b.n	800548e <_realloc_r+0x1e>

080054cc <_malloc_usable_size_r>:
 80054cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d0:	1f18      	subs	r0, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfbc      	itt	lt
 80054d6:	580b      	ldrlt	r3, [r1, r0]
 80054d8:	18c0      	addlt	r0, r0, r3
 80054da:	4770      	bx	lr

080054dc <_init>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr

080054e8 <_fini>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr
