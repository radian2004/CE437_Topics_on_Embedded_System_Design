
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e0c  08003e0c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e0c  08003e0c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e0c  08003e0c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e10  08003e10  00004e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  08003e70  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08003e70  00005390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be32  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc5  00000000  00000000  00010eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00012e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008af  00000000  00000000  000139c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a5  00000000  00000000  0001426f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f235  00000000  00000000  0002c714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008740f  00000000  00000000  0003b949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003244  00000000  00000000  000c2d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c5fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b94 	.word	0x08003b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003b94 	.word	0x08003b94

0800014c <TOF_InitStruct>:
const size_t registered_sensors_cnt = _VL53L1X_MAX_SENSORS;
static int (*vl53l1x_log_func)(const char*, ...) = NULL;

// Function definitions
int TOF_InitStruct(VL53L1X* sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	71fb      	strb	r3, [r7, #7]
	if (address == 0x29)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b29      	cmp	r3, #41	@ 0x29
 8000160:	d107      	bne.n	8000172 <TOF_InitStruct+0x26>
		_VL53L1X_LOG("Trying to set 0x29 as the address for the ToF, this can cause issues\r\n");
 8000162:	4b1f      	ldr	r3, [pc, #124]	@ (80001e0 <TOF_InitStruct+0x94>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d003      	beq.n	8000172 <TOF_InitStruct+0x26>
 800016a:	4b1d      	ldr	r3, [pc, #116]	@ (80001e0 <TOF_InitStruct+0x94>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	481d      	ldr	r0, [pc, #116]	@ (80001e4 <TOF_InitStruct+0x98>)
 8000170:	4798      	blx	r3

	sensor->hi2c = hi2c;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	79fa      	ldrb	r2, [r7, #7]
 800017c:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	683a      	ldr	r2, [r7, #0]
 8000182:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	8c3a      	ldrh	r2, [r7, #32]
 8000188:	819a      	strh	r2, [r3, #12]

	// Find free slot
	uint8_t id;
	for (id = 0; (id < _VL53L1X_MAX_SENSORS) && registered_sensors[id] != NULL; id++);
 800018a:	2300      	movs	r3, #0
 800018c:	75fb      	strb	r3, [r7, #23]
 800018e:	e002      	b.n	8000196 <TOF_InitStruct+0x4a>
 8000190:	7dfb      	ldrb	r3, [r7, #23]
 8000192:	3301      	adds	r3, #1
 8000194:	75fb      	strb	r3, [r7, #23]
 8000196:	7dfb      	ldrb	r3, [r7, #23]
 8000198:	2b09      	cmp	r3, #9
 800019a:	d805      	bhi.n	80001a8 <TOF_InitStruct+0x5c>
 800019c:	7dfb      	ldrb	r3, [r7, #23]
 800019e:	4a12      	ldr	r2, [pc, #72]	@ (80001e8 <TOF_InitStruct+0x9c>)
 80001a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d1f3      	bne.n	8000190 <TOF_InitStruct+0x44>

	if (id >= _VL53L1X_MAX_SENSORS)
 80001a8:	7dfb      	ldrb	r3, [r7, #23]
 80001aa:	2b09      	cmp	r3, #9
 80001ac:	d90b      	bls.n	80001c6 <TOF_InitStruct+0x7a>
	{
		_VL53L1X_LOG("Added too many sensors, increase _VL53L1X_MAX_SENSORS value, currently %d\r\n", registered_sensors_cnt);
 80001ae:	4b0c      	ldr	r3, [pc, #48]	@ (80001e0 <TOF_InitStruct+0x94>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d005      	beq.n	80001c2 <TOF_InitStruct+0x76>
 80001b6:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <TOF_InitStruct+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	220a      	movs	r2, #10
 80001bc:	4611      	mov	r1, r2
 80001be:	480b      	ldr	r0, [pc, #44]	@ (80001ec <TOF_InitStruct+0xa0>)
 80001c0:	4798      	blx	r3
		return 1;
 80001c2:	2301      	movs	r3, #1
 80001c4:	e008      	b.n	80001d8 <TOF_InitStruct+0x8c>
	}

	sensor->id = id;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	7dfa      	ldrb	r2, [r7, #23]
 80001ca:	739a      	strb	r2, [r3, #14]
	registered_sensors[id] = sensor;
 80001cc:	7dfb      	ldrb	r3, [r7, #23]
 80001ce:	4906      	ldr	r1, [pc, #24]	@ (80001e8 <TOF_InitStruct+0x9c>)
 80001d0:	68fa      	ldr	r2, [r7, #12]
 80001d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return 0;
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	08003bac 	.word	0x08003bac
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003c00 	.word	0x08003c00

080001f0 <TOF_TurnOn>:

void TOF_TurnOn(const VL53L1X* sensor)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6898      	ldr	r0, [r3, #8]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	899b      	ldrh	r3, [r3, #12]
 8000200:	2201      	movs	r2, #1
 8000202:	4619      	mov	r1, r3
 8000204:	f001 f996 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <TOF_TurnOff>:

void TOF_TurnOff(const VL53L1X* sensor)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	6898      	ldr	r0, [r3, #8]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	899b      	ldrh	r3, [r3, #12]
 8000220:	2200      	movs	r2, #0
 8000222:	4619      	mov	r1, r3
 8000224:	f001 f986 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <TOF_BootMultipleSensors>:

int TOF_BootMultipleSensors(VL53L1X** sensors, uint8_t sensor_number)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	60fb      	str	r3, [r7, #12]

	for (uint8_t i = 0; i < sensor_number; i++) {
 8000240:	2300      	movs	r3, #0
 8000242:	72fb      	strb	r3, [r7, #11]
 8000244:	e00a      	b.n	800025c <TOF_BootMultipleSensors+0x2c>
		TOF_TurnOff(sensors[i]);
 8000246:	7afb      	ldrb	r3, [r7, #11]
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	4413      	add	r3, r2
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ffdd 	bl	8000210 <TOF_TurnOff>
	for (uint8_t i = 0; i < sensor_number; i++) {
 8000256:	7afb      	ldrb	r3, [r7, #11]
 8000258:	3301      	adds	r3, #1
 800025a:	72fb      	strb	r3, [r7, #11]
 800025c:	7afa      	ldrb	r2, [r7, #11]
 800025e:	78fb      	ldrb	r3, [r7, #3]
 8000260:	429a      	cmp	r2, r3
 8000262:	d3f0      	bcc.n	8000246 <TOF_BootMultipleSensors+0x16>
	}

	for (uint8_t i = 0; i < sensor_number; i++) {
 8000264:	2300      	movs	r3, #0
 8000266:	72bb      	strb	r3, [r7, #10]
 8000268:	e00e      	b.n	8000288 <TOF_BootMultipleSensors+0x58>
		status |= TOF_BootSensor(sensors[i]);
 800026a:	7abb      	ldrb	r3, [r7, #10]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	4413      	add	r3, r2
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f811 	bl	800029c <TOF_BootSensor>
 800027a:	4602      	mov	r2, r0
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4313      	orrs	r3, r2
 8000280:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensor_number; i++) {
 8000282:	7abb      	ldrb	r3, [r7, #10]
 8000284:	3301      	adds	r3, #1
 8000286:	72bb      	strb	r3, [r7, #10]
 8000288:	7aba      	ldrb	r2, [r7, #10]
 800028a:	78fb      	ldrb	r3, [r7, #3]
 800028c:	429a      	cmp	r2, r3
 800028e:	d3ec      	bcc.n	800026a <TOF_BootMultipleSensors+0x3a>
	}

	return status;
 8000290:	68fb      	ldr	r3, [r7, #12]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <TOF_BootSensor>:

int TOF_BootSensor(VL53L1X* sensor)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	int status = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
	TOF_TurnOn(sensor);
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f7ff ffa1 	bl	80001f0 <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 80002ae:	2002      	movs	r0, #2
 80002b0:	f000 feb4 	bl	800101c <HAL_Delay>

    // Check if sensor is already configured with the correct address
    uint16_t id = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	813b      	strh	r3, [r7, #8]
    if (VL53L1X_GetSensorId(sensor->id, &id) != 0)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	7b9b      	ldrb	r3, [r3, #14]
 80002bc:	461a      	mov	r2, r3
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	4619      	mov	r1, r3
 80002c4:	4610      	mov	r0, r2
 80002c6:	f000 f9d2 	bl	800066e <VL53L1X_GetSensorId>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d029      	beq.n	8000324 <TOF_BootSensor+0x88>
    {
    	uint8_t real_address = sensor->address;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	72fb      	strb	r3, [r7, #11]
    	sensor->address = 0x29;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2229      	movs	r2, #41	@ 0x29
 80002da:	711a      	strb	r2, [r3, #4]

    	status = VL53L1X_SetI2CAddress(sensor->id, real_address);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	7b9b      	ldrb	r3, [r3, #14]
 80002e0:	461a      	mov	r2, r3
 80002e2:	7afb      	ldrb	r3, [r7, #11]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4610      	mov	r0, r2
 80002e8:	f000 f890 	bl	800040c <VL53L1X_SetI2CAddress>
 80002ec:	4603      	mov	r3, r0
 80002ee:	60fb      	str	r3, [r7, #12]

    	sensor->address = real_address;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	7afa      	ldrb	r2, [r7, #11]
 80002f4:	711a      	strb	r2, [r3, #4]

    	if (status != 0)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d013      	beq.n	8000324 <TOF_BootSensor+0x88>
    	{
    		if (sensor->address == 0x20) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	2b20      	cmp	r3, #32
 8000302:	d103      	bne.n	800030c <TOF_BootSensor+0x70>
    			status = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	60fb      	str	r3, [r7, #12]
    			return status;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	e049      	b.n	80003a0 <TOF_BootSensor+0x104>
    		}
    		else if (sensor->address == 0x26) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	2b26      	cmp	r3, #38	@ 0x26
 8000312:	d103      	bne.n	800031c <TOF_BootSensor+0x80>
    			status = 2;
 8000314:	2302      	movs	r3, #2
 8000316:	60fb      	str	r3, [r7, #12]
    			return status;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	e041      	b.n	80003a0 <TOF_BootSensor+0x104>
    		}
    		else {
    			status = 9;
 800031c:	2309      	movs	r3, #9
 800031e:	60fb      	str	r3, [r7, #12]
    			return status;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	e03d      	b.n	80003a0 <TOF_BootSensor+0x104>
    		return status;
    	}
    }

	// Initialize sensor
    status = VL53L1X_SensorInit(sensor->id);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	7b9b      	ldrb	r3, [r3, #14]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f88b 	bl	8000444 <VL53L1X_SensorInit>
 800032e:	4603      	mov	r3, r0
 8000330:	60fb      	str	r3, [r7, #12]
	if (status)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d00e      	beq.n	8000356 <TOF_BootSensor+0xba>
	{
		status = 3;
 8000338:	2303      	movs	r3, #3
 800033a:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to initialize sensor 0x%02X\r\n", sensor->address);
 800033c:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <TOF_BootSensor+0x10c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <TOF_BootSensor+0xb6>
 8000344:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <TOF_BootSensor+0x10c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	7912      	ldrb	r2, [r2, #4]
 800034c:	4611      	mov	r1, r2
 800034e:	4817      	ldr	r0, [pc, #92]	@ (80003ac <TOF_BootSensor+0x110>)
 8000350:	4798      	blx	r3
		return status;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	e024      	b.n	80003a0 <TOF_BootSensor+0x104>
	}
	status = VL53L1X_StartRanging(sensor->id);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	7b9b      	ldrb	r3, [r3, #14]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 f920 	bl	80005a0 <VL53L1X_StartRanging>
 8000360:	4603      	mov	r3, r0
 8000362:	60fb      	str	r3, [r7, #12]
	if (status)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d00e      	beq.n	8000388 <TOF_BootSensor+0xec>
	{
		status = 4;
 800036a:	2304      	movs	r3, #4
 800036c:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to start measurements on sensor 0x%02X\r\n", sensor->address);
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <TOF_BootSensor+0x10c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d006      	beq.n	8000384 <TOF_BootSensor+0xe8>
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <TOF_BootSensor+0x10c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	7912      	ldrb	r2, [r2, #4]
 800037e:	4611      	mov	r1, r2
 8000380:	480b      	ldr	r0, [pc, #44]	@ (80003b0 <TOF_BootSensor+0x114>)
 8000382:	4798      	blx	r3
		return status;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	e00b      	b.n	80003a0 <TOF_BootSensor+0x104>
	}

	_VL53L1X_LOG("Sensor 0x%02X configured successfully\r\n", sensor->address);
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <TOF_BootSensor+0x10c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d006      	beq.n	800039e <TOF_BootSensor+0x102>
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <TOF_BootSensor+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	7912      	ldrb	r2, [r2, #4]
 8000398:	4611      	mov	r1, r2
 800039a:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <TOF_BootSensor+0x118>)
 800039c:	4798      	blx	r3
	return 0;
 800039e:	2300      	movs	r3, #0
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200000a0 	.word	0x200000a0
 80003ac:	08003c58 	.word	0x08003c58
 80003b0:	08003c88 	.word	0x08003c88
 80003b4:	08003cc4 	.word	0x08003cc4

080003b8 <TOF_GetDistance>:

uint16_t TOF_GetDistance(const VL53L1X* sensor)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint16_t reading = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	81fb      	strh	r3, [r7, #14]
	if(VL53L1X_GetDistance(sensor->id, &reading) != 0)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7b9b      	ldrb	r3, [r3, #14]
 80003c8:	461a      	mov	r2, r3
 80003ca:	f107 030e 	add.w	r3, r7, #14
 80003ce:	4619      	mov	r1, r3
 80003d0:	4610      	mov	r0, r2
 80003d2:	f000 f96c 	bl	80006ae <VL53L1X_GetDistance>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d00d      	beq.n	80003f8 <TOF_GetDistance+0x40>
	{
		_VL53L1X_LOG("Failed to read distance from sensor 0x%02X\r\n", sensor->address);
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <TOF_GetDistance+0x4c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d006      	beq.n	80003f2 <TOF_GetDistance+0x3a>
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <TOF_GetDistance+0x4c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7912      	ldrb	r2, [r2, #4]
 80003ec:	4611      	mov	r1, r2
 80003ee:	4806      	ldr	r0, [pc, #24]	@ (8000408 <TOF_GetDistance+0x50>)
 80003f0:	4798      	blx	r3
		return 0xFFFF; // VL53L1X_GetDistance() returns the reading for previous sensor if reading failed
 80003f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003f6:	e000      	b.n	80003fa <TOF_GetDistance+0x42>
	}
	return reading;
 80003f8:	89fb      	ldrh	r3, [r7, #14]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000a0 	.word	0x200000a0
 8000408:	08003cf8 	.word	0x08003cf8

0800040c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	80fb      	strh	r3, [r7, #6]
 8000418:	4613      	mov	r3, r2
 800041a:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8000420:	797a      	ldrb	r2, [r7, #5]
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	2101      	movs	r1, #1
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fccc 	bl	8000dc4 <VL53L1_WrByte>
 800042c:	4603      	mov	r3, r0
 800042e:	461a      	mov	r2, r3
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	4313      	orrs	r3, r2
 8000434:	73fb      	strb	r3, [r7, #15]
	return status;
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8000452:	2300      	movs	r3, #0
 8000454:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000456:	232d      	movs	r3, #45	@ 0x2d
 8000458:	73bb      	strb	r3, [r7, #14]
 800045a:	e011      	b.n	8000480 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800045c:	7bbb      	ldrb	r3, [r7, #14]
 800045e:	b299      	uxth	r1, r3
 8000460:	7bbb      	ldrb	r3, [r7, #14]
 8000462:	3b2d      	subs	r3, #45	@ 0x2d
 8000464:	4a2c      	ldr	r2, [pc, #176]	@ (8000518 <VL53L1X_SensorInit+0xd4>)
 8000466:	5cd2      	ldrb	r2, [r2, r3]
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fcaa 	bl	8000dc4 <VL53L1_WrByte>
 8000470:	4603      	mov	r3, r0
 8000472:	461a      	mov	r2, r3
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	4313      	orrs	r3, r2
 8000478:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800047a:	7bbb      	ldrb	r3, [r7, #14]
 800047c:	3301      	adds	r3, #1
 800047e:	73bb      	strb	r3, [r7, #14]
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	2b87      	cmp	r3, #135	@ 0x87
 8000484:	d9ea      	bls.n	800045c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f889 	bl	80005a0 <VL53L1X_StartRanging>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	4313      	orrs	r3, r2
 8000496:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800049c:	e00b      	b.n	80004b6 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800049e:	f107 020d 	add.w	r2, r7, #13
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	4611      	mov	r1, r2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f8aa 	bl	8000600 <VL53L1X_CheckForDataReady>
 80004ac:	4603      	mov	r3, r0
 80004ae:	461a      	mov	r2, r3
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	4313      	orrs	r3, r2
 80004b4:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80004b6:	7b7b      	ldrb	r3, [r7, #13]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f0      	beq.n	800049e <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f82c 	bl	800051c <VL53L1X_ClearInterrupt>
 80004c4:	4603      	mov	r3, r0
 80004c6:	461a      	mov	r2, r3
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f87d 	bl	80005d0 <VL53L1X_StopRanging>
 80004d6:	4603      	mov	r3, r0
 80004d8:	461a      	mov	r2, r3
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	4313      	orrs	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	2209      	movs	r2, #9
 80004e4:	2108      	movs	r1, #8
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fc6c 	bl	8000dc4 <VL53L1_WrByte>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	2200      	movs	r2, #0
 80004fa:	210b      	movs	r1, #11
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fc61 	bl	8000dc4 <VL53L1_WrByte>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4313      	orrs	r3, r2
 800050a:	73fb      	strb	r3, [r7, #15]
	return status;
 800050c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08003d50 	.word	0x08003d50

0800051c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	2201      	movs	r2, #1
 800052e:	2186      	movs	r1, #134	@ 0x86
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fc47 	bl	8000dc4 <VL53L1_WrByte>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	4313      	orrs	r3, r2
 800053e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800055c:	f107 020e 	add.w	r2, r7, #14
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	2130      	movs	r1, #48	@ 0x30
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fc59 	bl	8000e1c <VL53L1_RdByte>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	4313      	orrs	r3, r2
 8000572:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	f003 0310 	and.w	r3, r3, #16
 800057a:	b2db      	uxtb	r3, r3
 800057c:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	091b      	lsrs	r3, r3, #4
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf0c      	ite	eq
 8000588:	2301      	moveq	r3, #1
 800058a:	2300      	movne	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	701a      	strb	r2, [r3, #0]
	return status;
 8000594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	2240      	movs	r2, #64	@ 0x40
 80005b2:	2187      	movs	r1, #135	@ 0x87
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fc05 	bl	8000dc4 <VL53L1_WrByte>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	73fb      	strb	r3, [r7, #15]
	return status;
 80005c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	2200      	movs	r2, #0
 80005e2:	2187      	movs	r1, #135	@ 0x87
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fbed 	bl	8000dc4 <VL53L1_WrByte>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80005f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000610:	f107 020d 	add.w	r2, r7, #13
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff97 	bl	800054c <VL53L1X_GetInterruptPolarity>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	4313      	orrs	r3, r2
 8000626:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000628:	f107 020e 	add.w	r2, r7, #14
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	2131      	movs	r1, #49	@ 0x31
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fbf3 	bl	8000e1c <VL53L1_RdByte>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	4313      	orrs	r3, r2
 800063e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10c      	bne.n	8000662 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	7b7a      	ldrb	r2, [r7, #13]
 8000650:	4293      	cmp	r3, r2
 8000652:	d103      	bne.n	800065c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	e002      	b.n	8000662 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	6039      	str	r1, [r7, #0]
 8000678:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8000682:	f107 020c 	add.w	r2, r7, #12
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	f240 110f 	movw	r1, #271	@ 0x10f
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fbfd 	bl	8000e8c <VL53L1_RdWord>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	4313      	orrs	r3, r2
 800069a:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 800069c:	89ba      	ldrh	r2, [r7, #12]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	801a      	strh	r2, [r3, #0]
	return status;
 80006a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b084      	sub	sp, #16
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	6039      	str	r1, [r7, #0]
 80006b8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80006be:	f107 020c 	add.w	r2, r7, #12
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	2196      	movs	r1, #150	@ 0x96
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fbe0 	bl	8000e8c <VL53L1_RdWord>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 80006d6:	89ba      	ldrh	r2, [r7, #12]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	801a      	strh	r2, [r3, #0]
	return status;
 80006dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a30      	ldr	r2, [pc, #192]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b2e      	ldr	r3, [pc, #184]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a24      	ldr	r2, [pc, #144]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <MX_GPIO_Init+0xdc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_On_board_GPIO_Port, LED_On_board_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000762:	4819      	ldr	r0, [pc, #100]	@ (80007c8 <MX_GPIO_Init+0xe0>)
 8000764:	f000 fee6 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO10_Pin|XSHUT1_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800076e:	4816      	ldr	r0, [pc, #88]	@ (80007c8 <MX_GPIO_Init+0xe0>)
 8000770:	f000 fee0 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XSHUT2_Pin|GPIO11_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800077a:	4814      	ldr	r0, [pc, #80]	@ (80007cc <MX_GPIO_Init+0xe4>)
 800077c:	f000 feda 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_On_board_Pin|GPIO10_Pin|XSHUT1_Pin;
 8000780:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <MX_GPIO_Init+0xe0>)
 800079a:	f000 fd47 	bl	800122c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = XSHUT2_Pin|GPIO11_Pin;
 800079e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_GPIO_Init+0xe4>)
 80007b8:	f000 fd38 	bl	800122c <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f000 fea9 	bl	8001564 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 f949 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000a4 	.word	0x200000a4
 8000824:	40005400 	.word	0x40005400
 8000828:	00061a80 	.word	0x00061a80

0800082c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a15      	ldr	r2, [pc, #84]	@ (800089c <HAL_I2C_MspInit+0x70>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d123      	bne.n	8000894 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <HAL_I2C_MspInit+0x74>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <HAL_I2C_MspInit+0x74>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_I2C_MspInit+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0308 	and.w	r3, r3, #8
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000864:	23c0      	movs	r3, #192	@ 0xc0
 8000866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2302      	movs	r3, #2
 800086e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <HAL_I2C_MspInit+0x78>)
 8000878:	f000 fcd8 	bl	800122c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_I2C_MspInit+0x74>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <HAL_I2C_MspInit+0x74>)
 8000882:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000886:	61d3      	str	r3, [r2, #28]
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_I2C_MspInit+0x74>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0a8      	sub	sp, #160	@ 0xa0
 80008ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fb53 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f8b7 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f7ff ff17 	bl	80006e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008ba:	f7ff ff89 	bl	80007d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008be:	f000 f997 	bl	8000bf0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[100];
  //TOF_SetLogFunction(printf);

  VL53L1X sensor1, sensor2;
  TOF_InitStruct(&sensor1, &hi2c1, 0x20, XSHUT1_GPIO_Port, XSHUT1_Pin); //Cấu hình các thông số cho cảm biến 1
 80008c2:	f107 0018 	add.w	r0, r7, #24
 80008c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4b4f      	ldr	r3, [pc, #316]	@ (8000a0c <main+0x164>)
 80008ce:	2220      	movs	r2, #32
 80008d0:	494f      	ldr	r1, [pc, #316]	@ (8000a10 <main+0x168>)
 80008d2:	f7ff fc3b 	bl	800014c <TOF_InitStruct>
  TOF_InitStruct(&sensor2, &hi2c1, 0x26, XSHUT2_GPIO_Port, XSHUT2_Pin); //Cấu hình các thông số cho cảm biến 2
 80008d6:	f107 0008 	add.w	r0, r7, #8
 80008da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <main+0x16c>)
 80008e2:	2226      	movs	r2, #38	@ 0x26
 80008e4:	494a      	ldr	r1, [pc, #296]	@ (8000a10 <main+0x168>)
 80008e6:	f7ff fc31 	bl	800014c <TOF_InitStruct>

  VL53L1X* sensors[] = {&sensor1, &sensor2};
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	607b      	str	r3, [r7, #4]
  int status = TOF_BootMultipleSensors(sensors, 2); //Boot lần lượt từng cảm biến
 80008f6:	463b      	mov	r3, r7
 80008f8:	2102      	movs	r1, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc98 	bl	8000230 <TOF_BootMultipleSensors>
 8000900:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
  if (status != 0) //Nếu boot được thì in ra
 8000904:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000908:	2b00      	cmp	r3, #0
 800090a:	d010      	beq.n	800092e <main+0x86>
  {
	  sprintf(msg, "%d", (int)status);
 800090c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000910:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000914:	4940      	ldr	r1, [pc, #256]	@ (8000a18 <main+0x170>)
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fc8c 	bl	8003234 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, 1, 100); //
 800091c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000920:	2364      	movs	r3, #100	@ 0x64
 8000922:	2201      	movs	r2, #1
 8000924:	483d      	ldr	r0, [pc, #244]	@ (8000a1c <main+0x174>)
 8000926:	f002 fab1 	bl	8002e8c <HAL_UART_Transmit>
	  while (1) {}
 800092a:	bf00      	nop
 800092c:	e7fd      	b.n	800092a <main+0x82>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //I2C_FIX();
  	uint16_t distance = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  	int distance2;
	while (1)
	{
		distance = TOF_GetDistance(&sensor1); //Lấy dữ liệu khoảng cách
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd3d 	bl	80003b8 <TOF_GetDistance>
 800093e:	4603      	mov	r3, r0
 8000940:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		if (distance == 0xFFFF || distance2 == 0xFFFF) {
 8000944:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800094c:	4293      	cmp	r3, r2
 800094e:	d005      	beq.n	800095c <main+0xb4>
 8000950:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	4293      	cmp	r3, r2
 800095a:	d109      	bne.n	8000970 <main+0xc8>
			HAL_Init();
 800095c:	f000 fafc 	bl	8000f58 <HAL_Init>
			SystemClock_Config();
 8000960:	f000 f860 	bl	8000a24 <SystemClock_Config>
			MX_GPIO_Init();
 8000964:	f7ff fec0 	bl	80006e8 <MX_GPIO_Init>
			MX_I2C1_Init();
 8000968:	f7ff ff32 	bl	80007d0 <MX_I2C1_Init>
			MX_USART1_UART_Init();
 800096c:	f000 f940 	bl	8000bf0 <MX_USART1_UART_Init>
		}
		distance = TOF_GetDistance(&sensor1);
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fd1f 	bl	80003b8 <TOF_GetDistance>
 800097a:	4603      	mov	r3, r0
 800097c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		//sprintf(msg, "\n\rD1: %d mm", distance);
		//HAL_UART_Transmit(&huart1, msg, 20, 100);

		distance2 = TOF_GetDistance(&sensor2);
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd17 	bl	80003b8 <TOF_GetDistance>
 800098a:	4603      	mov	r3, r0
 800098c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		if (distance == 0xFFFF || distance2 == 0xFFFF) {
 8000990:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000994:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000998:	4293      	cmp	r3, r2
 800099a:	d005      	beq.n	80009a8 <main+0x100>
 800099c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d109      	bne.n	80009bc <main+0x114>
			HAL_Init();
 80009a8:	f000 fad6 	bl	8000f58 <HAL_Init>
			SystemClock_Config();
 80009ac:	f000 f83a 	bl	8000a24 <SystemClock_Config>
			MX_GPIO_Init();
 80009b0:	f7ff fe9a 	bl	80006e8 <MX_GPIO_Init>
			MX_I2C1_Init();
 80009b4:	f7ff ff0c 	bl	80007d0 <MX_I2C1_Init>
			MX_USART1_UART_Init();
 80009b8:	f000 f91a 	bl	8000bf0 <MX_USART1_UART_Init>
		}
		distance2 = TOF_GetDistance(&sensor2);
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fcf9 	bl	80003b8 <TOF_GetDistance>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		distance2 -= 10;
 80009cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009d0:	3b0a      	subs	r3, #10
 80009d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		if (distance2 <= 3) {
 80009d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009da:	2b03      	cmp	r3, #3
 80009dc:	dc02      	bgt.n	80009e4 <main+0x13c>
			distance2 = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		}
		sprintf(msg, "\n\rD1: %d mm\n\rD2: %d mm", distance, distance2);
 80009e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80009e8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80009ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80009f0:	490b      	ldr	r1, [pc, #44]	@ (8000a20 <main+0x178>)
 80009f2:	f002 fc1f 	bl	8003234 <siprintf>
		HAL_UART_Transmit(&huart1, msg, 40, 100);
 80009f6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80009fa:	2364      	movs	r3, #100	@ 0x64
 80009fc:	2228      	movs	r2, #40	@ 0x28
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <main+0x174>)
 8000a00:	f002 fa44 	bl	8002e8c <HAL_UART_Transmit>

		HAL_Delay(2);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 fb09 	bl	800101c <HAL_Delay>
		distance = TOF_GetDistance(&sensor1); //Lấy dữ liệu khoảng cách
 8000a0a:	e793      	b.n	8000934 <main+0x8c>
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	200000a4 	.word	0x200000a4
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	08003d30 	.word	0x08003d30
 8000a1c:	200000fc 	.word	0x200000fc
 8000a20:	08003d34 	.word	0x08003d34

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b090      	sub	sp, #64	@ 0x40
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	2228      	movs	r2, #40	@ 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fc1e 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a62:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fdad 	bl	80025cc <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a78:	f000 f819 	bl	8000aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2102      	movs	r1, #2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f81a 	bl	8002ad0 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aa2:	f000 f804 	bl	8000aae <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3740      	adds	r7, #64	@ 0x40
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab2:	b672      	cpsid	i
}
 8000ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <HAL_MspInit+0x5c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_MspInit+0x5c>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_MspInit+0x5c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_MspInit+0x5c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_MspInit+0x60>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_MspInit+0x60>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 fa38 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 fb6c 	bl	8003284 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20005000 	.word	0x20005000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	200000f8 	.word	0x200000f8
 8000be0:	20000390 	.word	0x20000390

08000be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <MX_USART1_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c28:	f002 f8e0 	bl	8002dec <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f7ff ff3c 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000fc 	.word	0x200000fc
 8000c40:	40013800 	.word	0x40013800

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <HAL_UART_MspInit+0x8c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d131      	bne.n	8000cc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_UART_MspInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <HAL_UART_MspInit+0x94>)
 8000caa:	f000 fabf 	bl	800122c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_UART_MspInit+0x94>)
 8000cc4:	f000 fab2 	bl	800122c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010800 	.word	0x40010800

08000cdc <_GetTof>:
extern VL53L1X* registered_sensors[];
extern size_t registered_sensors_cnt;
uint8_t _I2CBuffer[256];

VL53L1X* _GetTof(uint16_t dev)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e016      	b.n	8000d1a <_GetTof+0x3e>
		if (registered_sensors[i] != NULL && registered_sensors[i]->id == dev)
 8000cec:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <_GetTof+0x54>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00d      	beq.n	8000d14 <_GetTof+0x38>
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <_GetTof+0x54>)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	7b9b      	ldrb	r3, [r3, #14]
 8000d02:	461a      	mov	r2, r3
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d104      	bne.n	8000d14 <_GetTof+0x38>
		{
			return registered_sensors[i];
 8000d0a:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <_GetTof+0x54>)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	e008      	b.n	8000d26 <_GetTof+0x4a>
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <_GetTof+0x58>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3e3      	bcc.n	8000cec <_GetTof+0x10>
		}

	return NULL;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	20000078 	.word	0x20000078
 8000d34:	08003d4c 	.word	0x08003d4c

08000d38 <_I2CWrite>:

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ffc7 	bl	8000cdc <_GetTof>
 8000d4e:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <_I2CWrite+0x22>
		return 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00d      	b.n	8000d76 <_I2CWrite+0x3e>

	return (int) HAL_I2C_Master_Transmit(tof->hi2c, tof->address << 1, pdata, count, 100);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	b299      	uxth	r1, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2264      	movs	r2, #100	@ 0x64
 8000d6c:	9200      	str	r2, [sp, #0]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f000 fd3c 	bl	80017ec <HAL_I2C_Master_Transmit>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b088      	sub	sp, #32
 8000d82:	af02      	add	r7, sp, #8
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ffa4 	bl	8000cdc <_GetTof>
 8000d94:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <_I2CRead+0x22>
		return 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e00d      	b.n	8000dbc <_I2CRead+0x3e>

    return (int) HAL_I2C_Master_Receive(tof->hi2c, tof->address << 1, pdata, count, 100);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	791b      	ldrb	r3, [r3, #4]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b299      	uxth	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	2264      	movs	r2, #100	@ 0x64
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	f000 fe17 	bl	80019e8 <HAL_I2C_Master_Receive>
 8000dba:	4603      	mov	r3, r0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <VL53L1_WrByte+0x54>)
 8000de4:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <VL53L1_WrByte+0x54>)
 8000dec:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <VL53L1_WrByte+0x54>)
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	2203      	movs	r2, #3
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <VL53L1_WrByte+0x54>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff9c 	bl	8000d38 <_I2CWrite>
 8000e00:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000e08:	23f3      	movs	r3, #243	@ 0xf3
 8000e0a:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000144 	.word	0x20000144

08000e1c <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	603a      	str	r2, [r7, #0]
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <VL53L1_RdByte+0x6c>)
 8000e3a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <VL53L1_RdByte+0x6c>)
 8000e42:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	2202      	movs	r2, #2
 8000e48:	490f      	ldr	r1, [pc, #60]	@ (8000e88 <VL53L1_RdByte+0x6c>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff74 	bl	8000d38 <_I2CWrite>
 8000e50:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000e58:	23f3      	movs	r3, #243	@ 0xf3
 8000e5a:	73fb      	strb	r3, [r7, #15]
        goto done;
 8000e5c:	e00d      	b.n	8000e7a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2201      	movs	r2, #1
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff8a 	bl	8000d7e <_I2CRead>
 8000e6a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000e72:	23f3      	movs	r3, #243	@ 0xf3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e000      	b.n	8000e7a <VL53L1_RdByte+0x5e>
    }
done:
 8000e78:	bf00      	nop

	return Status;
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000144 	.word	0x20000144

08000e8c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	603a      	str	r2, [r7, #0]
 8000e96:	80fb      	strh	r3, [r7, #6]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000ea0:	88bb      	ldrh	r3, [r7, #4]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <VL53L1_RdWord+0x7c>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <VL53L1_RdWord+0x7c>)
 8000eb2:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4913      	ldr	r1, [pc, #76]	@ (8000f08 <VL53L1_RdWord+0x7c>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff3c 	bl	8000d38 <_I2CWrite>
 8000ec0:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000ec8:	23f3      	movs	r3, #243	@ 0xf3
 8000eca:	73fb      	strb	r3, [r7, #15]
        goto done;
 8000ecc:	e016      	b.n	8000efc <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <VL53L1_RdWord+0x7c>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff52 	bl	8000d7e <_I2CRead>
 8000eda:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000ee2:	23f3      	movs	r3, #243	@ 0xf3
 8000ee4:	73fb      	strb	r3, [r7, #15]
        goto done;
 8000ee6:	e009      	b.n	8000efc <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <VL53L1_RdWord+0x7c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <VL53L1_RdWord+0x7c>)
 8000ef2:	7852      	ldrb	r2, [r2, #1]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000144 	.word	0x20000144

08000f0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f0c:	f7ff fe6a 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f12:	490c      	ldr	r1, [pc, #48]	@ (8000f44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f14:	4a0c      	ldr	r2, [pc, #48]	@ (8000f48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f28:	4c09      	ldr	r4, [pc, #36]	@ (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f36:	f002 f9ab 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3a:	f7ff fcb5 	bl	80008a8 <main>
  bx lr
 8000f3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f48:	08003e14 	.word	0x08003e14
  ldr r2, =_sbss
 8000f4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f50:	20000390 	.word	0x20000390

08000f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_2_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_Init+0x28>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <HAL_Init+0x28>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f92b 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fda2 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40022000 	.word	0x40022000

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f935 	bl	8001212 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f90b 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_IncTick+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <HAL_IncTick+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a03      	ldr	r2, [pc, #12]	@ (8001004 <HAL_IncTick+0x20>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	20000008 	.word	0x20000008
 8001004:	20000244 	.word	0x20000244

08001008 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b02      	ldr	r3, [pc, #8]	@ (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000244 	.word	0x20000244

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff fff0 	bl	8001008 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffe0 	bl	8001008 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	@ (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	@ (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	@ 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff90 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff49 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff5e 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff90 	bl	800111c <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5f 	bl	80010c8 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffb0 	bl	8001180 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b08b      	sub	sp, #44	@ 0x2c
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e169      	b.n	8001514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001240:	2201      	movs	r2, #1
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8158 	bne.w	800150e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4a9a      	ldr	r2, [pc, #616]	@ (80014cc <HAL_GPIO_Init+0x2a0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d05e      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001268:	4a98      	ldr	r2, [pc, #608]	@ (80014cc <HAL_GPIO_Init+0x2a0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d875      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800126e:	4a98      	ldr	r2, [pc, #608]	@ (80014d0 <HAL_GPIO_Init+0x2a4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d058      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001274:	4a96      	ldr	r2, [pc, #600]	@ (80014d0 <HAL_GPIO_Init+0x2a4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d86f      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800127a:	4a96      	ldr	r2, [pc, #600]	@ (80014d4 <HAL_GPIO_Init+0x2a8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d052      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001280:	4a94      	ldr	r2, [pc, #592]	@ (80014d4 <HAL_GPIO_Init+0x2a8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d869      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 8001286:	4a94      	ldr	r2, [pc, #592]	@ (80014d8 <HAL_GPIO_Init+0x2ac>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d04c      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 800128c:	4a92      	ldr	r2, [pc, #584]	@ (80014d8 <HAL_GPIO_Init+0x2ac>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d863      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 8001292:	4a92      	ldr	r2, [pc, #584]	@ (80014dc <HAL_GPIO_Init+0x2b0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d046      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
 8001298:	4a90      	ldr	r2, [pc, #576]	@ (80014dc <HAL_GPIO_Init+0x2b0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d85d      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d82a      	bhi.n	80012f8 <HAL_GPIO_Init+0xcc>
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d859      	bhi.n	800135a <HAL_GPIO_Init+0x12e>
 80012a6:	a201      	add	r2, pc, #4	@ (adr r2, 80012ac <HAL_GPIO_Init+0x80>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001301 	.word	0x08001301
 80012b4:	08001313 	.word	0x08001313
 80012b8:	08001355 	.word	0x08001355
 80012bc:	0800135b 	.word	0x0800135b
 80012c0:	0800135b 	.word	0x0800135b
 80012c4:	0800135b 	.word	0x0800135b
 80012c8:	0800135b 	.word	0x0800135b
 80012cc:	0800135b 	.word	0x0800135b
 80012d0:	0800135b 	.word	0x0800135b
 80012d4:	0800135b 	.word	0x0800135b
 80012d8:	0800135b 	.word	0x0800135b
 80012dc:	0800135b 	.word	0x0800135b
 80012e0:	0800135b 	.word	0x0800135b
 80012e4:	0800135b 	.word	0x0800135b
 80012e8:	0800135b 	.word	0x0800135b
 80012ec:	0800135b 	.word	0x0800135b
 80012f0:	08001309 	.word	0x08001309
 80012f4:	0800131d 	.word	0x0800131d
 80012f8:	4a79      	ldr	r2, [pc, #484]	@ (80014e0 <HAL_GPIO_Init+0x2b4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012fe:	e02c      	b.n	800135a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e029      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	3304      	adds	r3, #4
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e024      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	3308      	adds	r3, #8
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e01f      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	330c      	adds	r3, #12
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e01a      	b.n	800135c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800132e:	2304      	movs	r3, #4
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e013      	b.n	800135c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	611a      	str	r2, [r3, #16]
          break;
 8001346:	e009      	b.n	800135c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	615a      	str	r2, [r3, #20]
          break;
 8001352:	e003      	b.n	800135c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x130>
          break;
 800135a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	@ 0xff
 8001360:	d801      	bhi.n	8001366 <HAL_GPIO_Init+0x13a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	e001      	b.n	800136a <HAL_GPIO_Init+0x13e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3304      	adds	r3, #4
 800136a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2bff      	cmp	r3, #255	@ 0xff
 8001370:	d802      	bhi.n	8001378 <HAL_GPIO_Init+0x14c>
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x152>
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	3b08      	subs	r3, #8
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	210f      	movs	r1, #15
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	6a39      	ldr	r1, [r7, #32]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80b1 	beq.w	800150e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ac:	4b4d      	ldr	r3, [pc, #308]	@ (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a4c      	ldr	r2, [pc, #304]	@ (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <HAL_GPIO_Init+0x2b8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c4:	4a48      	ldr	r2, [pc, #288]	@ (80014e8 <HAL_GPIO_Init+0x2bc>)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a40      	ldr	r2, [pc, #256]	@ (80014ec <HAL_GPIO_Init+0x2c0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d013      	beq.n	8001418 <HAL_GPIO_Init+0x1ec>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3f      	ldr	r2, [pc, #252]	@ (80014f0 <HAL_GPIO_Init+0x2c4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1e8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3e      	ldr	r2, [pc, #248]	@ (80014f4 <HAL_GPIO_Init+0x2c8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1e4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3d      	ldr	r2, [pc, #244]	@ (80014f8 <HAL_GPIO_Init+0x2cc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1e0>
 8001408:	2303      	movs	r3, #3
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 800140c:	2304      	movs	r3, #4
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1ee>
 8001418:	2300      	movs	r3, #0
 800141a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142a:	492f      	ldr	r1, [pc, #188]	@ (80014e8 <HAL_GPIO_Init+0x2bc>)
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	492c      	ldr	r1, [pc, #176]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	4928      	ldr	r1, [pc, #160]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 800145c:	4013      	ands	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	4922      	ldr	r1, [pc, #136]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	60cb      	str	r3, [r1, #12]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	491e      	ldr	r1, [pc, #120]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 8001484:	4013      	ands	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4918      	ldr	r1, [pc, #96]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4914      	ldr	r1, [pc, #80]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d021      	beq.n	8001500 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	490e      	ldr	r1, [pc, #56]	@ (80014fc <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e021      	b.n	800150e <HAL_GPIO_Init+0x2e2>
 80014ca:	bf00      	nop
 80014cc:	10320000 	.word	0x10320000
 80014d0:	10310000 	.word	0x10310000
 80014d4:	10220000 	.word	0x10220000
 80014d8:	10210000 	.word	0x10210000
 80014dc:	10120000 	.word	0x10120000
 80014e0:	10110000 	.word	0x10110000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_GPIO_Init+0x304>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	43db      	mvns	r3, r3
 8001508:	4909      	ldr	r1, [pc, #36]	@ (8001530 <HAL_GPIO_Init+0x304>)
 800150a:	4013      	ands	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f ae8e 	bne.w	8001240 <HAL_GPIO_Init+0x14>
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	372c      	adds	r7, #44	@ 0x2c
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e12b      	b.n	80017ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff f94e 	bl	800082c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2224      	movs	r2, #36	@ 0x24
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c8:	f001 fbca 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a81      	ldr	r2, [pc, #516]	@ (80017d8 <HAL_I2C_Init+0x274>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d807      	bhi.n	80015e8 <HAL_I2C_Init+0x84>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a80      	ldr	r2, [pc, #512]	@ (80017dc <HAL_I2C_Init+0x278>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	bf94      	ite	ls
 80015e0:	2301      	movls	r3, #1
 80015e2:	2300      	movhi	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	e006      	b.n	80015f6 <HAL_I2C_Init+0x92>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4a7d      	ldr	r2, [pc, #500]	@ (80017e0 <HAL_I2C_Init+0x27c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bf94      	ite	ls
 80015f0:	2301      	movls	r3, #1
 80015f2:	2300      	movhi	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0e7      	b.n	80017ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a78      	ldr	r2, [pc, #480]	@ (80017e4 <HAL_I2C_Init+0x280>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0c9b      	lsrs	r3, r3, #18
 8001608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a6a      	ldr	r2, [pc, #424]	@ (80017d8 <HAL_I2C_Init+0x274>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d802      	bhi.n	8001638 <HAL_I2C_Init+0xd4>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3301      	adds	r3, #1
 8001636:	e009      	b.n	800164c <HAL_I2C_Init+0xe8>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	4a69      	ldr	r2, [pc, #420]	@ (80017e8 <HAL_I2C_Init+0x284>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	3301      	adds	r3, #1
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800165e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	495c      	ldr	r1, [pc, #368]	@ (80017d8 <HAL_I2C_Init+0x274>)
 8001668:	428b      	cmp	r3, r1
 800166a:	d819      	bhi.n	80016a0 <HAL_I2C_Init+0x13c>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e59      	subs	r1, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fbb1 f3f3 	udiv	r3, r1, r3
 800167a:	1c59      	adds	r1, r3, #1
 800167c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001680:	400b      	ands	r3, r1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <HAL_I2C_Init+0x138>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1e59      	subs	r1, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fbb1 f3f3 	udiv	r3, r1, r3
 8001694:	3301      	adds	r3, #1
 8001696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169a:	e051      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 800169c:	2304      	movs	r3, #4
 800169e:	e04f      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d111      	bne.n	80016cc <HAL_I2C_Init+0x168>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1e58      	subs	r0, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	440b      	add	r3, r1
 80016b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	e012      	b.n	80016f2 <HAL_I2C_Init+0x18e>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	0099      	lsls	r1, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf0c      	ite	eq
 80016ec:	2301      	moveq	r3, #1
 80016ee:	2300      	movne	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Init+0x196>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e022      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10e      	bne.n	8001720 <HAL_I2C_Init+0x1bc>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e58      	subs	r0, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	440b      	add	r3, r1
 8001710:	fbb0 f3f3 	udiv	r3, r0, r3
 8001714:	3301      	adds	r3, #1
 8001716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800171e:	e00f      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1e58      	subs	r0, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	0099      	lsls	r1, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	6809      	ldr	r1, [r1, #0]
 8001744:	4313      	orrs	r3, r2
 8001746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800176e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6911      	ldr	r1, [r2, #16]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68d2      	ldr	r2, [r2, #12]
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	430b      	orrs	r3, r1
 8001782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	000186a0 	.word	0x000186a0
 80017dc:	001e847f 	.word	0x001e847f
 80017e0:	003d08ff 	.word	0x003d08ff
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	10624dd3 	.word	0x10624dd3

080017ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	817b      	strh	r3, [r7, #10]
 80017fc:	4613      	mov	r3, r2
 80017fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff fc02 	bl	8001008 <HAL_GetTick>
 8001804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	f040 80e0 	bne.w	80019d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2319      	movs	r3, #25
 800181a:	2201      	movs	r2, #1
 800181c:	4970      	ldr	r1, [pc, #448]	@ (80019e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fc9e 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	e0d3      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2C_Master_Transmit+0x50>
 8001838:	2302      	movs	r3, #2
 800183a:	e0cc      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d007      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2221      	movs	r2, #33	@ 0x21
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2210      	movs	r2, #16
 800187e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a50      	ldr	r2, [pc, #320]	@ (80019e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	6a3a      	ldr	r2, [r7, #32]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fb08 	bl	8001ec0 <I2C_MasterRequestWrite>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e08d      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018d0:	e066      	b.n	80019a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fd5c 	bl	8002394 <I2C_WaitOnTXEFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00d      	beq.n	80018fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d107      	bne.n	80018fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06b      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b04      	cmp	r3, #4
 800193a:	d11b      	bne.n	8001974 <HAL_I2C_Master_Transmit+0x188>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d017      	beq.n	8001974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	6a39      	ldr	r1, [r7, #32]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 fd53 	bl	8002424 <I2C_WaitOnBTFFlagUntilTimeout>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00d      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	2b04      	cmp	r3, #4
 800198a:	d107      	bne.n	800199c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e01a      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d194      	bne.n	80018d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	00100002 	.word	0x00100002
 80019e4:	ffff0000 	.word	0xffff0000

080019e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	@ 0x30
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	461a      	mov	r2, r3
 80019f4:	460b      	mov	r3, r1
 80019f6:	817b      	strh	r3, [r7, #10]
 80019f8:	4613      	mov	r3, r2
 80019fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fb02 	bl	8001008 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	f040 824b 	bne.w	8001eaa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2319      	movs	r3, #25
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	497f      	ldr	r1, [pc, #508]	@ (8001c1c <HAL_I2C_Master_Receive+0x234>)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fb9e 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e23e      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2C_Master_Receive+0x54>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e237      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d007      	beq.n	8001a62 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2222      	movs	r2, #34	@ 0x22
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	893a      	ldrh	r2, [r7, #8]
 8001a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a5f      	ldr	r2, [pc, #380]	@ (8001c20 <HAL_I2C_Master_Receive+0x238>)
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aa4:	8979      	ldrh	r1, [r7, #10]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fa8a 	bl	8001fc4 <I2C_MasterRequestRead>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1f8      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d113      	bne.n	8001aea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e1cc      	b.n	8001e84 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d11e      	bne.n	8001b30 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b02:	b672      	cpsid	i
}
 8001b04:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b2c:	b662      	cpsie	i
}
 8001b2e:	e035      	b.n	8001b9c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d11e      	bne.n	8001b76 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b72:	b662      	cpsie	i
}
 8001b74:	e012      	b.n	8001b9c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001b9c:	e172      	b.n	8001e84 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	f200 811f 	bhi.w	8001de6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d123      	bne.n	8001bf8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fc7d 	bl	80024b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e173      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bf6:	e145      	b.n	8001e84 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d152      	bne.n	8001ca6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c06:	2200      	movs	r2, #0
 8001c08:	4906      	ldr	r1, [pc, #24]	@ (8001c24 <HAL_I2C_Master_Receive+0x23c>)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 faa8 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e148      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
 8001c1a:	bf00      	nop
 8001c1c:	00100002 	.word	0x00100002
 8001c20:	ffff0000 	.word	0xffff0000
 8001c24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c28:	b672      	cpsid	i
}
 8001c2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6e:	b662      	cpsie	i
}
 8001c70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ca4:	e0ee      	b.n	8001e84 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cac:	2200      	movs	r2, #0
 8001cae:	4981      	ldr	r1, [pc, #516]	@ (8001eb4 <HAL_I2C_Master_Receive+0x4cc>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fa55 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0f5      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d06:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb8 <HAL_I2C_Master_Receive+0x4d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ebc <HAL_I2C_Master_Receive+0x4d4>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a1a      	lsrs	r2, r3, #8
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00da      	lsls	r2, r3, #3
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f043 0220 	orr.w	r2, r3, #32
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d4e:	b662      	cpsie	i
}
 8001d50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0a6      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d1d9      	bne.n	8001d20 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dae:	b662      	cpsie	i
}
 8001db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001de4:	e04e      	b.n	8001e84 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fb62 	bl	80024b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e058      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d124      	bne.n	8001e84 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e50:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f ae88 	bne.w	8001b9e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3728      	adds	r7, #40	@ 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	00010004 	.word	0x00010004
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	14f8b589 	.word	0x14f8b589

08001ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d006      	beq.n	8001eea <I2C_MasterRequestWrite+0x2a>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d003      	beq.n	8001eea <I2C_MasterRequestWrite+0x2a>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ee8:	d108      	bne.n	8001efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e00b      	b.n	8001f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d107      	bne.n	8001f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f91d 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f3a:	d103      	bne.n	8001f44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e035      	b.n	8001fb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f50:	d108      	bne.n	8001f64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	e01b      	b.n	8001f9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f64:	897b      	ldrh	r3, [r7, #10]
 8001f66:	11db      	asrs	r3, r3, #7
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f003 0306 	and.w	r3, r3, #6
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f063 030f 	orn	r3, r3, #15
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	490e      	ldr	r1, [pc, #56]	@ (8001fbc <I2C_MasterRequestWrite+0xfc>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f966 	bl	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e010      	b.n	8001fb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4907      	ldr	r1, [pc, #28]	@ (8001fc0 <I2C_MasterRequestWrite+0x100>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f956 	bl	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	00010008 	.word	0x00010008
 8001fc0:	00010002 	.word	0x00010002

08001fc4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d006      	beq.n	8001ffe <I2C_MasterRequestRead+0x3a>
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d003      	beq.n	8001ffe <I2C_MasterRequestRead+0x3a>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ffc:	d108      	bne.n	8002010 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e00b      	b.n	8002028 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	2b11      	cmp	r3, #17
 8002016:	d107      	bne.n	8002028 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f893 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204e:	d103      	bne.n	8002058 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e079      	b.n	8002150 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002064:	d108      	bne.n	8002078 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	e05f      	b.n	8002138 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002078:	897b      	ldrh	r3, [r7, #10]
 800207a:	11db      	asrs	r3, r3, #7
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0306 	and.w	r3, r3, #6
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f063 030f 	orn	r3, r3, #15
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4930      	ldr	r1, [pc, #192]	@ (8002158 <I2C_MasterRequestRead+0x194>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f8dc 	bl	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e054      	b.n	8002150 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4929      	ldr	r1, [pc, #164]	@ (800215c <I2C_MasterRequestRead+0x198>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f8cc 	bl	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e044      	b.n	8002150 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f831 	bl	8002160 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002112:	d103      	bne.n	800211c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e017      	b.n	8002150 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002120:	897b      	ldrh	r3, [r7, #10]
 8002122:	11db      	asrs	r3, r3, #7
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0306 	and.w	r3, r3, #6
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f063 030e 	orn	r3, r3, #14
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4907      	ldr	r1, [pc, #28]	@ (800215c <I2C_MasterRequestRead+0x198>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f888 	bl	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	00010008 	.word	0x00010008
 800215c:	00010002 	.word	0x00010002

08002160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002170:	e048      	b.n	8002204 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d044      	beq.n	8002204 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7fe ff45 	bl	8001008 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d139      	bne.n	8002204 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	0c1b      	lsrs	r3, r3, #16
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d10d      	bne.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	e00c      	b.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d116      	bne.n	8002204 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e023      	b.n	800224c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	0c1b      	lsrs	r3, r3, #16
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10d      	bne.n	800222a <I2C_WaitOnFlagUntilTimeout+0xca>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	43da      	mvns	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	e00c      	b.n	8002244 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	429a      	cmp	r2, r3
 8002248:	d093      	beq.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002262:	e071      	b.n	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002272:	d123      	bne.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002282:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800228c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e067      	b.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c2:	d041      	beq.n	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7fe fea0 	bl	8001008 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d302      	bcc.n	80022da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d136      	bne.n	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10c      	bne.n	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4013      	ands	r3, r2
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	e00b      	b.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	43da      	mvns	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e021      	b.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10c      	bne.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e00b      	b.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4013      	ands	r3, r2
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f af6d 	bne.w	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a0:	e034      	b.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f8e3 	bl	800256e <I2C_IsAcknowledgeFailed>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e034      	b.n	800241c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d028      	beq.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ba:	f7fe fe25 	bl	8001008 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11d      	bne.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023da:	2b80      	cmp	r3, #128	@ 0x80
 80023dc:	d016      	beq.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e007      	b.n	800241c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002416:	2b80      	cmp	r3, #128	@ 0x80
 8002418:	d1c3      	bne.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002430:	e034      	b.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f89b 	bl	800256e <I2C_IsAcknowledgeFailed>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e034      	b.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d028      	beq.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7fe fddd 	bl	8001008 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11d      	bne.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d016      	beq.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e007      	b.n	80024ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d1c3      	bne.n	8002432 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c0:	e049      	b.n	8002556 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d119      	bne.n	8002504 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0210 	mvn.w	r2, #16
 80024d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e030      	b.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002504:	f7fe fd80 	bl	8001008 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	429a      	cmp	r2, r3
 8002512:	d302      	bcc.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11d      	bne.n	8002556 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002524:	2b40      	cmp	r3, #64	@ 0x40
 8002526:	d016      	beq.n	8002556 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e007      	b.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002560:	2b40      	cmp	r3, #64	@ 0x40
 8002562:	d1ae      	bne.n	80024c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002584:	d11b      	bne.n	80025be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800258e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e272      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	4b92      	ldr	r3, [pc, #584]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d112      	bne.n	800262a <HAL_RCC_OscConfig+0x5e>
 8002604:	4b8c      	ldr	r3, [pc, #560]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b89      	ldr	r3, [pc, #548]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x12c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d168      	bne.n	80026f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e24c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x76>
 8002634:	4b80      	ldr	r3, [pc, #512]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a7f      	ldr	r2, [pc, #508]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b7b      	ldr	r3, [pc, #492]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7a      	ldr	r2, [pc, #488]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b78      	ldr	r3, [pc, #480]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0xbc>
 800266e:	4b72      	ldr	r3, [pc, #456]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a71      	ldr	r2, [pc, #452]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6f      	ldr	r3, [pc, #444]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6e      	ldr	r2, [pc, #440]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002688:	4b6b      	ldr	r3, [pc, #428]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a67      	ldr	r2, [pc, #412]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fcae 	bl	8001008 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fcaa 	bl	8001008 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e200      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe4>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fc9a 	bl	8001008 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fc96 	bl	8001008 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1ec      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x10c>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b4c      	ldr	r3, [pc, #304]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002712:	4b49      	ldr	r3, [pc, #292]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x18c>
 800271e:	4b46      	ldr	r3, [pc, #280]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c0      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4939      	ldr	r1, [pc, #228]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b36      	ldr	r3, [pc, #216]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe fc4f 	bl	8001008 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fc4b 	bl	8001008 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4927      	ldr	r1, [pc, #156]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fc2e 	bl	8001008 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b0:	f7fe fc2a 	bl	8001008 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e180      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03a      	beq.n	8002850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d019      	beq.n	8002816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe fc0e 	bl	8001008 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f0:	f7fe fc0a 	bl	8001008 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e160      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 face 	bl	8002db0 <RCC_Delay>
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7fe fbf4 	bl	8001008 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002822:	e00f      	b.n	8002844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe fbf0 	bl	8001008 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d908      	bls.n	8002844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e146      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	42420000 	.word	0x42420000
 8002840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b92      	ldr	r3, [pc, #584]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e9      	bne.n	8002824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a6 	beq.w	80029aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b8b      	ldr	r3, [pc, #556]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b88      	ldr	r3, [pc, #544]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a87      	ldr	r2, [pc, #540]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b85      	ldr	r3, [pc, #532]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	4b82      	ldr	r3, [pc, #520]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d118      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002896:	4b7f      	ldr	r3, [pc, #508]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fbb1 	bl	8001008 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028aa:	f7fe fbad 	bl	8001008 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	@ 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e103      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b75      	ldr	r3, [pc, #468]	@ (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x312>
 80028d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	e02d      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x334>
 80028e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a69      	ldr	r2, [pc, #420]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4b67      	ldr	r3, [pc, #412]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a66      	ldr	r2, [pc, #408]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	e01c      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x356>
 8002908:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a60      	ldr	r2, [pc, #384]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	4b5e      	ldr	r3, [pc, #376]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a5d      	ldr	r2, [pc, #372]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6213      	str	r3, [r2, #32]
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 8002922:	4b5b      	ldr	r3, [pc, #364]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a5a      	ldr	r2, [pc, #360]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d015      	beq.n	800296e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fb61 	bl	8001008 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fb5d 	bl	8001008 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0b1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	4b4b      	ldr	r3, [pc, #300]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ee      	beq.n	800294a <HAL_RCC_OscConfig+0x37e>
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7fe fb4b 	bl	8001008 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe fb47 	bl	8001008 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e09b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ee      	bne.n	8002976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d061      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d146      	bne.n	8002a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fb1b 	bl	8001008 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fb17 	bl	8001008 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e06d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4921      	ldr	r1, [pc, #132]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a10:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a19      	ldr	r1, [r3, #32]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	430b      	orrs	r3, r1
 8002a22:	491b      	ldr	r1, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe faeb 	bl	8001008 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe fae7 	bl	8001008 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x46a>
 8002a54:	e035      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fad4 	bl	8001008 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fad0 	bl	8001008 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e026      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x498>
 8002a82:	e01e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e019      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_RCC_OscConfig+0x500>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d0      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b67      	ldr	r3, [pc, #412]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4965      	ldr	r1, [pc, #404]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d040      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d115      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b41      	ldr	r3, [pc, #260]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e073      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b39      	ldr	r3, [pc, #228]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4936      	ldr	r1, [pc, #216]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fa22 	bl	8001008 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fe fa1e 	bl	8001008 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e053      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2d      	ldr	r3, [pc, #180]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d210      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4922      	ldr	r1, [pc, #136]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f980 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08003dac 	.word	0x08003dac
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x36>
 8002cd2:	e027      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	e027      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0c9b      	lsrs	r3, r3, #18
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4a17      	ldr	r2, [pc, #92]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0c5b      	lsrs	r3, r3, #17
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	4a11      	ldr	r2, [pc, #68]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d06:	fb03 f202 	mul.w	r2, r3, r2
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e004      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	613b      	str	r3, [r7, #16]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2a:	693b      	ldr	r3, [r7, #16]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	007a1200 	.word	0x007a1200
 8002d40:	08003dc4 	.word	0x08003dc4
 8002d44:	08003dd4 	.word	0x08003dd4
 8002d48:	003d0900 	.word	0x003d0900

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b02      	ldr	r3, [pc, #8]	@ (8002d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff2 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08003dbc 	.word	0x08003dbc

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffde 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08003dbc 	.word	0x08003dbc

08002db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <RCC_Delay+0x34>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002de8 <RCC_Delay+0x38>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dcc:	bf00      	nop
  }
  while (Delay --);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e5a      	subs	r2, r3, #1
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <RCC_Delay+0x1c>
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000000 	.word	0x20000000
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e042      	b.n	8002e84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd ff16 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f971 	bl	8003118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d175      	bne.n	8002f98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit+0x2c>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e06e      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	@ 0x21
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fe f89d 	bl	8001008 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f00:	e02e      	b.n	8002f60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f848 	bl	8002fa2 <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e03a      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e007      	b.n	8002f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cb      	bne.n	8002f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	@ 0x40
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f814 	bl	8002fa2 <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e006      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb2:	e03b      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d037      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe f824 	bl	8001008 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03a      	b.n	800304c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d023      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d020      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d01d      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d116      	bne.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f81d 	bl	8003054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2208      	movs	r2, #8
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e00f      	b.n	800304c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	429a      	cmp	r2, r3
 8003048:	d0b4      	beq.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b095      	sub	sp, #84	@ 0x54
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800307c:	643a      	str	r2, [r7, #64]	@ 0x40
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800308a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e5      	bne.n	800305c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	61fb      	str	r3, [r7, #28]
   return(result);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d119      	bne.n	8003100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	60bb      	str	r3, [r7, #8]
   return(result);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f023 0310 	bic.w	r3, r3, #16
 80030e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ec:	61ba      	str	r2, [r7, #24]
 80030ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6979      	ldr	r1, [r7, #20]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	613b      	str	r3, [r7, #16]
   return(result);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e5      	bne.n	80030cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800310e:	bf00      	nop
 8003110:	3754      	adds	r7, #84	@ 0x54
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003152:	f023 030c 	bic.w	r3, r3, #12
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	430b      	orrs	r3, r1
 800315e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2c      	ldr	r2, [pc, #176]	@ (800322c <UART_SetConfig+0x114>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d103      	bne.n	8003188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7ff fe02 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	e002      	b.n	800318e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff fdea 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 800318c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	4a22      	ldr	r2, [pc, #136]	@ (8003230 <UART_SetConfig+0x118>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	0119      	lsls	r1, r3, #4
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <UART_SetConfig+0x118>)
 80031c6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2064      	movs	r0, #100	@ 0x64
 80031ce:	fb00 f303 	mul.w	r3, r0, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	3332      	adds	r3, #50	@ 0x32
 80031d8:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <UART_SetConfig+0x118>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e4:	4419      	add	r1, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <UART_SetConfig+0x118>)
 80031fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2064      	movs	r0, #100	@ 0x64
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	3332      	adds	r3, #50	@ 0x32
 8003210:	4a07      	ldr	r2, [pc, #28]	@ (8003230 <UART_SetConfig+0x118>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	440a      	add	r2, r1
 8003222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40013800 	.word	0x40013800
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <siprintf>:
 8003234:	b40e      	push	{r1, r2, r3}
 8003236:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800323a:	b500      	push	{lr}
 800323c:	b09c      	sub	sp, #112	@ 0x70
 800323e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003240:	9002      	str	r0, [sp, #8]
 8003242:	9006      	str	r0, [sp, #24]
 8003244:	9107      	str	r1, [sp, #28]
 8003246:	9104      	str	r1, [sp, #16]
 8003248:	4808      	ldr	r0, [pc, #32]	@ (800326c <siprintf+0x38>)
 800324a:	4909      	ldr	r1, [pc, #36]	@ (8003270 <siprintf+0x3c>)
 800324c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003250:	9105      	str	r1, [sp, #20]
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	a902      	add	r1, sp, #8
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	f000 f9a0 	bl	800359c <_svfiprintf_r>
 800325c:	2200      	movs	r2, #0
 800325e:	9b02      	ldr	r3, [sp, #8]
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	b01c      	add	sp, #112	@ 0x70
 8003264:	f85d eb04 	ldr.w	lr, [sp], #4
 8003268:	b003      	add	sp, #12
 800326a:	4770      	bx	lr
 800326c:	2000000c 	.word	0x2000000c
 8003270:	ffff0208 	.word	0xffff0208

08003274 <memset>:
 8003274:	4603      	mov	r3, r0
 8003276:	4402      	add	r2, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	@ (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	2600      	movs	r6, #0
 8003294:	4d0c      	ldr	r5, [pc, #48]	@ (80032c8 <__libc_init_array+0x38>)
 8003296:	4c0d      	ldr	r4, [pc, #52]	@ (80032cc <__libc_init_array+0x3c>)
 8003298:	1b64      	subs	r4, r4, r5
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	f000 fc78 	bl	8003b94 <_init>
 80032a4:	2600      	movs	r6, #0
 80032a6:	4d0a      	ldr	r5, [pc, #40]	@ (80032d0 <__libc_init_array+0x40>)
 80032a8:	4c0a      	ldr	r4, [pc, #40]	@ (80032d4 <__libc_init_array+0x44>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003e0c 	.word	0x08003e0c
 80032cc:	08003e0c 	.word	0x08003e0c
 80032d0:	08003e0c 	.word	0x08003e0c
 80032d4:	08003e10 	.word	0x08003e10

080032d8 <__retarget_lock_acquire_recursive>:
 80032d8:	4770      	bx	lr

080032da <__retarget_lock_release_recursive>:
 80032da:	4770      	bx	lr

080032dc <memcpy>:
 80032dc:	440a      	add	r2, r1
 80032de:	4291      	cmp	r1, r2
 80032e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80032e4:	d100      	bne.n	80032e8 <memcpy+0xc>
 80032e6:	4770      	bx	lr
 80032e8:	b510      	push	{r4, lr}
 80032ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ee:	4291      	cmp	r1, r2
 80032f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032f4:	d1f9      	bne.n	80032ea <memcpy+0xe>
 80032f6:	bd10      	pop	{r4, pc}

080032f8 <_free_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4605      	mov	r5, r0
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d040      	beq.n	8003382 <_free_r+0x8a>
 8003300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003304:	1f0c      	subs	r4, r1, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	bfb8      	it	lt
 800330a:	18e4      	addlt	r4, r4, r3
 800330c:	f000 f8de 	bl	80034cc <__malloc_lock>
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <_free_r+0x8c>)
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	b933      	cbnz	r3, 8003324 <_free_r+0x2c>
 8003316:	6063      	str	r3, [r4, #4]
 8003318:	6014      	str	r4, [r2, #0]
 800331a:	4628      	mov	r0, r5
 800331c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003320:	f000 b8da 	b.w	80034d8 <__malloc_unlock>
 8003324:	42a3      	cmp	r3, r4
 8003326:	d908      	bls.n	800333a <_free_r+0x42>
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	1821      	adds	r1, r4, r0
 800332c:	428b      	cmp	r3, r1
 800332e:	bf01      	itttt	eq
 8003330:	6819      	ldreq	r1, [r3, #0]
 8003332:	685b      	ldreq	r3, [r3, #4]
 8003334:	1809      	addeq	r1, r1, r0
 8003336:	6021      	streq	r1, [r4, #0]
 8003338:	e7ed      	b.n	8003316 <_free_r+0x1e>
 800333a:	461a      	mov	r2, r3
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b10b      	cbz	r3, 8003344 <_free_r+0x4c>
 8003340:	42a3      	cmp	r3, r4
 8003342:	d9fa      	bls.n	800333a <_free_r+0x42>
 8003344:	6811      	ldr	r1, [r2, #0]
 8003346:	1850      	adds	r0, r2, r1
 8003348:	42a0      	cmp	r0, r4
 800334a:	d10b      	bne.n	8003364 <_free_r+0x6c>
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	4401      	add	r1, r0
 8003350:	1850      	adds	r0, r2, r1
 8003352:	4283      	cmp	r3, r0
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	d1e0      	bne.n	800331a <_free_r+0x22>
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4408      	add	r0, r1
 800335e:	6010      	str	r0, [r2, #0]
 8003360:	6053      	str	r3, [r2, #4]
 8003362:	e7da      	b.n	800331a <_free_r+0x22>
 8003364:	d902      	bls.n	800336c <_free_r+0x74>
 8003366:	230c      	movs	r3, #12
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	e7d6      	b.n	800331a <_free_r+0x22>
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	1821      	adds	r1, r4, r0
 8003370:	428b      	cmp	r3, r1
 8003372:	bf01      	itttt	eq
 8003374:	6819      	ldreq	r1, [r3, #0]
 8003376:	685b      	ldreq	r3, [r3, #4]
 8003378:	1809      	addeq	r1, r1, r0
 800337a:	6021      	streq	r1, [r4, #0]
 800337c:	6063      	str	r3, [r4, #4]
 800337e:	6054      	str	r4, [r2, #4]
 8003380:	e7cb      	b.n	800331a <_free_r+0x22>
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	2000038c 	.word	0x2000038c

08003388 <sbrk_aligned>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4e0f      	ldr	r6, [pc, #60]	@ (80033c8 <sbrk_aligned+0x40>)
 800338c:	460c      	mov	r4, r1
 800338e:	6831      	ldr	r1, [r6, #0]
 8003390:	4605      	mov	r5, r0
 8003392:	b911      	cbnz	r1, 800339a <sbrk_aligned+0x12>
 8003394:	f000 fbaa 	bl	8003aec <_sbrk_r>
 8003398:	6030      	str	r0, [r6, #0]
 800339a:	4621      	mov	r1, r4
 800339c:	4628      	mov	r0, r5
 800339e:	f000 fba5 	bl	8003aec <_sbrk_r>
 80033a2:	1c43      	adds	r3, r0, #1
 80033a4:	d103      	bne.n	80033ae <sbrk_aligned+0x26>
 80033a6:	f04f 34ff 	mov.w	r4, #4294967295
 80033aa:	4620      	mov	r0, r4
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	1cc4      	adds	r4, r0, #3
 80033b0:	f024 0403 	bic.w	r4, r4, #3
 80033b4:	42a0      	cmp	r0, r4
 80033b6:	d0f8      	beq.n	80033aa <sbrk_aligned+0x22>
 80033b8:	1a21      	subs	r1, r4, r0
 80033ba:	4628      	mov	r0, r5
 80033bc:	f000 fb96 	bl	8003aec <_sbrk_r>
 80033c0:	3001      	adds	r0, #1
 80033c2:	d1f2      	bne.n	80033aa <sbrk_aligned+0x22>
 80033c4:	e7ef      	b.n	80033a6 <sbrk_aligned+0x1e>
 80033c6:	bf00      	nop
 80033c8:	20000388 	.word	0x20000388

080033cc <_malloc_r>:
 80033cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033d0:	1ccd      	adds	r5, r1, #3
 80033d2:	f025 0503 	bic.w	r5, r5, #3
 80033d6:	3508      	adds	r5, #8
 80033d8:	2d0c      	cmp	r5, #12
 80033da:	bf38      	it	cc
 80033dc:	250c      	movcc	r5, #12
 80033de:	2d00      	cmp	r5, #0
 80033e0:	4606      	mov	r6, r0
 80033e2:	db01      	blt.n	80033e8 <_malloc_r+0x1c>
 80033e4:	42a9      	cmp	r1, r5
 80033e6:	d904      	bls.n	80033f2 <_malloc_r+0x26>
 80033e8:	230c      	movs	r3, #12
 80033ea:	6033      	str	r3, [r6, #0]
 80033ec:	2000      	movs	r0, #0
 80033ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034c8 <_malloc_r+0xfc>
 80033f6:	f000 f869 	bl	80034cc <__malloc_lock>
 80033fa:	f8d8 3000 	ldr.w	r3, [r8]
 80033fe:	461c      	mov	r4, r3
 8003400:	bb44      	cbnz	r4, 8003454 <_malloc_r+0x88>
 8003402:	4629      	mov	r1, r5
 8003404:	4630      	mov	r0, r6
 8003406:	f7ff ffbf 	bl	8003388 <sbrk_aligned>
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	4604      	mov	r4, r0
 800340e:	d158      	bne.n	80034c2 <_malloc_r+0xf6>
 8003410:	f8d8 4000 	ldr.w	r4, [r8]
 8003414:	4627      	mov	r7, r4
 8003416:	2f00      	cmp	r7, #0
 8003418:	d143      	bne.n	80034a2 <_malloc_r+0xd6>
 800341a:	2c00      	cmp	r4, #0
 800341c:	d04b      	beq.n	80034b6 <_malloc_r+0xea>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	4639      	mov	r1, r7
 8003422:	4630      	mov	r0, r6
 8003424:	eb04 0903 	add.w	r9, r4, r3
 8003428:	f000 fb60 	bl	8003aec <_sbrk_r>
 800342c:	4581      	cmp	r9, r0
 800342e:	d142      	bne.n	80034b6 <_malloc_r+0xea>
 8003430:	6821      	ldr	r1, [r4, #0]
 8003432:	4630      	mov	r0, r6
 8003434:	1a6d      	subs	r5, r5, r1
 8003436:	4629      	mov	r1, r5
 8003438:	f7ff ffa6 	bl	8003388 <sbrk_aligned>
 800343c:	3001      	adds	r0, #1
 800343e:	d03a      	beq.n	80034b6 <_malloc_r+0xea>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	442b      	add	r3, r5
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	f8d8 3000 	ldr.w	r3, [r8]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	bb62      	cbnz	r2, 80034a8 <_malloc_r+0xdc>
 800344e:	f8c8 7000 	str.w	r7, [r8]
 8003452:	e00f      	b.n	8003474 <_malloc_r+0xa8>
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	1b52      	subs	r2, r2, r5
 8003458:	d420      	bmi.n	800349c <_malloc_r+0xd0>
 800345a:	2a0b      	cmp	r2, #11
 800345c:	d917      	bls.n	800348e <_malloc_r+0xc2>
 800345e:	1961      	adds	r1, r4, r5
 8003460:	42a3      	cmp	r3, r4
 8003462:	6025      	str	r5, [r4, #0]
 8003464:	bf18      	it	ne
 8003466:	6059      	strne	r1, [r3, #4]
 8003468:	6863      	ldr	r3, [r4, #4]
 800346a:	bf08      	it	eq
 800346c:	f8c8 1000 	streq.w	r1, [r8]
 8003470:	5162      	str	r2, [r4, r5]
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	4630      	mov	r0, r6
 8003476:	f000 f82f 	bl	80034d8 <__malloc_unlock>
 800347a:	f104 000b 	add.w	r0, r4, #11
 800347e:	1d23      	adds	r3, r4, #4
 8003480:	f020 0007 	bic.w	r0, r0, #7
 8003484:	1ac2      	subs	r2, r0, r3
 8003486:	bf1c      	itt	ne
 8003488:	1a1b      	subne	r3, r3, r0
 800348a:	50a3      	strne	r3, [r4, r2]
 800348c:	e7af      	b.n	80033ee <_malloc_r+0x22>
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	42a3      	cmp	r3, r4
 8003492:	bf0c      	ite	eq
 8003494:	f8c8 2000 	streq.w	r2, [r8]
 8003498:	605a      	strne	r2, [r3, #4]
 800349a:	e7eb      	b.n	8003474 <_malloc_r+0xa8>
 800349c:	4623      	mov	r3, r4
 800349e:	6864      	ldr	r4, [r4, #4]
 80034a0:	e7ae      	b.n	8003400 <_malloc_r+0x34>
 80034a2:	463c      	mov	r4, r7
 80034a4:	687f      	ldr	r7, [r7, #4]
 80034a6:	e7b6      	b.n	8003416 <_malloc_r+0x4a>
 80034a8:	461a      	mov	r2, r3
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	42a3      	cmp	r3, r4
 80034ae:	d1fb      	bne.n	80034a8 <_malloc_r+0xdc>
 80034b0:	2300      	movs	r3, #0
 80034b2:	6053      	str	r3, [r2, #4]
 80034b4:	e7de      	b.n	8003474 <_malloc_r+0xa8>
 80034b6:	230c      	movs	r3, #12
 80034b8:	4630      	mov	r0, r6
 80034ba:	6033      	str	r3, [r6, #0]
 80034bc:	f000 f80c 	bl	80034d8 <__malloc_unlock>
 80034c0:	e794      	b.n	80033ec <_malloc_r+0x20>
 80034c2:	6005      	str	r5, [r0, #0]
 80034c4:	e7d6      	b.n	8003474 <_malloc_r+0xa8>
 80034c6:	bf00      	nop
 80034c8:	2000038c 	.word	0x2000038c

080034cc <__malloc_lock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	@ (80034d4 <__malloc_lock+0x8>)
 80034ce:	f7ff bf03 	b.w	80032d8 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000384 	.word	0x20000384

080034d8 <__malloc_unlock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	@ (80034e0 <__malloc_unlock+0x8>)
 80034da:	f7ff befe 	b.w	80032da <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000384 	.word	0x20000384

080034e4 <__ssputs_r>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	461f      	mov	r7, r3
 80034ea:	688e      	ldr	r6, [r1, #8]
 80034ec:	4682      	mov	sl, r0
 80034ee:	42be      	cmp	r6, r7
 80034f0:	460c      	mov	r4, r1
 80034f2:	4690      	mov	r8, r2
 80034f4:	680b      	ldr	r3, [r1, #0]
 80034f6:	d82d      	bhi.n	8003554 <__ssputs_r+0x70>
 80034f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003500:	d026      	beq.n	8003550 <__ssputs_r+0x6c>
 8003502:	6965      	ldr	r5, [r4, #20]
 8003504:	6909      	ldr	r1, [r1, #16]
 8003506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800350a:	eba3 0901 	sub.w	r9, r3, r1
 800350e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003512:	1c7b      	adds	r3, r7, #1
 8003514:	444b      	add	r3, r9
 8003516:	106d      	asrs	r5, r5, #1
 8003518:	429d      	cmp	r5, r3
 800351a:	bf38      	it	cc
 800351c:	461d      	movcc	r5, r3
 800351e:	0553      	lsls	r3, r2, #21
 8003520:	d527      	bpl.n	8003572 <__ssputs_r+0x8e>
 8003522:	4629      	mov	r1, r5
 8003524:	f7ff ff52 	bl	80033cc <_malloc_r>
 8003528:	4606      	mov	r6, r0
 800352a:	b360      	cbz	r0, 8003586 <__ssputs_r+0xa2>
 800352c:	464a      	mov	r2, r9
 800352e:	6921      	ldr	r1, [r4, #16]
 8003530:	f7ff fed4 	bl	80032dc <memcpy>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800353a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800353e:	81a3      	strh	r3, [r4, #12]
 8003540:	6126      	str	r6, [r4, #16]
 8003542:	444e      	add	r6, r9
 8003544:	6026      	str	r6, [r4, #0]
 8003546:	463e      	mov	r6, r7
 8003548:	6165      	str	r5, [r4, #20]
 800354a:	eba5 0509 	sub.w	r5, r5, r9
 800354e:	60a5      	str	r5, [r4, #8]
 8003550:	42be      	cmp	r6, r7
 8003552:	d900      	bls.n	8003556 <__ssputs_r+0x72>
 8003554:	463e      	mov	r6, r7
 8003556:	4632      	mov	r2, r6
 8003558:	4641      	mov	r1, r8
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f000 faac 	bl	8003ab8 <memmove>
 8003560:	2000      	movs	r0, #0
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	1b9b      	subs	r3, r3, r6
 8003566:	60a3      	str	r3, [r4, #8]
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	4433      	add	r3, r6
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003572:	462a      	mov	r2, r5
 8003574:	f000 fad8 	bl	8003b28 <_realloc_r>
 8003578:	4606      	mov	r6, r0
 800357a:	2800      	cmp	r0, #0
 800357c:	d1e0      	bne.n	8003540 <__ssputs_r+0x5c>
 800357e:	4650      	mov	r0, sl
 8003580:	6921      	ldr	r1, [r4, #16]
 8003582:	f7ff feb9 	bl	80032f8 <_free_r>
 8003586:	230c      	movs	r3, #12
 8003588:	f8ca 3000 	str.w	r3, [sl]
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	f04f 30ff 	mov.w	r0, #4294967295
 8003592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	e7e9      	b.n	800356e <__ssputs_r+0x8a>
	...

0800359c <_svfiprintf_r>:
 800359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a0:	4698      	mov	r8, r3
 80035a2:	898b      	ldrh	r3, [r1, #12]
 80035a4:	4607      	mov	r7, r0
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	460d      	mov	r5, r1
 80035aa:	4614      	mov	r4, r2
 80035ac:	b09d      	sub	sp, #116	@ 0x74
 80035ae:	d510      	bpl.n	80035d2 <_svfiprintf_r+0x36>
 80035b0:	690b      	ldr	r3, [r1, #16]
 80035b2:	b973      	cbnz	r3, 80035d2 <_svfiprintf_r+0x36>
 80035b4:	2140      	movs	r1, #64	@ 0x40
 80035b6:	f7ff ff09 	bl	80033cc <_malloc_r>
 80035ba:	6028      	str	r0, [r5, #0]
 80035bc:	6128      	str	r0, [r5, #16]
 80035be:	b930      	cbnz	r0, 80035ce <_svfiprintf_r+0x32>
 80035c0:	230c      	movs	r3, #12
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	b01d      	add	sp, #116	@ 0x74
 80035ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ce:	2340      	movs	r3, #64	@ 0x40
 80035d0:	616b      	str	r3, [r5, #20]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80035d6:	2320      	movs	r3, #32
 80035d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035dc:	2330      	movs	r3, #48	@ 0x30
 80035de:	f04f 0901 	mov.w	r9, #1
 80035e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80035e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003780 <_svfiprintf_r+0x1e4>
 80035ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035ee:	4623      	mov	r3, r4
 80035f0:	469a      	mov	sl, r3
 80035f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f6:	b10a      	cbz	r2, 80035fc <_svfiprintf_r+0x60>
 80035f8:	2a25      	cmp	r2, #37	@ 0x25
 80035fa:	d1f9      	bne.n	80035f0 <_svfiprintf_r+0x54>
 80035fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003600:	d00b      	beq.n	800361a <_svfiprintf_r+0x7e>
 8003602:	465b      	mov	r3, fp
 8003604:	4622      	mov	r2, r4
 8003606:	4629      	mov	r1, r5
 8003608:	4638      	mov	r0, r7
 800360a:	f7ff ff6b 	bl	80034e4 <__ssputs_r>
 800360e:	3001      	adds	r0, #1
 8003610:	f000 80a7 	beq.w	8003762 <_svfiprintf_r+0x1c6>
 8003614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003616:	445a      	add	r2, fp
 8003618:	9209      	str	r2, [sp, #36]	@ 0x24
 800361a:	f89a 3000 	ldrb.w	r3, [sl]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 809f 	beq.w	8003762 <_svfiprintf_r+0x1c6>
 8003624:	2300      	movs	r3, #0
 8003626:	f04f 32ff 	mov.w	r2, #4294967295
 800362a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800362e:	f10a 0a01 	add.w	sl, sl, #1
 8003632:	9304      	str	r3, [sp, #16]
 8003634:	9307      	str	r3, [sp, #28]
 8003636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800363a:	931a      	str	r3, [sp, #104]	@ 0x68
 800363c:	4654      	mov	r4, sl
 800363e:	2205      	movs	r2, #5
 8003640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003644:	484e      	ldr	r0, [pc, #312]	@ (8003780 <_svfiprintf_r+0x1e4>)
 8003646:	f000 fa61 	bl	8003b0c <memchr>
 800364a:	9a04      	ldr	r2, [sp, #16]
 800364c:	b9d8      	cbnz	r0, 8003686 <_svfiprintf_r+0xea>
 800364e:	06d0      	lsls	r0, r2, #27
 8003650:	bf44      	itt	mi
 8003652:	2320      	movmi	r3, #32
 8003654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003658:	0711      	lsls	r1, r2, #28
 800365a:	bf44      	itt	mi
 800365c:	232b      	movmi	r3, #43	@ 0x2b
 800365e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003662:	f89a 3000 	ldrb.w	r3, [sl]
 8003666:	2b2a      	cmp	r3, #42	@ 0x2a
 8003668:	d015      	beq.n	8003696 <_svfiprintf_r+0xfa>
 800366a:	4654      	mov	r4, sl
 800366c:	2000      	movs	r0, #0
 800366e:	f04f 0c0a 	mov.w	ip, #10
 8003672:	9a07      	ldr	r2, [sp, #28]
 8003674:	4621      	mov	r1, r4
 8003676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800367a:	3b30      	subs	r3, #48	@ 0x30
 800367c:	2b09      	cmp	r3, #9
 800367e:	d94b      	bls.n	8003718 <_svfiprintf_r+0x17c>
 8003680:	b1b0      	cbz	r0, 80036b0 <_svfiprintf_r+0x114>
 8003682:	9207      	str	r2, [sp, #28]
 8003684:	e014      	b.n	80036b0 <_svfiprintf_r+0x114>
 8003686:	eba0 0308 	sub.w	r3, r0, r8
 800368a:	fa09 f303 	lsl.w	r3, r9, r3
 800368e:	4313      	orrs	r3, r2
 8003690:	46a2      	mov	sl, r4
 8003692:	9304      	str	r3, [sp, #16]
 8003694:	e7d2      	b.n	800363c <_svfiprintf_r+0xa0>
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	1d19      	adds	r1, r3, #4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	9103      	str	r1, [sp, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bfbb      	ittet	lt
 80036a2:	425b      	neglt	r3, r3
 80036a4:	f042 0202 	orrlt.w	r2, r2, #2
 80036a8:	9307      	strge	r3, [sp, #28]
 80036aa:	9307      	strlt	r3, [sp, #28]
 80036ac:	bfb8      	it	lt
 80036ae:	9204      	strlt	r2, [sp, #16]
 80036b0:	7823      	ldrb	r3, [r4, #0]
 80036b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80036b4:	d10a      	bne.n	80036cc <_svfiprintf_r+0x130>
 80036b6:	7863      	ldrb	r3, [r4, #1]
 80036b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ba:	d132      	bne.n	8003722 <_svfiprintf_r+0x186>
 80036bc:	9b03      	ldr	r3, [sp, #12]
 80036be:	3402      	adds	r4, #2
 80036c0:	1d1a      	adds	r2, r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	9203      	str	r2, [sp, #12]
 80036c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036ca:	9305      	str	r3, [sp, #20]
 80036cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003784 <_svfiprintf_r+0x1e8>
 80036d0:	2203      	movs	r2, #3
 80036d2:	4650      	mov	r0, sl
 80036d4:	7821      	ldrb	r1, [r4, #0]
 80036d6:	f000 fa19 	bl	8003b0c <memchr>
 80036da:	b138      	cbz	r0, 80036ec <_svfiprintf_r+0x150>
 80036dc:	2240      	movs	r2, #64	@ 0x40
 80036de:	9b04      	ldr	r3, [sp, #16]
 80036e0:	eba0 000a 	sub.w	r0, r0, sl
 80036e4:	4082      	lsls	r2, r0
 80036e6:	4313      	orrs	r3, r2
 80036e8:	3401      	adds	r4, #1
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f0:	2206      	movs	r2, #6
 80036f2:	4825      	ldr	r0, [pc, #148]	@ (8003788 <_svfiprintf_r+0x1ec>)
 80036f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036f8:	f000 fa08 	bl	8003b0c <memchr>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d036      	beq.n	800376e <_svfiprintf_r+0x1d2>
 8003700:	4b22      	ldr	r3, [pc, #136]	@ (800378c <_svfiprintf_r+0x1f0>)
 8003702:	bb1b      	cbnz	r3, 800374c <_svfiprintf_r+0x1b0>
 8003704:	9b03      	ldr	r3, [sp, #12]
 8003706:	3307      	adds	r3, #7
 8003708:	f023 0307 	bic.w	r3, r3, #7
 800370c:	3308      	adds	r3, #8
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003712:	4433      	add	r3, r6
 8003714:	9309      	str	r3, [sp, #36]	@ 0x24
 8003716:	e76a      	b.n	80035ee <_svfiprintf_r+0x52>
 8003718:	460c      	mov	r4, r1
 800371a:	2001      	movs	r0, #1
 800371c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003720:	e7a8      	b.n	8003674 <_svfiprintf_r+0xd8>
 8003722:	2300      	movs	r3, #0
 8003724:	f04f 0c0a 	mov.w	ip, #10
 8003728:	4619      	mov	r1, r3
 800372a:	3401      	adds	r4, #1
 800372c:	9305      	str	r3, [sp, #20]
 800372e:	4620      	mov	r0, r4
 8003730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003734:	3a30      	subs	r2, #48	@ 0x30
 8003736:	2a09      	cmp	r2, #9
 8003738:	d903      	bls.n	8003742 <_svfiprintf_r+0x1a6>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0c6      	beq.n	80036cc <_svfiprintf_r+0x130>
 800373e:	9105      	str	r1, [sp, #20]
 8003740:	e7c4      	b.n	80036cc <_svfiprintf_r+0x130>
 8003742:	4604      	mov	r4, r0
 8003744:	2301      	movs	r3, #1
 8003746:	fb0c 2101 	mla	r1, ip, r1, r2
 800374a:	e7f0      	b.n	800372e <_svfiprintf_r+0x192>
 800374c:	ab03      	add	r3, sp, #12
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	462a      	mov	r2, r5
 8003752:	4638      	mov	r0, r7
 8003754:	4b0e      	ldr	r3, [pc, #56]	@ (8003790 <_svfiprintf_r+0x1f4>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	f3af 8000 	nop.w
 800375c:	1c42      	adds	r2, r0, #1
 800375e:	4606      	mov	r6, r0
 8003760:	d1d6      	bne.n	8003710 <_svfiprintf_r+0x174>
 8003762:	89ab      	ldrh	r3, [r5, #12]
 8003764:	065b      	lsls	r3, r3, #25
 8003766:	f53f af2d 	bmi.w	80035c4 <_svfiprintf_r+0x28>
 800376a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800376c:	e72c      	b.n	80035c8 <_svfiprintf_r+0x2c>
 800376e:	ab03      	add	r3, sp, #12
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	462a      	mov	r2, r5
 8003774:	4638      	mov	r0, r7
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <_svfiprintf_r+0x1f4>)
 8003778:	a904      	add	r1, sp, #16
 800377a:	f000 f87d 	bl	8003878 <_printf_i>
 800377e:	e7ed      	b.n	800375c <_svfiprintf_r+0x1c0>
 8003780:	08003dd6 	.word	0x08003dd6
 8003784:	08003ddc 	.word	0x08003ddc
 8003788:	08003de0 	.word	0x08003de0
 800378c:	00000000 	.word	0x00000000
 8003790:	080034e5 	.word	0x080034e5

08003794 <_printf_common>:
 8003794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003798:	4616      	mov	r6, r2
 800379a:	4698      	mov	r8, r3
 800379c:	688a      	ldr	r2, [r1, #8]
 800379e:	690b      	ldr	r3, [r1, #16]
 80037a0:	4607      	mov	r7, r0
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bfb8      	it	lt
 80037a6:	4613      	movlt	r3, r2
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037ae:	460c      	mov	r4, r1
 80037b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037b4:	b10a      	cbz	r2, 80037ba <_printf_common+0x26>
 80037b6:	3301      	adds	r3, #1
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	0699      	lsls	r1, r3, #26
 80037be:	bf42      	ittt	mi
 80037c0:	6833      	ldrmi	r3, [r6, #0]
 80037c2:	3302      	addmi	r3, #2
 80037c4:	6033      	strmi	r3, [r6, #0]
 80037c6:	6825      	ldr	r5, [r4, #0]
 80037c8:	f015 0506 	ands.w	r5, r5, #6
 80037cc:	d106      	bne.n	80037dc <_printf_common+0x48>
 80037ce:	f104 0a19 	add.w	sl, r4, #25
 80037d2:	68e3      	ldr	r3, [r4, #12]
 80037d4:	6832      	ldr	r2, [r6, #0]
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	42ab      	cmp	r3, r5
 80037da:	dc2b      	bgt.n	8003834 <_printf_common+0xa0>
 80037dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	3b00      	subs	r3, #0
 80037e4:	bf18      	it	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	0692      	lsls	r2, r2, #26
 80037ea:	d430      	bmi.n	800384e <_printf_common+0xba>
 80037ec:	4641      	mov	r1, r8
 80037ee:	4638      	mov	r0, r7
 80037f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037f4:	47c8      	blx	r9
 80037f6:	3001      	adds	r0, #1
 80037f8:	d023      	beq.n	8003842 <_printf_common+0xae>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	6922      	ldr	r2, [r4, #16]
 80037fe:	f003 0306 	and.w	r3, r3, #6
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf14      	ite	ne
 8003806:	2500      	movne	r5, #0
 8003808:	6833      	ldreq	r3, [r6, #0]
 800380a:	f04f 0600 	mov.w	r6, #0
 800380e:	bf08      	it	eq
 8003810:	68e5      	ldreq	r5, [r4, #12]
 8003812:	f104 041a 	add.w	r4, r4, #26
 8003816:	bf08      	it	eq
 8003818:	1aed      	subeq	r5, r5, r3
 800381a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800381e:	bf08      	it	eq
 8003820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003824:	4293      	cmp	r3, r2
 8003826:	bfc4      	itt	gt
 8003828:	1a9b      	subgt	r3, r3, r2
 800382a:	18ed      	addgt	r5, r5, r3
 800382c:	42b5      	cmp	r5, r6
 800382e:	d11a      	bne.n	8003866 <_printf_common+0xd2>
 8003830:	2000      	movs	r0, #0
 8003832:	e008      	b.n	8003846 <_printf_common+0xb2>
 8003834:	2301      	movs	r3, #1
 8003836:	4652      	mov	r2, sl
 8003838:	4641      	mov	r1, r8
 800383a:	4638      	mov	r0, r7
 800383c:	47c8      	blx	r9
 800383e:	3001      	adds	r0, #1
 8003840:	d103      	bne.n	800384a <_printf_common+0xb6>
 8003842:	f04f 30ff 	mov.w	r0, #4294967295
 8003846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800384a:	3501      	adds	r5, #1
 800384c:	e7c1      	b.n	80037d2 <_printf_common+0x3e>
 800384e:	2030      	movs	r0, #48	@ 0x30
 8003850:	18e1      	adds	r1, r4, r3
 8003852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800385c:	4422      	add	r2, r4
 800385e:	3302      	adds	r3, #2
 8003860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003864:	e7c2      	b.n	80037ec <_printf_common+0x58>
 8003866:	2301      	movs	r3, #1
 8003868:	4622      	mov	r2, r4
 800386a:	4641      	mov	r1, r8
 800386c:	4638      	mov	r0, r7
 800386e:	47c8      	blx	r9
 8003870:	3001      	adds	r0, #1
 8003872:	d0e6      	beq.n	8003842 <_printf_common+0xae>
 8003874:	3601      	adds	r6, #1
 8003876:	e7d9      	b.n	800382c <_printf_common+0x98>

08003878 <_printf_i>:
 8003878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	7e0f      	ldrb	r7, [r1, #24]
 800387e:	4691      	mov	r9, r2
 8003880:	2f78      	cmp	r7, #120	@ 0x78
 8003882:	4680      	mov	r8, r0
 8003884:	460c      	mov	r4, r1
 8003886:	469a      	mov	sl, r3
 8003888:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800388a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800388e:	d807      	bhi.n	80038a0 <_printf_i+0x28>
 8003890:	2f62      	cmp	r7, #98	@ 0x62
 8003892:	d80a      	bhi.n	80038aa <_printf_i+0x32>
 8003894:	2f00      	cmp	r7, #0
 8003896:	f000 80d3 	beq.w	8003a40 <_printf_i+0x1c8>
 800389a:	2f58      	cmp	r7, #88	@ 0x58
 800389c:	f000 80ba 	beq.w	8003a14 <_printf_i+0x19c>
 80038a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038a8:	e03a      	b.n	8003920 <_printf_i+0xa8>
 80038aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038ae:	2b15      	cmp	r3, #21
 80038b0:	d8f6      	bhi.n	80038a0 <_printf_i+0x28>
 80038b2:	a101      	add	r1, pc, #4	@ (adr r1, 80038b8 <_printf_i+0x40>)
 80038b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003925 	.word	0x08003925
 80038c0:	080038a1 	.word	0x080038a1
 80038c4:	080038a1 	.word	0x080038a1
 80038c8:	080038a1 	.word	0x080038a1
 80038cc:	080038a1 	.word	0x080038a1
 80038d0:	08003925 	.word	0x08003925
 80038d4:	080038a1 	.word	0x080038a1
 80038d8:	080038a1 	.word	0x080038a1
 80038dc:	080038a1 	.word	0x080038a1
 80038e0:	080038a1 	.word	0x080038a1
 80038e4:	08003a27 	.word	0x08003a27
 80038e8:	0800394f 	.word	0x0800394f
 80038ec:	080039e1 	.word	0x080039e1
 80038f0:	080038a1 	.word	0x080038a1
 80038f4:	080038a1 	.word	0x080038a1
 80038f8:	08003a49 	.word	0x08003a49
 80038fc:	080038a1 	.word	0x080038a1
 8003900:	0800394f 	.word	0x0800394f
 8003904:	080038a1 	.word	0x080038a1
 8003908:	080038a1 	.word	0x080038a1
 800390c:	080039e9 	.word	0x080039e9
 8003910:	6833      	ldr	r3, [r6, #0]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6032      	str	r2, [r6, #0]
 8003918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e09e      	b.n	8003a62 <_printf_i+0x1ea>
 8003924:	6833      	ldr	r3, [r6, #0]
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	1d19      	adds	r1, r3, #4
 800392a:	6031      	str	r1, [r6, #0]
 800392c:	0606      	lsls	r6, r0, #24
 800392e:	d501      	bpl.n	8003934 <_printf_i+0xbc>
 8003930:	681d      	ldr	r5, [r3, #0]
 8003932:	e003      	b.n	800393c <_printf_i+0xc4>
 8003934:	0645      	lsls	r5, r0, #25
 8003936:	d5fb      	bpl.n	8003930 <_printf_i+0xb8>
 8003938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800393c:	2d00      	cmp	r5, #0
 800393e:	da03      	bge.n	8003948 <_printf_i+0xd0>
 8003940:	232d      	movs	r3, #45	@ 0x2d
 8003942:	426d      	negs	r5, r5
 8003944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003948:	230a      	movs	r3, #10
 800394a:	4859      	ldr	r0, [pc, #356]	@ (8003ab0 <_printf_i+0x238>)
 800394c:	e011      	b.n	8003972 <_printf_i+0xfa>
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	6833      	ldr	r3, [r6, #0]
 8003952:	0608      	lsls	r0, r1, #24
 8003954:	f853 5b04 	ldr.w	r5, [r3], #4
 8003958:	d402      	bmi.n	8003960 <_printf_i+0xe8>
 800395a:	0649      	lsls	r1, r1, #25
 800395c:	bf48      	it	mi
 800395e:	b2ad      	uxthmi	r5, r5
 8003960:	2f6f      	cmp	r7, #111	@ 0x6f
 8003962:	6033      	str	r3, [r6, #0]
 8003964:	bf14      	ite	ne
 8003966:	230a      	movne	r3, #10
 8003968:	2308      	moveq	r3, #8
 800396a:	4851      	ldr	r0, [pc, #324]	@ (8003ab0 <_printf_i+0x238>)
 800396c:	2100      	movs	r1, #0
 800396e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003972:	6866      	ldr	r6, [r4, #4]
 8003974:	2e00      	cmp	r6, #0
 8003976:	bfa8      	it	ge
 8003978:	6821      	ldrge	r1, [r4, #0]
 800397a:	60a6      	str	r6, [r4, #8]
 800397c:	bfa4      	itt	ge
 800397e:	f021 0104 	bicge.w	r1, r1, #4
 8003982:	6021      	strge	r1, [r4, #0]
 8003984:	b90d      	cbnz	r5, 800398a <_printf_i+0x112>
 8003986:	2e00      	cmp	r6, #0
 8003988:	d04b      	beq.n	8003a22 <_printf_i+0x1aa>
 800398a:	4616      	mov	r6, r2
 800398c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003990:	fb03 5711 	mls	r7, r3, r1, r5
 8003994:	5dc7      	ldrb	r7, [r0, r7]
 8003996:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800399a:	462f      	mov	r7, r5
 800399c:	42bb      	cmp	r3, r7
 800399e:	460d      	mov	r5, r1
 80039a0:	d9f4      	bls.n	800398c <_printf_i+0x114>
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d10b      	bne.n	80039be <_printf_i+0x146>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	07df      	lsls	r7, r3, #31
 80039aa:	d508      	bpl.n	80039be <_printf_i+0x146>
 80039ac:	6923      	ldr	r3, [r4, #16]
 80039ae:	6861      	ldr	r1, [r4, #4]
 80039b0:	4299      	cmp	r1, r3
 80039b2:	bfde      	ittt	le
 80039b4:	2330      	movle	r3, #48	@ 0x30
 80039b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039be:	1b92      	subs	r2, r2, r6
 80039c0:	6122      	str	r2, [r4, #16]
 80039c2:	464b      	mov	r3, r9
 80039c4:	4621      	mov	r1, r4
 80039c6:	4640      	mov	r0, r8
 80039c8:	f8cd a000 	str.w	sl, [sp]
 80039cc:	aa03      	add	r2, sp, #12
 80039ce:	f7ff fee1 	bl	8003794 <_printf_common>
 80039d2:	3001      	adds	r0, #1
 80039d4:	d14a      	bne.n	8003a6c <_printf_i+0x1f4>
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295
 80039da:	b004      	add	sp, #16
 80039dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	2778      	movs	r7, #120	@ 0x78
 80039ea:	4832      	ldr	r0, [pc, #200]	@ (8003ab4 <_printf_i+0x23c>)
 80039ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	6831      	ldr	r1, [r6, #0]
 80039f4:	061f      	lsls	r7, r3, #24
 80039f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80039fa:	d402      	bmi.n	8003a02 <_printf_i+0x18a>
 80039fc:	065f      	lsls	r7, r3, #25
 80039fe:	bf48      	it	mi
 8003a00:	b2ad      	uxthmi	r5, r5
 8003a02:	6031      	str	r1, [r6, #0]
 8003a04:	07d9      	lsls	r1, r3, #31
 8003a06:	bf44      	itt	mi
 8003a08:	f043 0320 	orrmi.w	r3, r3, #32
 8003a0c:	6023      	strmi	r3, [r4, #0]
 8003a0e:	b11d      	cbz	r5, 8003a18 <_printf_i+0x1a0>
 8003a10:	2310      	movs	r3, #16
 8003a12:	e7ab      	b.n	800396c <_printf_i+0xf4>
 8003a14:	4826      	ldr	r0, [pc, #152]	@ (8003ab0 <_printf_i+0x238>)
 8003a16:	e7e9      	b.n	80039ec <_printf_i+0x174>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	f023 0320 	bic.w	r3, r3, #32
 8003a1e:	6023      	str	r3, [r4, #0]
 8003a20:	e7f6      	b.n	8003a10 <_printf_i+0x198>
 8003a22:	4616      	mov	r6, r2
 8003a24:	e7bd      	b.n	80039a2 <_printf_i+0x12a>
 8003a26:	6833      	ldr	r3, [r6, #0]
 8003a28:	6825      	ldr	r5, [r4, #0]
 8003a2a:	1d18      	adds	r0, r3, #4
 8003a2c:	6961      	ldr	r1, [r4, #20]
 8003a2e:	6030      	str	r0, [r6, #0]
 8003a30:	062e      	lsls	r6, r5, #24
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	d501      	bpl.n	8003a3a <_printf_i+0x1c2>
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	e002      	b.n	8003a40 <_printf_i+0x1c8>
 8003a3a:	0668      	lsls	r0, r5, #25
 8003a3c:	d5fb      	bpl.n	8003a36 <_printf_i+0x1be>
 8003a3e:	8019      	strh	r1, [r3, #0]
 8003a40:	2300      	movs	r3, #0
 8003a42:	4616      	mov	r6, r2
 8003a44:	6123      	str	r3, [r4, #16]
 8003a46:	e7bc      	b.n	80039c2 <_printf_i+0x14a>
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	1d1a      	adds	r2, r3, #4
 8003a4e:	6032      	str	r2, [r6, #0]
 8003a50:	681e      	ldr	r6, [r3, #0]
 8003a52:	6862      	ldr	r2, [r4, #4]
 8003a54:	4630      	mov	r0, r6
 8003a56:	f000 f859 	bl	8003b0c <memchr>
 8003a5a:	b108      	cbz	r0, 8003a60 <_printf_i+0x1e8>
 8003a5c:	1b80      	subs	r0, r0, r6
 8003a5e:	6060      	str	r0, [r4, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	2300      	movs	r3, #0
 8003a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a6a:	e7aa      	b.n	80039c2 <_printf_i+0x14a>
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	4649      	mov	r1, r9
 8003a70:	4640      	mov	r0, r8
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	47d0      	blx	sl
 8003a76:	3001      	adds	r0, #1
 8003a78:	d0ad      	beq.n	80039d6 <_printf_i+0x15e>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	079b      	lsls	r3, r3, #30
 8003a7e:	d413      	bmi.n	8003aa8 <_printf_i+0x230>
 8003a80:	68e0      	ldr	r0, [r4, #12]
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	4298      	cmp	r0, r3
 8003a86:	bfb8      	it	lt
 8003a88:	4618      	movlt	r0, r3
 8003a8a:	e7a6      	b.n	80039da <_printf_i+0x162>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4632      	mov	r2, r6
 8003a90:	4649      	mov	r1, r9
 8003a92:	4640      	mov	r0, r8
 8003a94:	47d0      	blx	sl
 8003a96:	3001      	adds	r0, #1
 8003a98:	d09d      	beq.n	80039d6 <_printf_i+0x15e>
 8003a9a:	3501      	adds	r5, #1
 8003a9c:	68e3      	ldr	r3, [r4, #12]
 8003a9e:	9903      	ldr	r1, [sp, #12]
 8003aa0:	1a5b      	subs	r3, r3, r1
 8003aa2:	42ab      	cmp	r3, r5
 8003aa4:	dcf2      	bgt.n	8003a8c <_printf_i+0x214>
 8003aa6:	e7eb      	b.n	8003a80 <_printf_i+0x208>
 8003aa8:	2500      	movs	r5, #0
 8003aaa:	f104 0619 	add.w	r6, r4, #25
 8003aae:	e7f5      	b.n	8003a9c <_printf_i+0x224>
 8003ab0:	08003de7 	.word	0x08003de7
 8003ab4:	08003df8 	.word	0x08003df8

08003ab8 <memmove>:
 8003ab8:	4288      	cmp	r0, r1
 8003aba:	b510      	push	{r4, lr}
 8003abc:	eb01 0402 	add.w	r4, r1, r2
 8003ac0:	d902      	bls.n	8003ac8 <memmove+0x10>
 8003ac2:	4284      	cmp	r4, r0
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	d807      	bhi.n	8003ad8 <memmove+0x20>
 8003ac8:	1e43      	subs	r3, r0, #1
 8003aca:	42a1      	cmp	r1, r4
 8003acc:	d008      	beq.n	8003ae0 <memmove+0x28>
 8003ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ad6:	e7f8      	b.n	8003aca <memmove+0x12>
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4402      	add	r2, r0
 8003adc:	428a      	cmp	r2, r1
 8003ade:	d100      	bne.n	8003ae2 <memmove+0x2a>
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aea:	e7f7      	b.n	8003adc <memmove+0x24>

08003aec <_sbrk_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	2300      	movs	r3, #0
 8003af0:	4d05      	ldr	r5, [pc, #20]	@ (8003b08 <_sbrk_r+0x1c>)
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	f7fd f83e 	bl	8000b78 <_sbrk>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_sbrk_r+0x1a>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_sbrk_r+0x1a>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	20000380 	.word	0x20000380

08003b0c <memchr>:
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	b2c9      	uxtb	r1, r1
 8003b12:	4402      	add	r2, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	d101      	bne.n	8003b1e <memchr+0x12>
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	e003      	b.n	8003b26 <memchr+0x1a>
 8003b1e:	7804      	ldrb	r4, [r0, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	428c      	cmp	r4, r1
 8003b24:	d1f6      	bne.n	8003b14 <memchr+0x8>
 8003b26:	bd10      	pop	{r4, pc}

08003b28 <_realloc_r>:
 8003b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4615      	mov	r5, r2
 8003b30:	460c      	mov	r4, r1
 8003b32:	b921      	cbnz	r1, 8003b3e <_realloc_r+0x16>
 8003b34:	4611      	mov	r1, r2
 8003b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3a:	f7ff bc47 	b.w	80033cc <_malloc_r>
 8003b3e:	b92a      	cbnz	r2, 8003b4c <_realloc_r+0x24>
 8003b40:	f7ff fbda 	bl	80032f8 <_free_r>
 8003b44:	2400      	movs	r4, #0
 8003b46:	4620      	mov	r0, r4
 8003b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4c:	f000 f81a 	bl	8003b84 <_malloc_usable_size_r>
 8003b50:	4285      	cmp	r5, r0
 8003b52:	4606      	mov	r6, r0
 8003b54:	d802      	bhi.n	8003b5c <_realloc_r+0x34>
 8003b56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b5a:	d8f4      	bhi.n	8003b46 <_realloc_r+0x1e>
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f7ff fc34 	bl	80033cc <_malloc_r>
 8003b64:	4607      	mov	r7, r0
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d0ec      	beq.n	8003b44 <_realloc_r+0x1c>
 8003b6a:	42b5      	cmp	r5, r6
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4621      	mov	r1, r4
 8003b70:	bf28      	it	cs
 8003b72:	4632      	movcs	r2, r6
 8003b74:	f7ff fbb2 	bl	80032dc <memcpy>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	f7ff fbbc 	bl	80032f8 <_free_r>
 8003b80:	463c      	mov	r4, r7
 8003b82:	e7e0      	b.n	8003b46 <_realloc_r+0x1e>

08003b84 <_malloc_usable_size_r>:
 8003b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b88:	1f18      	subs	r0, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bfbc      	itt	lt
 8003b8e:	580b      	ldrlt	r3, [r1, r0]
 8003b90:	18c0      	addlt	r0, r0, r3
 8003b92:	4770      	bx	lr

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
